{"version":3,"sources":["services/models/runs/runsAppModel.ts","pages/Runs/RunsTable.tsx","pages/Runs/components/RunsBar/RunsBar.tsx","pages/Runs/components/SearchBar/SearchBar.tsx","pages/Runs/Runs.tsx","pages/Runs/RunsContainer.tsx","assets/icons/successIcon.svg","assets/icons/errorIcon.svg","components/NotificationContainer/NotificationContainer.tsx","components/AppBar/AppBar.tsx","utils/showAutocompletion.ts","components/AutocompleteInput/AutocompleteInput.tsx","components/AutocompleteInput/index.ts","components/LiveUpdateSettings/LiveUpdateSettings.tsx","../node_modules/lodash/last.js","utils/app/manageSystemMetricColumns.ts"],"names":["runsAppModel","createAppModel","appInitialConfig","RUNS","RunsTable","isInfiniteLoading","tableRef","columns","tableRowHeight","onExportTableData","getLastRunsData","isLatest","data","onColumnsVisibilityChange","onTableDiffShow","onManageColumns","onRowHeightChange","hiddenColumns","columnsOrder","columnsWidths","hideSystemMetrics","updateColumnsWidths","selectedRows","onRowSelect","archiveRuns","deleteRuns","requestStatus","onToggleColumnsColorScales","columnsColorScales","getLatestRunsDataRequestRef","React","useRef","useEffect","current","abort","ErrorBoundary","className","Table","custom","allowInfiniteLoading","showRowClickBehaviour","infiniteLoadHandler","row","call","catch","showResizeContainerActionBar","ref","isLoading","RequestStatusEnum","Pending","appName","AppNameEnum","multiSelect","topHeader","rowHeight","onExport","illustrationConfig","type","Request_Illustrations","page","CircularProgress","RunsBar","props","AppBar","title","pageTitlesEnum","RUNS_EXPLORER","LiveUpdateSettings","ControlPopover","anchor","onAnchorClick","withOnlyIcon","color","size","onClick","fontSize","name","component","href","DOCUMENTATIONS","EXPLORERS","MAIN","target","rel","MenuItem","memo","SearchBar","searchSuggestions","isRunsDataLoading","searchValue","onSearchInputChange","searchRunsRef","autocompleteRef","handleRunSearch","useCallback","query","getValue","runAppModel","getRunsData","detail","exceptionHandler","model","trackEvent","ANALYTICS_EVENT_KEYS","runs","searchClick","onSubmit","AutocompleteInput","refObject","onEnter","context","value","Divider","style","margin","orientation","flexItem","e","preventDefault","abortRequest","variant","startIcon","Runs","liveUpdateConfig","onLiveUpdateConfigChange","onSelectRunQueryChange","tableData","tableColumns","runsList","notifyData","length","NotificationContainer","handleClose","onNotificationDelete","RunsContainer","runsData","useModel","history","useHistory","setComponentRefs","refElement","manageSystemMetricColumns","initialize","analytics","pageView","unListenHistory","listen","location","config","select","getStateFromUrl","setDefaultAppConfigData","destroy","pagination","table","selectFormData","suggestions","infiniteIsPending","onColumnsOrderChange","liveUpdate","changeLiveUpdateConfig","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","map","id","severity","messages","Box","mt","Alert","onClose","iconMapping","success","src","successIconImg","alt","error","errorIconImg","height","message","i","classNames","weight","tint","children","showAutocompletion","monaco","options","languages","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","position","words","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","replace","split","activeTyping","last","specialCharactersForWordSplitting","forEach","char","includes","Object","keys","some","key","startsWith","filteredOptions","dot","option","isMember","charAt","isIncluded","lastToken","prefix","parents","substring","parent","hasOwnProperty","word","getWordUntilPosition","range","prop","detailType","getDetailType","get","completionItem","label","kind","getType","hasExampleType","insertText","CompletionItemKind","Function","Method","push","getSuggestions","__example_type__","slice","maybe","toLowerCase","Class","Property","Variable","advanced","editorProps","onChange","useState","hasSelection","setHasSelection","containerWidth","setContainerWidth","focused","setFocused","mounted","setMounted","editorValue","setEditorValue","useMonaco","editorRef","editor","defineTheme","monacoConfig","theme","setTheme","onResize","_","debounce","window","innerWidth","addEventListener","handleBlur","disposable","dispose","removeEventListener","focus","useMemo","getMonacoConfig","handleFocus","onSelectionChange","selection","handleChange","val","ev","formattedValue","changes","text","setValue","AutocompleteInput__focused","AutocompleteInput__advanced","language","onMount","onDidFocusEditorWidget","onDidBlurEditorWidget","onDidChangeCursorSelection","loading","loader","paths","vs","getBasePath","displayName","checked","Boolean","enabled","module","exports","array","undefined","modelState","getState","systemMetrics","getSystemMetricsFromColumns","updateModelData"],"mappings":"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","file":"static/js/runs.js?version=409c2afbb8b776df1c06","sourcesContent":["import { appInitialConfig, createAppModel } from 'services/models/explorer';\n\nconst runsAppModel = createAppModel(appInitialConfig.RUNS) as any;\n\nexport default runsAppModel;\n","import React from 'react';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport Table from 'components/Table/Table';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { RequestStatusEnum } from 'config/enums/requestStatusEnum';\nimport { Request_Illustrations } from 'config/illustrationConfig/illustrationConfig';\n\nimport { AppNameEnum } from 'services/models/explorer';\n\nimport { IRunsTableProps } from 'types/pages/runs/Runs';\n\nfunction RunsTable({\n  isInfiniteLoading,\n  tableRef,\n  columns,\n  tableRowHeight,\n  onExportTableData,\n  getLastRunsData,\n  isLatest,\n  data,\n  onColumnsVisibilityChange,\n  onTableDiffShow,\n  onManageColumns,\n  onRowHeightChange,\n  hiddenColumns,\n  columnsOrder,\n  columnsWidths,\n  hideSystemMetrics,\n  updateColumnsWidths,\n  selectedRows,\n  onRowSelect,\n  archiveRuns,\n  deleteRuns,\n  requestStatus,\n  onToggleColumnsColorScales,\n  columnsColorScales,\n}: IRunsTableProps): React.FunctionComponentElement<React.ReactNode> {\n  const getLatestRunsDataRequestRef = React.useRef<any>(null);\n  React.useEffect(() => {\n    return () => {\n      getLatestRunsDataRequestRef.current?.abort();\n    };\n  }, []);\n\n  function handleInfiniteLoad(row: any) {\n    if (!isLatest && !isInfiniteLoading) {\n      getLatestRunsDataRequestRef.current = getLastRunsData(row);\n      getLatestRunsDataRequestRef.current?.call().catch();\n    }\n  }\n\n  return (\n    <ErrorBoundary>\n      <div className='Runs__RunList__runListBox'>\n        <div className='RunsTable'>\n          <Table\n            custom\n            allowInfiniteLoading\n            isInfiniteLoading={isInfiniteLoading}\n            showRowClickBehaviour={false}\n            infiniteLoadHandler={handleInfiniteLoad}\n            showResizeContainerActionBar={false}\n            ref={tableRef}\n            data={data}\n            columns={columns}\n            isLoading={requestStatus === RequestStatusEnum.Pending}\n            selectedRows={selectedRows}\n            appName={AppNameEnum.RUNS}\n            multiSelect\n            // Table options\n            topHeader\n            rowHeight={tableRowHeight}\n            hiddenColumns={hiddenColumns}\n            hideSystemMetrics={hideSystemMetrics}\n            columnsOrder={columnsOrder}\n            columnsWidths={columnsWidths}\n            // Table actions\n            onManageColumns={onManageColumns}\n            onColumnsVisibilityChange={onColumnsVisibilityChange}\n            onTableDiffShow={onTableDiffShow}\n            onRowHeightChange={onRowHeightChange}\n            updateColumnsWidths={updateColumnsWidths}\n            onExport={onExportTableData}\n            onRowSelect={onRowSelect}\n            archiveRuns={archiveRuns}\n            deleteRuns={deleteRuns}\n            illustrationConfig={{\n              type: Request_Illustrations[requestStatus as RequestStatusEnum],\n              page: 'runs',\n            }}\n            onToggleColumnsColorScales={onToggleColumnsColorScales}\n            columnsColorScales={columnsColorScales}\n          />\n        </div>\n        {isInfiniteLoading && (\n          <div className='Infinite_Loader'>\n            <CircularProgress />\n          </div>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default RunsTable;\n","import React from 'react';\n\nimport { MenuItem } from '@material-ui/core';\n\nimport AppBar from 'components/AppBar/AppBar';\nimport LiveUpdateSettings from 'components/LiveUpdateSettings/LiveUpdateSettings';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport { Button, Icon } from 'components/kit';\nimport ControlPopover from 'components/ControlPopover/ControlPopover';\n\nimport pageTitlesEnum from 'config/pageTitles/pageTitles';\nimport { DOCUMENTATIONS } from 'config/references';\n\nimport 'pages/Metrics/components/MetricsBar/MetricsBar.scss';\n\nfunction RunsBar(props: {\n  enabled: boolean;\n  delay: number;\n  onLiveUpdateConfigChange: () => void;\n}): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <AppBar title={pageTitlesEnum.RUNS_EXPLORER}>\n        <LiveUpdateSettings {...props} />\n        <div className='MetricsBar__menu'>\n          <ErrorBoundary>\n            <ControlPopover\n              title='Menu'\n              anchor={({ onAnchorClick }) => (\n                <Button\n                  withOnlyIcon\n                  color='secondary'\n                  size='small'\n                  onClick={onAnchorClick}\n                >\n                  <Icon\n                    fontSize={16}\n                    name='menu'\n                    className='MetricsBar__item__bookmark__Icon'\n                  />\n                </Button>\n              )}\n              component={\n                <div className='MetricsBar__popover'>\n                  <a\n                    href={DOCUMENTATIONS.EXPLORERS.RUNS.MAIN}\n                    target='_blank'\n                    rel='noreferrer'\n                  >\n                    <MenuItem>Explorer Documentation</MenuItem>\n                  </a>\n                </div>\n              }\n            />\n          </ErrorBoundary>\n        </div>\n      </AppBar>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(RunsBar);\n","import React from 'react';\n\nimport { Divider } from '@material-ui/core';\n\nimport { Button, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport AutocompleteInput from 'components/AutocompleteInput';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport runAppModel from 'services/models/runs/runsAppModel';\nimport { trackEvent } from 'services/analytics';\n\nimport exceptionHandler from 'utils/app/exceptionHandler';\n\nimport './SearchBar.scss';\n\nfunction SearchBar({\n  searchSuggestions,\n  isRunsDataLoading,\n  searchValue,\n  onSearchInputChange,\n}: any) {\n  const searchRunsRef = React.useRef<any>(null);\n  const autocompleteRef: any = React.useRef<React.MutableRefObject<any>>(null);\n  React.useEffect(() => {\n    return () => {\n      searchRunsRef.current?.abort();\n    };\n  }, []);\n\n  const handleRunSearch = React.useCallback(() => {\n    if (isRunsDataLoading) {\n      return;\n    }\n    const query = autocompleteRef.current.getValue();\n    onSearchInputChange(query);\n    searchRunsRef.current = runAppModel.getRunsData(true, true, true, query);\n    searchRunsRef.current\n      .call((detail: any) => {\n        exceptionHandler({ detail, model: runAppModel });\n      })\n      .catch();\n    trackEvent(ANALYTICS_EVENT_KEYS.runs.searchClick);\n  }, [isRunsDataLoading, onSearchInputChange]);\n\n  function handleRequestAbort(e: React.SyntheticEvent): void {\n    e.preventDefault();\n    if (!isRunsDataLoading) {\n      return;\n    }\n    searchRunsRef.current?.abort();\n    runAppModel.abortRequest();\n  }\n  return (\n    <ErrorBoundary>\n      <div className='Runs_Search_Bar'>\n        <form onSubmit={handleRunSearch}>\n          <AutocompleteInput\n            refObject={autocompleteRef}\n            onEnter={handleRunSearch}\n            context={searchSuggestions}\n            value={searchValue}\n          />\n        </form>\n        <Divider style={{ margin: '0 1em' }} orientation='vertical' flexItem />\n        <Button\n          className='Runs_Search_Bar__Button'\n          color='primary'\n          onClick={isRunsDataLoading ? handleRequestAbort : handleRunSearch}\n          variant={isRunsDataLoading ? 'outlined' : 'contained'}\n          startIcon={\n            <Icon\n              name={isRunsDataLoading ? 'close' : 'search'}\n              fontSize={isRunsDataLoading ? 12 : 14}\n            />\n          }\n        >\n          {isRunsDataLoading ? 'Cancel' : 'Search'}\n        </Button>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\n\nimport NotificationContainer from 'components/NotificationContainer/NotificationContainer';\n\nimport { RequestStatusEnum } from 'config/enums/requestStatusEnum';\n\nimport RunsTable from './RunsTable';\nimport RunsBar from './components/RunsBar/RunsBar';\nimport SearchBar from './components/SearchBar/SearchBar';\n\nimport './Runs.scss';\n\nfunction Runs(props: any): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <div className='Runs__container'>\n      <section className='Runs__section'>\n        <div className='Runs__section__div Runs__fullHeight'>\n          <RunsBar\n            {...{\n              ...props.liveUpdateConfig,\n              onLiveUpdateConfigChange: props.onLiveUpdateConfigChange,\n            }}\n          />\n          <SearchBar\n            searchSuggestions={props.searchSuggestions}\n            onSearchInputChange={props.onSelectRunQueryChange}\n            searchValue={props.query}\n            isRunsDataLoading={\n              props.requestStatus === RequestStatusEnum.Pending\n            }\n          />\n          <div className='Runs__table__container'>\n            <RunsTable\n              columnsOrder={props.columnsOrder}\n              hiddenColumns={props.hiddenColumns}\n              onColumnsVisibilityChange={props.onColumnsVisibilityChange}\n              onTableDiffShow={props.onTableDiffShow}\n              onManageColumns={props.onManageColumns}\n              onRowHeightChange={props.onRowHeightChange}\n              data={props.tableData}\n              isInfiniteLoading={props.isInfiniteLoading}\n              isLatest={props.isLatest}\n              hideSystemMetrics={props.hideSystemMetrics}\n              onExportTableData={props.onExportTableData}\n              tableRowHeight={props.tableRowHeight}\n              columns={props.tableColumns}\n              runsList={props.tableData}\n              requestStatus={props.requestStatus}\n              tableRef={props.tableRef}\n              getLastRunsData={props.getLastRunsData}\n              columnsWidths={props.columnsWidths}\n              updateColumnsWidths={props.updateColumnsWidths}\n              selectedRows={props.selectedRows}\n              onRowSelect={props.onRowSelect}\n              archiveRuns={props.archiveRuns}\n              deleteRuns={props.deleteRuns}\n              onToggleColumnsColorScales={props.onToggleColumnsColorScales}\n              columnsColorScales={props.columnsColorScales}\n            />\n          </div>\n        </div>\n        {props.notifyData?.length > 0 && (\n          <NotificationContainer\n            handleClose={props.onNotificationDelete}\n            data={props.notifyData}\n          />\n        )}\n      </section>\n    </div>\n  );\n}\n\nexport default Runs;\n","import React, { memo } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport useModel from 'hooks/model/useModel';\n\nimport runsAppModel from 'services/models/runs/runsAppModel';\nimport * as analytics from 'services/analytics';\n\nimport { ITableRef } from 'types/components/Table/Table';\n\nimport setComponentRefs from 'utils/app/setComponentRefs';\nimport getStateFromUrl from 'utils/getStateFromUrl';\nimport manageSystemMetricColumns from 'utils/app/manageSystemMetricColumns';\n\nimport Runs from './Runs';\n\nfunction RunsContainer(): React.FunctionComponentElement<React.ReactNode> {\n  const tableRef = React.useRef<ITableRef>(null);\n  const runsData = useModel<any>(runsAppModel);\n  const history = useHistory();\n\n  React.useEffect(() => {\n    if (tableRef.current) {\n      setComponentRefs({\n        refElement: {\n          tableRef,\n        },\n        model: runsAppModel,\n      });\n    }\n    if (runsData?.data?.length > 0) {\n      manageSystemMetricColumns(runsAppModel);\n    }\n  }, [runsData?.data]);\n\n  React.useEffect(() => {\n    runsAppModel.initialize();\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runs.pageView);\n    const unListenHistory = history.listen((location) => {\n      if (!!runsData?.config!) {\n        if (runsData.config.select !== getStateFromUrl('search')) {\n          runsAppModel.setDefaultAppConfigData();\n        }\n      }\n    });\n    return () => {\n      unListenHistory();\n      runsAppModel.destroy();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <ErrorBoundary>\n      <Runs\n        tableData={runsData?.tableData}\n        tableColumns={runsData?.tableColumns}\n        requestStatus={runsData?.requestStatus}\n        isLatest={runsData?.config?.pagination.isLatest}\n        onSelectRunQueryChange={runsAppModel.onSelectRunQueryChange}\n        onToggleColumnsColorScales={runsAppModel.onToggleColumnsColorScales}\n        tableRowHeight={runsData?.config?.table?.rowHeight}\n        tableRef={tableRef}\n        columnsOrder={runsData?.config?.table.columnsOrder}\n        hiddenColumns={runsData?.config?.table.hiddenColumns!}\n        hideSystemMetrics={runsData?.config?.table?.hideSystemMetrics}\n        selectedRows={runsData?.selectedRows}\n        query={runsData?.config?.select?.query}\n        searchSuggestions={runsData?.selectFormData?.suggestions!}\n        columnsWidths={runsData?.config?.table.columnsWidths}\n        onExportTableData={runsAppModel.onExportTableData}\n        updateColumnsWidths={runsAppModel.updateColumnsWidths}\n        getLastRunsData={runsAppModel.getLastRunsData}\n        isInfiniteLoading={runsData?.infiniteIsPending}\n        onNotificationDelete={runsAppModel.onNotificationDelete}\n        notifyData={runsData?.notifyData}\n        columnsColorScales={runsData?.config?.table?.columnsColorScales}\n        onRowHeightChange={runsAppModel.onRowHeightChange}\n        onManageColumns={runsAppModel.onColumnsOrderChange}\n        onColumnsVisibilityChange={runsAppModel.onColumnsVisibilityChange}\n        onTableDiffShow={runsAppModel.onTableDiffShow}\n        liveUpdateConfig={runsData?.config?.liveUpdate}\n        onLiveUpdateConfigChange={runsAppModel.changeLiveUpdateConfig}\n        onRowSelect={runsAppModel.onRowSelect}\n        archiveRuns={runsAppModel.archiveRuns}\n        deleteRuns={runsAppModel.deleteRuns}\n      />\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunsContainer);\n","export default __webpack_public_path__ + \"static/media/successIcon.bd3fad23.svg\";","export default __webpack_public_path__ + \"static/media/errorIcon.09cae82c.svg\";","import React from 'react';\n\nimport { Alert } from '@material-ui/lab';\nimport { Box, Snackbar } from '@material-ui/core';\n\nimport successIconImg from 'assets/icons/successIcon.svg';\nimport errorIconImg from 'assets/icons/errorIcon.svg';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { INotificationContainer } from 'types/components/NotificationContainer/NotificationContainer';\n\nimport './NotificationContainer.scss';\n\nexport default function NotificationContainer({\n  data,\n  handleClose,\n}: INotificationContainer): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div>\n        <Snackbar\n          open={true}\n          autoHideDuration={3000}\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <div className='NotificationContainer'>\n            {data.map(({ id, severity, messages }) => (\n              <Box key={id} mt={0.5}>\n                <Alert\n                  onClose={() => handleClose(+id)}\n                  variant='outlined'\n                  severity={severity}\n                  iconMapping={{\n                    success: <img src={successIconImg} alt='' />,\n                    error: <img src={errorIconImg} alt='' />,\n                  }}\n                  style={{ height: 'auto' }}\n                >\n                  <div className='NotificationContainer__contentBox'>\n                    <p className='NotificationContainer__contentBox__severity'>\n                      {severity}\n                    </p>\n                    {messages.map((message: string, i: number) => {\n                      return message ? (\n                        <p\n                          key={i}\n                          className='NotificationContainer__contentBox__message'\n                        >\n                          {message}\n                        </p>\n                      ) : null;\n                    })}\n                  </div>\n                </Alert>\n              </Box>\n            ))}\n          </div>\n        </Snackbar>\n      </div>\n    </ErrorBoundary>\n  );\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IAppBarProps } from 'types/components/AppBar/AppBar';\n\nimport './AppBar.scss';\n\nfunction AppBar(\n  props: IAppBarProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div\n        className={classNames('AppBar', {\n          [props?.className ?? '']: props.className,\n        })}\n      >\n        <Text\n          component='h3'\n          weight={600}\n          size={14}\n          tint={100}\n          className='AppBar__title'\n        >\n          {props.title}\n        </Text>\n        {props.children && (\n          <div className={`AppBar__content ${props.className || ''}`}>\n            {props.children}\n          </div>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default AppBar;\n","import * as dot from 'dot-object';\n\nimport last from 'lodash/last';\nimport get from 'lodash/get';\nimport { Monaco } from '@monaco-editor/react';\n\nfunction showAutocompletion(monaco: Monaco, options: Record<string, string>) {\n  // Register object that will return autocomplete items\n  return monaco?.languages.registerCompletionItemProvider(\n    'python',\n    getSuggestions(monaco, options),\n  );\n}\n\nconst specialCharactersForWordSplitting = ['(', '='];\n\nfunction getDetailType(detail: any): {\n  type: string;\n  hasExampleType: boolean;\n} {\n  const hasExampleType = detail?.hasOwnProperty('__example_type__');\n  let type: string = '';\n  if (hasExampleType) {\n    let sliced = detail.__example_type__.slice(\n      7,\n      detail.__example_type__.length - 1,\n    );\n    switch (sliced) {\n      case \"'str'\":\n        type = 'str';\n        break;\n      case \"'int'\":\n        type = 'int';\n        break;\n      case \"'bool'\":\n        type = 'bool';\n        break;\n      case \"'list'\":\n        type = 'list';\n        break;\n      case \"'float'\":\n        type = 'float';\n        break;\n      case \"'bytes'\":\n        type = 'bytes';\n        break;\n      //TODO: Add datetime type\n      default:\n        type = 'unknown';\n        break;\n    }\n  } else {\n    switch (typeof detail) {\n      case 'object':\n        type = 'dict';\n        break;\n      case 'string':\n        type = 'str';\n        break;\n      case 'boolean':\n        type = 'bool';\n        break;\n      case 'number':\n        type = 'int';\n        break;\n    }\n  }\n  return { type, hasExampleType };\n}\n\n// Helper function to return the monaco completion item type of a thing\nfunction getType(monaco: Monaco, maybe: any, isMember = false) {\n  switch ((typeof maybe).toLowerCase()) {\n    case 'object':\n      return monaco.languages.CompletionItemKind.Class;\n\n    // Now we don't have such autocompletion scenario,\n    // but we may support showing possible methods with their docstrings in the future\n    case 'function':\n      return isMember\n        ? monaco.languages.CompletionItemKind.Method\n        : monaco.languages.CompletionItemKind.Function;\n    default:\n      return isMember\n        ? monaco.languages.CompletionItemKind.Property\n        : monaco.languages.CompletionItemKind.Variable;\n  }\n}\n\nfunction getSuggestions(monaco: Monaco, options: Record<string, string>) {\n  /* eslint-disable */\n  // NOTE: this code segment was taken(modified) from the following git gist\n  // https://gist.github.com/mwrouse/05d8c11cd3872c19c684bd1904a2202e\n  return {\n    //TODO: Maybe support manual trigger such as [Ctrl + Space]\n    triggerCharacters: ['.'],\n\n    // Function to generate autocompletion results\n    provideCompletionItems(model: any, position: any) {\n      // Split everything the user has typed on the current line up at each space, and only look at the last word\n      const lastChars = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 1,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column,\n      });\n      const words = lastChars.replace('\\t', '').split(' ');\n      let activeTyping: any = last(words); // What the user is currently typing (everything after the last space)\n\n      specialCharactersForWordSplitting.forEach((char) => {\n        if (activeTyping.includes(char)) {\n          activeTyping = last(activeTyping.split(char));\n        }\n      });\n\n      if (!Object.keys(options).some((key) => activeTyping.startsWith(key))) {\n        // Here, we are interested only in these cases where the active typing starts\n        // with one of the first level keys of \"options\" object.\n        // For example, the common \"options\" object for NodeEditor will look like this:\n        // { context: { user: { id: ..., name: ..., email: ... }, classes: { ... }, ... } }\n        // In this particular case, we are interested only in the case where activeTyping starts with the word\n        // \"context\". In all other cases, we return \"null\" to force the monaco to fall back to the next suggest provider\n        // read more about this issue here - https://github.com/microsoft/monaco-editor/issues/2646\n        return null;\n      }\n\n      // flatten strings of array of accessible options paths without example type\n      const filteredOptions = Object.keys(dot.dot(options)).map(\n        (option) => option.split('.__example_type__')[0],\n      );\n\n      // If the last character typed is a period then we need to look at member objects of the `options` object\n      const isMember = activeTyping.charAt(activeTyping.length - 1) === '.';\n\n      let isIncluded: boolean = false;\n      // Array of autocompletion results\n      const suggestions: any = [];\n\n      //Checking is the word included in options list\n      for (let option of filteredOptions) {\n        if (option.split(activeTyping)[0] === '') {\n          isIncluded = true;\n          break;\n        }\n      }\n\n      // Used for generic handling between member and non-member objects\n      let lastToken: any = options;\n      let prefix = '';\n\n      if (isMember && isIncluded) {\n        // Is a member, get a list of all members, and the prefix\n        const parents = activeTyping\n          .substring(0, activeTyping.length - 1)\n          .split('.');\n        lastToken = options[parents[0]];\n        prefix = parents[0];\n\n        // Loop through all the parents the current one will have (to generate prefix)\n        parents.forEach((parent: any) => {\n          if (lastToken?.hasOwnProperty(parent)) {\n            prefix += `.${parent}`;\n            lastToken = lastToken[parent];\n          } else {\n            // Not valid\n            return suggestions;\n          }\n        });\n\n        prefix += '.';\n      }\n\n      const word = model.getWordUntilPosition(position);\n      const range = {\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: word.startColumn,\n        endColumn: word.endColumn,\n      };\n\n      // Get all the child properties of the last token\n      for (const prop in lastToken) {\n        // Do not show properites that begin with \"__\"\n        if (lastToken.hasOwnProperty(prop) && !prop.startsWith('__')) {\n          // Create completion object\n          let detailType = getDetailType(get(options, prefix + prop));\n          const completionItem = {\n            label: prop,\n            kind: getType(\n              monaco,\n              detailType.hasExampleType ? detailType.type : lastToken[prop],\n              isMember,\n            ),\n            insertText: prop,\n            detail: detailType.type,\n            range,\n          };\n          // Change insertText for functions\n          if (\n            completionItem.kind ===\n              monaco.languages.CompletionItemKind.Function ||\n            completionItem.kind === monaco.languages.CompletionItemKind.Method\n          ) {\n            completionItem.insertText += '(';\n          }\n\n          // Add to final suggestionss\n          suggestions.push(completionItem);\n        }\n      }\n      return { suggestions: isIncluded ? suggestions : [] };\n    },\n  };\n}\n\nexport { showAutocompletion };\n","import React from 'react';\nimport classNames from 'classnames';\nimport * as monacoEditor from 'monaco-editor';\nimport _ from 'lodash-es';\n\nimport Editor, { useMonaco, loader } from '@monaco-editor/react';\n\nimport { getMonacoConfig } from 'config/monacoConfig/monacoConfig';\nimport { getBasePath } from 'config/config';\n\nimport { showAutocompletion } from 'utils/showAutocompletion';\n\nimport { IAutocompleteInputProps } from './ AutocompleteInput';\n\nimport './AutocompleteInput.scss';\n\n// loading monaco from node modules instead of CDN\nloader.config({\n  paths: {\n    vs: `${getBasePath()}/static-files/vs`,\n  },\n});\n\nfunction AutocompleteInput({\n  context,\n  advanced,\n  className,\n  editorProps = {},\n  value = '',\n  refObject,\n  //callback functions\n  onEnter,\n  onChange,\n}: IAutocompleteInputProps) {\n  const [hasSelection, setHasSelection] = React.useState(false);\n  const [containerWidth, setContainerWidth] = React.useState<number>(0);\n  const [focused, setFocused] = React.useState<boolean>(false);\n  const [mounted, setMounted] = React.useState<boolean>(false);\n  const [editorValue, setEditorValue] = React.useState<string>(value);\n  const monaco: any = useMonaco();\n  const editorRef = React.useRef<any>();\n\n  React.useEffect(() => {\n    if (mounted) {\n      monaco.editor.defineTheme(\n        monacoConfig.theme.name,\n        monacoConfig.theme.config,\n      );\n      monaco.editor.setTheme(monacoConfig.theme.name);\n    }\n    const onResize = _.debounce(() => {\n      setContainerWidth(window.innerWidth);\n    }, 500);\n    window.addEventListener('resize', onResize);\n    // inserting given object for autosuggestion\n    handleBlur();\n    const disposable = showAutocompletion(monaco, context);\n    return () => {\n      disposable?.dispose();\n      window.removeEventListener('resize', onResize);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [monaco, context, mounted]);\n\n  React.useEffect(() => {\n    if (focused) {\n      editorRef.current?.focus();\n    }\n  }, [focused, mounted]);\n\n  React.useEffect(() => {\n    if (value !== editorValue) {\n      setEditorValue(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const monacoConfig: Record<any, any> = React.useMemo(() => {\n    return getMonacoConfig(advanced);\n  }, [advanced]);\n\n  const handleFocus: () => void = React.useCallback((): void => {\n    setFocused(true);\n  }, []);\n\n  const handleBlur: () => void = React.useCallback((): void => {\n    setFocused(false);\n  }, []);\n\n  function handleDidMount(editor: monacoEditor.editor.IStandaloneCodeEditor) {\n    setMounted(true);\n    editorRef.current = editor;\n    if (refObject) {\n      refObject.current = editorRef.current;\n    }\n    editorRef.current.onDidFocusEditorWidget(handleFocus);\n    editorRef.current.onDidBlurEditorWidget(handleBlur);\n    editorRef.current.onDidChangeCursorSelection(onSelectionChange);\n  }\n\n  function onSelectionChange(\n    e: monacoEditor.editor.ICursorSelectionChangedEvent,\n  ) {\n    if (e.selection) {\n      const { startColumn, endColumn } = e.selection;\n      const selectionPosition = startColumn !== endColumn;\n      setHasSelection(selectionPosition);\n    }\n  }\n\n  const handleChange = React.useCallback(\n    (\n      val: string | undefined,\n      ev: monacoEditor.editor.IModelContentChangedEvent,\n    ) => {\n      if (typeof val === 'string') {\n        // formatting value to avoid the new line\n        let formattedValue = (hasSelection ? editorValue : val).replace(\n          /[\\n\\r]/g,\n          '',\n        );\n        if (ev.changes[0].text === '\\n') {\n          editorRef.current!.setValue(formattedValue);\n          if (onEnter) {\n            onEnter();\n          }\n          if (onChange) {\n            onChange(formattedValue, ev);\n          }\n        }\n        setEditorValue(formattedValue);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [hasSelection, onChange, onEnter],\n  );\n\n  return (\n    <div\n      onClick={handleFocus}\n      className={classNames(`AutocompleteInput ${className || ''}`, {\n        AutocompleteInput__focused: focused,\n        AutocompleteInput__advanced: advanced,\n      })}\n    >\n      <Editor\n        key={containerWidth}\n        language='python'\n        height={monacoConfig.height}\n        value={editorValue}\n        onChange={handleChange}\n        onMount={handleDidMount}\n        loading={<span />}\n        options={monacoConfig.options}\n        {...editorProps}\n      />\n      {focused || editorValue ? null : (\n        <div className='AutocompleteInput__placeholder'>\n          Filter runs, e.g. run.learning_rate {'>'} 0.0001 and run.batch_size ==\n          32\n        </div>\n      )}\n    </div>\n  );\n}\n\nAutocompleteInput.displayName = 'AutocompleteInput';\n\nexport default React.memo(AutocompleteInput);\n","import AutocompleteInput from './AutocompleteInput';\n\nexport * from './AutocompleteInput';\n\nexport default AutocompleteInput;\n","import React from 'react';\n\nimport { Switcher, Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport './LiveUpdateSettings.scss';\n\nexport interface ILiveUpdateSettingsProp {\n  delay: number;\n  enabled: boolean;\n  onLiveUpdateConfigChange: ({ enabled }: { enabled: boolean }) => void;\n}\n\nfunction LiveUpdateSettings(\n  props: ILiveUpdateSettingsProp,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div className='LiveUpdateSettings'>\n        <Text className='LiveUpdateSettings__Text' size={14}>\n          Live Update:\n        </Text>\n        <Switcher\n          checked={Boolean(props.enabled)}\n          onChange={() => {\n            props.onLiveUpdateConfigChange({ enabled: !props.enabled });\n          }}\n          size='small'\n          color='primary'\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo<ILiveUpdateSettingsProp>(LiveUpdateSettings);\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n","import { ITableColumn } from 'types/pages/metrics/components/TableColumns/TableColumns';\nimport { IModel, State } from 'types/services/models/model';\n\nimport getSystemMetricsFromColumns from './getSystemMetricsFromColumns';\n\nexport default function manageSystemMetricColumns<M extends State>(\n  model: IModel<M> | any,\n) {\n  const modelState = model.getState();\n  const systemMetrics: string[] = getSystemMetricsFromColumns(\n    modelState?.tableColumns! as ITableColumn[],\n  );\n  let hiddenColumns: string[] = [...modelState!.config!.table.hiddenColumns!];\n  if (\n    hiddenColumns.length === 0 &&\n    systemMetrics.length > 0 &&\n    modelState!.config!.table.hideSystemMetrics\n  ) {\n    hiddenColumns = systemMetrics;\n\n    model.updateModelData({\n      ...modelState.config,\n      table: {\n        ...modelState.config!.table,\n        hiddenColumns,\n      },\n    });\n  }\n}\n"],"sourceRoot":""}