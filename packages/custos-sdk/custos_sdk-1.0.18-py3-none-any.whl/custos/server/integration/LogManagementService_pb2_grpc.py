#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements. See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership. The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing,
#   software distributed under the License is distributed on an
#   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#   KIND, either express or implied. See the License for the
#   specific language governing permissions and limitations
#   under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import custos.server.core.LoggingService_pb2 as LoggingService__pb2


class LogManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLogEvents = channel.unary_unary(
                '/org.apache.custos.log.management.service.LogManagementService/getLogEvents',
                request_serializer=LoggingService__pb2.LogEventRequest.SerializeToString,
                response_deserializer=LoggingService__pb2.LogEvents.FromString,
                )
        self.isLogEnabled = channel.unary_unary(
                '/org.apache.custos.log.management.service.LogManagementService/isLogEnabled',
                request_serializer=LoggingService__pb2.LoggingConfigurationRequest.SerializeToString,
                response_deserializer=LoggingService__pb2.Status.FromString,
                )
        self.enable = channel.unary_unary(
                '/org.apache.custos.log.management.service.LogManagementService/enable',
                request_serializer=LoggingService__pb2.LoggingConfigurationRequest.SerializeToString,
                response_deserializer=LoggingService__pb2.Status.FromString,
                )


class LogManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getLogEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isLogEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLogEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.getLogEvents,
                    request_deserializer=LoggingService__pb2.LogEventRequest.FromString,
                    response_serializer=LoggingService__pb2.LogEvents.SerializeToString,
            ),
            'isLogEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.isLogEnabled,
                    request_deserializer=LoggingService__pb2.LoggingConfigurationRequest.FromString,
                    response_serializer=LoggingService__pb2.Status.SerializeToString,
            ),
            'enable': grpc.unary_unary_rpc_method_handler(
                    servicer.enable,
                    request_deserializer=LoggingService__pb2.LoggingConfigurationRequest.FromString,
                    response_serializer=LoggingService__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.custos.log.management.service.LogManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LogManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getLogEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.log.management.service.LogManagementService/getLogEvents',
            LoggingService__pb2.LogEventRequest.SerializeToString,
            LoggingService__pb2.LogEvents.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isLogEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.log.management.service.LogManagementService/isLogEnabled',
            LoggingService__pb2.LoggingConfigurationRequest.SerializeToString,
            LoggingService__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.log.management.service.LogManagementService/enable',
            LoggingService__pb2.LoggingConfigurationRequest.SerializeToString,
            LoggingService__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
