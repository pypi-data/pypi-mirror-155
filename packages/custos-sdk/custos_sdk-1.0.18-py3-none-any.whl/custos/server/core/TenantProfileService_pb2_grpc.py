# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import custos.server.core.TenantProfileService_pb2 as TenantProfileService__pb2


class TenantProfileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addTenant = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/addTenant',
                request_serializer=TenantProfileService__pb2.Tenant.SerializeToString,
                response_deserializer=TenantProfileService__pb2.Tenant.FromString,
                )
        self.updateTenant = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/updateTenant',
                request_serializer=TenantProfileService__pb2.Tenant.SerializeToString,
                response_deserializer=TenantProfileService__pb2.Tenant.FromString,
                )
        self.getTenant = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/getTenant',
                request_serializer=TenantProfileService__pb2.GetTenantRequest.SerializeToString,
                response_deserializer=TenantProfileService__pb2.GetTenantResponse.FromString,
                )
        self.updateTenantStatus = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/updateTenantStatus',
                request_serializer=TenantProfileService__pb2.UpdateStatusRequest.SerializeToString,
                response_deserializer=TenantProfileService__pb2.UpdateStatusResponse.FromString,
                )
        self.getAllTenants = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/getAllTenants',
                request_serializer=TenantProfileService__pb2.GetTenantsRequest.SerializeToString,
                response_deserializer=TenantProfileService__pb2.GetAllTenantsResponse.FromString,
                )
        self.isTenantExist = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/isTenantExist',
                request_serializer=TenantProfileService__pb2.IsTenantExistRequest.SerializeToString,
                response_deserializer=TenantProfileService__pb2.IsTenantExistResponse.FromString,
                )
        self.getAllTenantsForUser = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/getAllTenantsForUser',
                request_serializer=TenantProfileService__pb2.GetAllTenantsForUserRequest.SerializeToString,
                response_deserializer=TenantProfileService__pb2.GetAllTenantsForUserResponse.FromString,
                )
        self.getTenantStatusUpdateAuditTrail = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/getTenantStatusUpdateAuditTrail',
                request_serializer=TenantProfileService__pb2.GetAuditTrailRequest.SerializeToString,
                response_deserializer=TenantProfileService__pb2.GetStatusUpdateAuditTrailResponse.FromString,
                )
        self.getTenantAttributeUpdateAuditTrail = channel.unary_unary(
                '/org.apache.custos.tenant.profile.service.TenantProfileService/getTenantAttributeUpdateAuditTrail',
                request_serializer=TenantProfileService__pb2.GetAuditTrailRequest.SerializeToString,
                response_deserializer=TenantProfileService__pb2.GetAttributeUpdateAuditTrailResponse.FromString,
                )


class TenantProfileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTenantStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllTenants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isTenantExist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllTenantsForUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTenantStatusUpdateAuditTrail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTenantAttributeUpdateAuditTrail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TenantProfileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.addTenant,
                    request_deserializer=TenantProfileService__pb2.Tenant.FromString,
                    response_serializer=TenantProfileService__pb2.Tenant.SerializeToString,
            ),
            'updateTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTenant,
                    request_deserializer=TenantProfileService__pb2.Tenant.FromString,
                    response_serializer=TenantProfileService__pb2.Tenant.SerializeToString,
            ),
            'getTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.getTenant,
                    request_deserializer=TenantProfileService__pb2.GetTenantRequest.FromString,
                    response_serializer=TenantProfileService__pb2.GetTenantResponse.SerializeToString,
            ),
            'updateTenantStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTenantStatus,
                    request_deserializer=TenantProfileService__pb2.UpdateStatusRequest.FromString,
                    response_serializer=TenantProfileService__pb2.UpdateStatusResponse.SerializeToString,
            ),
            'getAllTenants': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllTenants,
                    request_deserializer=TenantProfileService__pb2.GetTenantsRequest.FromString,
                    response_serializer=TenantProfileService__pb2.GetAllTenantsResponse.SerializeToString,
            ),
            'isTenantExist': grpc.unary_unary_rpc_method_handler(
                    servicer.isTenantExist,
                    request_deserializer=TenantProfileService__pb2.IsTenantExistRequest.FromString,
                    response_serializer=TenantProfileService__pb2.IsTenantExistResponse.SerializeToString,
            ),
            'getAllTenantsForUser': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllTenantsForUser,
                    request_deserializer=TenantProfileService__pb2.GetAllTenantsForUserRequest.FromString,
                    response_serializer=TenantProfileService__pb2.GetAllTenantsForUserResponse.SerializeToString,
            ),
            'getTenantStatusUpdateAuditTrail': grpc.unary_unary_rpc_method_handler(
                    servicer.getTenantStatusUpdateAuditTrail,
                    request_deserializer=TenantProfileService__pb2.GetAuditTrailRequest.FromString,
                    response_serializer=TenantProfileService__pb2.GetStatusUpdateAuditTrailResponse.SerializeToString,
            ),
            'getTenantAttributeUpdateAuditTrail': grpc.unary_unary_rpc_method_handler(
                    servicer.getTenantAttributeUpdateAuditTrail,
                    request_deserializer=TenantProfileService__pb2.GetAuditTrailRequest.FromString,
                    response_serializer=TenantProfileService__pb2.GetAttributeUpdateAuditTrailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.custos.tenant.profile.service.TenantProfileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TenantProfileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/addTenant',
            TenantProfileService__pb2.Tenant.SerializeToString,
            TenantProfileService__pb2.Tenant.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/updateTenant',
            TenantProfileService__pb2.Tenant.SerializeToString,
            TenantProfileService__pb2.Tenant.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/getTenant',
            TenantProfileService__pb2.GetTenantRequest.SerializeToString,
            TenantProfileService__pb2.GetTenantResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTenantStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/updateTenantStatus',
            TenantProfileService__pb2.UpdateStatusRequest.SerializeToString,
            TenantProfileService__pb2.UpdateStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllTenants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/getAllTenants',
            TenantProfileService__pb2.GetTenantsRequest.SerializeToString,
            TenantProfileService__pb2.GetAllTenantsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isTenantExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/isTenantExist',
            TenantProfileService__pb2.IsTenantExistRequest.SerializeToString,
            TenantProfileService__pb2.IsTenantExistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllTenantsForUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/getAllTenantsForUser',
            TenantProfileService__pb2.GetAllTenantsForUserRequest.SerializeToString,
            TenantProfileService__pb2.GetAllTenantsForUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTenantStatusUpdateAuditTrail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/getTenantStatusUpdateAuditTrail',
            TenantProfileService__pb2.GetAuditTrailRequest.SerializeToString,
            TenantProfileService__pb2.GetStatusUpdateAuditTrailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTenantAttributeUpdateAuditTrail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.custos.tenant.profile.service.TenantProfileService/getTenantAttributeUpdateAuditTrail',
            TenantProfileService__pb2.GetAuditTrailRequest.SerializeToString,
            TenantProfileService__pb2.GetAttributeUpdateAuditTrailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
