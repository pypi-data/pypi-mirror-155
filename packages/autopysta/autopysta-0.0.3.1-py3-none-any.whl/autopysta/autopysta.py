# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


_autopystampl = False
try:
    import matplotlib.pyplot as pt
    _autpystampl=True
except:
    print("Error: matplotlib is not installed, drawing functions disabled")



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _autopysta
else:
    import _autopysta

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _autopysta.delete_SwigPyIterator

    def value(self):
        return _autopysta.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _autopysta.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _autopysta.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _autopysta.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _autopysta.SwigPyIterator_equal(self, x)

    def copy(self):
        return _autopysta.SwigPyIterator_copy(self)

    def next(self):
        return _autopysta.SwigPyIterator_next(self)

    def __next__(self):
        return _autopysta.SwigPyIterator___next__(self)

    def previous(self):
        return _autopysta.SwigPyIterator_previous(self)

    def advance(self, n):
        return _autopysta.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _autopysta.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _autopysta.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _autopysta.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _autopysta.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _autopysta.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _autopysta.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _autopysta:
_autopysta.SwigPyIterator_swigregister(SwigPyIterator)


def version():
    return _autopysta.version()
class test(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def range_inc(test, min, max):
        return _autopysta.test_range_inc(test, min, max)

    def __init__(self):
        _autopysta.test_swiginit(self, _autopysta.new_test())
    __swig_destroy__ = _autopysta.delete_test

# Register test in _autopysta:
_autopysta.test_swigregister(test)

def test_range_inc(test, min, max):
    return _autopysta.test_range_inc(test, min, max)

class random_generator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def init():
        return _autopysta.random_generator_init()

    @staticmethod
    def uniform(a, b):
        return _autopysta.random_generator_uniform(a, b)

    @staticmethod
    def uniform01():
        return _autopysta.random_generator_uniform01()

    @staticmethod
    def logistic(mu, s):
        return _autopysta.random_generator_logistic(mu, s)

    @staticmethod
    def normal(mu, sigma):
        return _autopysta.random_generator_normal(mu, sigma)

    def __init__(self):
        _autopysta.random_generator_swiginit(self, _autopysta.new_random_generator())
    __swig_destroy__ = _autopysta.delete_random_generator

# Register random_generator in _autopysta:
_autopysta.random_generator_swigregister(random_generator)

def random_generator_init():
    return _autopysta.random_generator_init()

def random_generator_uniform(a, b):
    return _autopysta.random_generator_uniform(a, b)

def random_generator_uniform01():
    return _autopysta.random_generator_uniform01()

def random_generator_logistic(mu, s):
    return _autopysta.random_generator_logistic(mu, s)

def random_generator_normal(mu, sigma):
    return _autopysta.random_generator_normal(mu, sigma)

class params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _autopysta.params_swiginit(self, _autopysta.new_params())
    __swig_destroy__ = _autopysta.delete_params

# Register params in _autopysta:
_autopysta.params_swigregister(params)

class params_cust(params):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    D = property(_autopysta.params_cust_D_get, _autopysta.params_cust_D_set)

    def __init__(self):
        _autopysta.params_cust_swiginit(self, _autopysta.new_params_cust())

    def add(self, new_name, new_value):
        return _autopysta.params_cust_add(self, new_name, new_value)

    def get(self, name):
        return _autopysta.params_cust_get(self, name)
    __swig_destroy__ = _autopysta.delete_params_cust

# Register params_cust in _autopysta:
_autopysta.params_cust_swigregister(params_cust)

class p_gipps(params):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    an = property(_autopysta.p_gipps_an_get, _autopysta.p_gipps_an_set)
    bn = property(_autopysta.p_gipps_bn_get, _autopysta.p_gipps_bn_set)
    sn = property(_autopysta.p_gipps_sn_get, _autopysta.p_gipps_sn_set)
    vn = property(_autopysta.p_gipps_vn_get, _autopysta.p_gipps_vn_set)
    tau = property(_autopysta.p_gipps_tau_get, _autopysta.p_gipps_tau_set)
    bg = property(_autopysta.p_gipps_bg_get, _autopysta.p_gipps_bg_set)

    def __init__(self, *args):
        _autopysta.p_gipps_swiginit(self, _autopysta.new_p_gipps(*args))
    __swig_destroy__ = _autopysta.delete_p_gipps

# Register p_gipps in _autopysta:
_autopysta.p_gipps_swigregister(p_gipps)

class p_idm(params):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    v0 = property(_autopysta.p_idm_v0_get, _autopysta.p_idm_v0_set)
    T = property(_autopysta.p_idm_T_get, _autopysta.p_idm_T_set)
    a = property(_autopysta.p_idm_a_get, _autopysta.p_idm_a_set)
    b = property(_autopysta.p_idm_b_get, _autopysta.p_idm_b_set)
    dl = property(_autopysta.p_idm_dl_get, _autopysta.p_idm_dl_set)
    s0 = property(_autopysta.p_idm_s0_get, _autopysta.p_idm_s0_set)
    l = property(_autopysta.p_idm_l_get, _autopysta.p_idm_l_set)

    def __init__(self, *args):
        _autopysta.p_idm_swiginit(self, _autopysta.new_p_idm(*args))
    __swig_destroy__ = _autopysta.delete_p_idm

# Register p_idm in _autopysta:
_autopysta.p_idm_swigregister(p_idm)

class p_linear(params):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    V = property(_autopysta.p_linear_V_get, _autopysta.p_linear_V_set)
    c1 = property(_autopysta.p_linear_c1_get, _autopysta.p_linear_c1_set)
    c2 = property(_autopysta.p_linear_c2_get, _autopysta.p_linear_c2_set)
    c3 = property(_autopysta.p_linear_c3_get, _autopysta.p_linear_c3_set)
    sr = property(_autopysta.p_linear_sr_get, _autopysta.p_linear_sr_set)
    tau = property(_autopysta.p_linear_tau_get, _autopysta.p_linear_tau_set)

    def __init__(self, *args):
        _autopysta.p_linear_swiginit(self, _autopysta.new_p_linear(*args))
    __swig_destroy__ = _autopysta.delete_p_linear

# Register p_linear in _autopysta:
_autopysta.p_linear_swigregister(p_linear)

class p_martinez_jin_2020(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tau = property(_autopysta.p_martinez_jin_2020_tau_get, _autopysta.p_martinez_jin_2020_tau_set)

    def __init__(self, *args):
        _autopysta.p_martinez_jin_2020_swiginit(self, _autopysta.new_p_martinez_jin_2020(*args))
    __swig_destroy__ = _autopysta.delete_p_martinez_jin_2020

# Register p_martinez_jin_2020 in _autopysta:
_autopysta.p_martinez_jin_2020_swigregister(p_martinez_jin_2020)

class p_newell(params):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u = property(_autopysta.p_newell_u_get, _autopysta.p_newell_u_set)
    w = property(_autopysta.p_newell_w_get, _autopysta.p_newell_w_set)
    kj = property(_autopysta.p_newell_kj_get, _autopysta.p_newell_kj_set)

    def __init__(self, *args):
        _autopysta.p_newell_swiginit(self, _autopysta.new_p_newell(*args))
    __swig_destroy__ = _autopysta.delete_p_newell

# Register p_newell in _autopysta:
_autopysta.p_newell_swigregister(p_newell)

class p_newell_random_acceleration(p_newell):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sigma_tilde = property(_autopysta.p_newell_random_acceleration_sigma_tilde_get, _autopysta.p_newell_random_acceleration_sigma_tilde_set)
    beta = property(_autopysta.p_newell_random_acceleration_beta_get, _autopysta.p_newell_random_acceleration_beta_set)

    def __init__(self, *args):
        _autopysta.p_newell_random_acceleration_swiginit(self, _autopysta.new_p_newell_random_acceleration(*args))
    __swig_destroy__ = _autopysta.delete_p_newell_random_acceleration

# Register p_newell_random_acceleration in _autopysta:
_autopysta.p_newell_random_acceleration_swigregister(p_newell_random_acceleration)

class point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.point_swiginit(self, _autopysta.new_point(*args))

    def to_str(self):
        return _autopysta.point_to_str(self)

    def set_accel(self, _a):
        return _autopysta.point_set_accel(self, _a)

    def set_velocity(self, _v):
        return _autopysta.point_set_velocity(self, _v)

    def set_x(self, _x):
        return _autopysta.point_set_x(self, _x)

    def set_lane(self, _lane):
        return _autopysta.point_set_lane(self, _lane)

    def reset_time(self):
        return _autopysta.point_reset_time(self)

    def T(self):
        return _autopysta.point_T(self)

    def X(self):
        return _autopysta.point_X(self)

    def V(self):
        return _autopysta.point_V(self)

    def A(self):
        return _autopysta.point_A(self)

    def LANE(self):
        return _autopysta.point_LANE(self)
    __swig_destroy__ = _autopysta.delete_point

# Register point in _autopysta:
_autopysta.point_swigregister(point)

class generalized_trajectory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def current(self):
        return _autopysta.generalized_trajectory_current(self)
    __swig_destroy__ = _autopysta.delete_generalized_trajectory

# Register generalized_trajectory in _autopysta:
_autopysta.generalized_trajectory_swigregister(generalized_trajectory)

class trajectory(generalized_trajectory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _point):
        _autopysta.trajectory_swiginit(self, _autopysta.new_trajectory(_point))

    def push_back(self, p):
        return _autopysta.trajectory_push_back(self, p)

    def add(self, newPoint):
        return _autopysta.trajectory_add(self, newPoint)

    def get(self, i):
        return _autopysta.trajectory_get(self, i)

    def len(self):
        return _autopysta.trajectory_len(self)

    def current(self):
        return _autopysta.trajectory_current(self)

    def __getitem__(self, i):
        return _autopysta.trajectory___getitem__(self, i)

    def __len__(self):
        return _autopysta.trajectory___len__(self)
    __swig_destroy__ = _autopysta.delete_trajectory

# Register trajectory in _autopysta:
_autopysta.trajectory_swigregister(trajectory)

class static_trajectory(generalized_trajectory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _autopysta.static_trajectory_swiginit(self, _autopysta.new_static_trajectory(arg2))

    def current(self):
        return _autopysta.static_trajectory_current(self)
    __swig_destroy__ = _autopysta.delete_static_trajectory

# Register static_trajectory in _autopysta:
_autopysta.static_trajectory_swigregister(static_trajectory)

class model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def free_flow_speed(self, *args):
        return _autopysta.model_free_flow_speed(self, *args)

    def new_point(self, *args):
        return _autopysta.model_new_point(self, *args)
    __swig_destroy__ = _autopysta.delete_model

# Register model in _autopysta:
_autopysta.model_swigregister(model)

class gipps(model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.gipps_swiginit(self, _autopysta.new_gipps(*args))

    def validate_parameters(self, *args):
        return _autopysta.gipps_validate_parameters(self, *args)

    def equil_spcg(self, *args):
        return _autopysta.gipps_equil_spcg(self, *args)

    def wave_speed(self, leader, follower, p):
        return _autopysta.gipps_wave_speed(self, leader, follower, p)

    def free_flow_speed(self, *args):
        return _autopysta.gipps_free_flow_speed(self, *args)

    def new_point(self, *args):
        return _autopysta.gipps_new_point(self, *args)
    __swig_destroy__ = _autopysta.delete_gipps

# Register gipps in _autopysta:
_autopysta.gipps_swigregister(gipps)

class idm(model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.idm_swiginit(self, _autopysta.new_idm(*args))

    def equil_spcg(self, *args):
        return _autopysta.idm_equil_spcg(self, *args)

    def wave_speed(self, leader, follower, p):
        return _autopysta.idm_wave_speed(self, leader, follower, p)

    def free_flow_speed(self, *args):
        return _autopysta.idm_free_flow_speed(self, *args)
    __swig_destroy__ = _autopysta.delete_idm

# Register idm in _autopysta:
_autopysta.idm_swigregister(idm)

class newell(model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.newell_swiginit(self, _autopysta.new_newell(*args))

    def equil_spcg(self, *args):
        return _autopysta.newell_equil_spcg(self, *args)

    def wave_speed(self, leader, follower, p):
        return _autopysta.newell_wave_speed(self, leader, follower, p)

    def free_flow_speed(self, *args):
        return _autopysta.newell_free_flow_speed(self, *args)

    def new_point(self, *args):
        return _autopysta.newell_new_point(self, *args)
    __swig_destroy__ = _autopysta.delete_newell

# Register newell in _autopysta:
_autopysta.newell_swigregister(newell)

class newell_constrained_timestep(newell):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.newell_constrained_timestep_swiginit(self, _autopysta.new_newell_constrained_timestep(*args))

    def validate_parameters(self, *args):
        return _autopysta.newell_constrained_timestep_validate_parameters(self, *args)

    def new_point(self, *args):
        return _autopysta.newell_constrained_timestep_new_point(self, *args)
    __swig_destroy__ = _autopysta.delete_newell_constrained_timestep

# Register newell_constrained_timestep in _autopysta:
_autopysta.newell_constrained_timestep_swigregister(newell_constrained_timestep)

class newell_random_acceleration(newell):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.newell_random_acceleration_swiginit(self, _autopysta.new_newell_random_acceleration(*args))

    def validate_parameters(self, *args):
        return _autopysta.newell_random_acceleration_validate_parameters(self, *args)

    def new_point(self, *args):
        return _autopysta.newell_random_acceleration_new_point(self, *args)
    __swig_destroy__ = _autopysta.delete_newell_random_acceleration

# Register newell_random_acceleration in _autopysta:
_autopysta.newell_random_acceleration_swigregister(newell_random_acceleration)

class linear(model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.linear_swiginit(self, _autopysta.new_linear(*args))

    def equil_spcg(self, vl, vf, p):
        return _autopysta.linear_equil_spcg(self, vl, vf, p)

    def wave_speed(self, leader, follower, p):
        return _autopysta.linear_wave_speed(self, leader, follower, p)

    def free_flow_speed(self, *args):
        return _autopysta.linear_free_flow_speed(self, *args)
    __swig_destroy__ = _autopysta.delete_linear

# Register linear in _autopysta:
_autopysta.linear_swigregister(linear)

class p_lcm_gipps(params):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _pvl = property(_autopysta.p_lcm_gipps__pvl_get, _autopysta.p_lcm_gipps__pvl_set)
    _pvh = property(_autopysta.p_lcm_gipps__pvh_get, _autopysta.p_lcm_gipps__pvh_set)

    def __init__(self, *args):
        _autopysta.p_lcm_gipps_swiginit(self, _autopysta.new_p_lcm_gipps(*args))
    __swig_destroy__ = _autopysta.delete_p_lcm_gipps

# Register p_lcm_gipps in _autopysta:
_autopysta.p_lcm_gipps_swigregister(p_lcm_gipps)

class lcm_gipps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.lcm_gipps_swiginit(self, _autopysta.new_lcm_gipps(*args))

    def lch_left(self, leader, follower, new_leader, new_follower, cfm, lcmpars):
        return _autopysta.lcm_gipps_lch_left(self, leader, follower, new_leader, new_follower, cfm, lcmpars)

    def lch_right(self, leader, follower, new_leader, new_follower, cfm, lcmpars):
        return _autopysta.lcm_gipps_lch_right(self, leader, follower, new_leader, new_follower, cfm, lcmpars)
    __swig_destroy__ = _autopysta.delete_lcm_gipps

# Register lcm_gipps in _autopysta:
_autopysta.lcm_gipps_swigregister(lcm_gipps)

class no_lch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _autopysta.no_lch_swiginit(self, _autopysta.new_no_lch())

    def lch_left(self, leader, follower, new_leader, new_follower, cfm, lcmpars):
        return _autopysta.no_lch_lch_left(self, leader, follower, new_leader, new_follower, cfm, lcmpars)

    def lch_right(self, leader, follower, new_leader, new_follower, cfm, lcmpars):
        return _autopysta.no_lch_lch_right(self, leader, follower, new_leader, new_follower, cfm, lcmpars)
    __swig_destroy__ = _autopysta.delete_no_lch

# Register no_lch in _autopysta:
_autopysta.no_lch_swigregister(no_lch)

class geometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.geometry_swiginit(self, _autopysta.new_geometry(*args))

    def length(self):
        return _autopysta.geometry_length(self)

    def lanes(self):
        return _autopysta.geometry_lanes(self)

    def can_change_left(self, p):
        return _autopysta.geometry_can_change_left(self, p)

    def can_change_right(self, p):
        return _autopysta.geometry_can_change_right(self, p)

    def has_merge(self):
        return _autopysta.geometry_has_merge(self)

    def merge(self):
        return _autopysta.geometry_merge(self)

    def has_diverge(self):
        return _autopysta.geometry_has_diverge(self)
    __swig_destroy__ = _autopysta.delete_geometry

# Register geometry in _autopysta:
_autopysta.geometry_swigregister(geometry)

class creator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def validate_creator(self):
        return _autopysta.creator_validate_creator(self)

    def create(self, leader, immediate_follower=False):
        return _autopysta.creator_create(self, leader, immediate_follower)

    def create_no_leader(self, lane):
        return _autopysta.creator_create_no_leader(self, lane)

    def initial_state(self, leader):
        return _autopysta.creator_initial_state(self, leader)
    __swig_destroy__ = _autopysta.delete_creator

# Register creator in _autopysta:
_autopysta.creator_swigregister(creator)

class creator_martinez_jin_2020(creator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_autopysta.creator_martinez_jin_2020_a_get, _autopysta.creator_martinez_jin_2020_a_set)
    b = property(_autopysta.creator_martinez_jin_2020_b_get, _autopysta.creator_martinez_jin_2020_b_set)

    def __init__(self, *args):
        _autopysta.creator_martinez_jin_2020_swiginit(self, _autopysta.new_creator_martinez_jin_2020(*args))

    def create(self, leader, immediate_follower=False):
        return _autopysta.creator_martinez_jin_2020_create(self, leader, immediate_follower)

    def create_no_leader(self, lane):
        return _autopysta.creator_martinez_jin_2020_create_no_leader(self, lane)

    def validate_creator(self):
        return _autopysta.creator_martinez_jin_2020_validate_creator(self)
    __swig_destroy__ = _autopysta.delete_creator_martinez_jin_2020

# Register creator_martinez_jin_2020 in _autopysta:
_autopysta.creator_martinez_jin_2020_swigregister(creator_martinez_jin_2020)

class fixed_state_creator(creator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def validate_creator(self):
        return _autopysta.fixed_state_creator_validate_creator(self)

    def __init__(self, *args):
        _autopysta.fixed_state_creator_swiginit(self, _autopysta.new_fixed_state_creator(*args))

    def create_no_leader(self, lane):
        return _autopysta.fixed_state_creator_create_no_leader(self, lane)
    __swig_destroy__ = _autopysta.delete_fixed_state_creator

# Register fixed_state_creator in _autopysta:
_autopysta.fixed_state_creator_swigregister(fixed_state_creator)

class fixed_demand_creator(creator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.fixed_demand_creator_swiginit(self, _autopysta.new_fixed_demand_creator(*args))

    def validate_creator(self):
        return _autopysta.fixed_demand_creator_validate_creator(self)

    def create_no_leader(self, lane):
        return _autopysta.fixed_demand_creator_create_no_leader(self, lane)
    __swig_destroy__ = _autopysta.delete_fixed_demand_creator

# Register fixed_demand_creator in _autopysta:
_autopysta.fixed_demand_creator_swigregister(fixed_demand_creator)

class results(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        _autopysta.results_swiginit(self, _autopysta.new_results(r))

    def porpista(self, c):
        return _autopysta.results_porpista(self, c)

    def by_lane(self, l):
        return _autopysta.results_by_lane(self, l)

    def all_lanes(self):
        return _autopysta.results_all_lanes(self)

    def edie(self, ta, tb, dt, xa, xb, l):
        return _autopysta.results_edie(self, ta, tb, dt, xa, xb, l)

    def passes_on_t(self, t, l):
        return _autopysta.results_passes_on_t(self, t, l)

    def passes_on_x(self, x, l):
        return _autopysta.results_passes_on_x(self, x, l)
    __swig_destroy__ = _autopysta.delete_results

# Register results in _autopysta:
_autopysta.results_swigregister(results)

class Box(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    trails = property(_autopysta.Box_trails_get, _autopysta.Box_trails_set)

    def __init__(self, xa, xb, ta, tb):
        _autopysta.Box_swiginit(self, _autopysta.new_Box(xa, xb, ta, tb))

    def contains(self, p):
        return _autopysta.Box_contains(self, p)

    def get_intersection(self, p1, p2):
        return _autopysta.Box_get_intersection(self, p1, p2)

    def inter_hor(self, p1, p2, x):
        return _autopysta.Box_inter_hor(self, p1, p2, x)

    def inter_ver(self, p1, p2, t):
        return _autopysta.Box_inter_ver(self, p1, p2, t)

    def get_edie(self):
        return _autopysta.Box_get_edie(self)

    def _print(self):
        return _autopysta.Box__print(self)
    __swig_destroy__ = _autopysta.delete_Box

# Register Box in _autopysta:
_autopysta.Box_swigregister(Box)

class Exception(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c, m):
        _autopysta.Exception_swiginit(self, _autopysta.new_Exception(c, m))

    def msg(self):
        return _autopysta.Exception_msg(self)

    def code(self):
        return _autopysta.Exception_code(self)

    def what(self):
        return _autopysta.Exception_what(self)
    __swig_destroy__ = _autopysta.delete_Exception
    _code = property(_autopysta.Exception__code_get, _autopysta.Exception__code_set)
    _msg = property(_autopysta.Exception__msg_get, _autopysta.Exception__msg_set)

# Register Exception in _autopysta:
_autopysta.Exception_swigregister(Exception)

class trajectories(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _autopysta.trajectories_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _autopysta.trajectories___nonzero__(self)

    def __bool__(self):
        return _autopysta.trajectories___bool__(self)

    def __len__(self):
        return _autopysta.trajectories___len__(self)

    def __getslice__(self, i, j):
        return _autopysta.trajectories___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _autopysta.trajectories___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _autopysta.trajectories___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _autopysta.trajectories___delitem__(self, *args)

    def __getitem__(self, *args):
        return _autopysta.trajectories___getitem__(self, *args)

    def __setitem__(self, *args):
        return _autopysta.trajectories___setitem__(self, *args)

    def pop(self):
        return _autopysta.trajectories_pop(self)

    def append(self, x):
        return _autopysta.trajectories_append(self, x)

    def empty(self):
        return _autopysta.trajectories_empty(self)

    def size(self):
        return _autopysta.trajectories_size(self)

    def swap(self, v):
        return _autopysta.trajectories_swap(self, v)

    def begin(self):
        return _autopysta.trajectories_begin(self)

    def end(self):
        return _autopysta.trajectories_end(self)

    def rbegin(self):
        return _autopysta.trajectories_rbegin(self)

    def rend(self):
        return _autopysta.trajectories_rend(self)

    def clear(self):
        return _autopysta.trajectories_clear(self)

    def get_allocator(self):
        return _autopysta.trajectories_get_allocator(self)

    def pop_back(self):
        return _autopysta.trajectories_pop_back(self)

    def erase(self, *args):
        return _autopysta.trajectories_erase(self, *args)

    def __init__(self, *args):
        _autopysta.trajectories_swiginit(self, _autopysta.new_trajectories(*args))

    def push_back(self, x):
        return _autopysta.trajectories_push_back(self, x)

    def front(self):
        return _autopysta.trajectories_front(self)

    def back(self):
        return _autopysta.trajectories_back(self)

    def assign(self, n, x):
        return _autopysta.trajectories_assign(self, n, x)

    def resize(self, *args):
        return _autopysta.trajectories_resize(self, *args)

    def insert(self, *args):
        return _autopysta.trajectories_insert(self, *args)

    def reserve(self, n):
        return _autopysta.trajectories_reserve(self, n)

    def capacity(self):
        return _autopysta.trajectories_capacity(self)
    __swig_destroy__ = _autopysta.delete_trajectories

# Register trajectories in _autopysta:
_autopysta.trajectories_swigregister(trajectories)

class vehvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _autopysta.vehvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _autopysta.vehvec___nonzero__(self)

    def __bool__(self):
        return _autopysta.vehvec___bool__(self)

    def __len__(self):
        return _autopysta.vehvec___len__(self)

    def __getslice__(self, i, j):
        return _autopysta.vehvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _autopysta.vehvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _autopysta.vehvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _autopysta.vehvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _autopysta.vehvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _autopysta.vehvec___setitem__(self, *args)

    def pop(self):
        return _autopysta.vehvec_pop(self)

    def append(self, x):
        return _autopysta.vehvec_append(self, x)

    def empty(self):
        return _autopysta.vehvec_empty(self)

    def size(self):
        return _autopysta.vehvec_size(self)

    def swap(self, v):
        return _autopysta.vehvec_swap(self, v)

    def begin(self):
        return _autopysta.vehvec_begin(self)

    def end(self):
        return _autopysta.vehvec_end(self)

    def rbegin(self):
        return _autopysta.vehvec_rbegin(self)

    def rend(self):
        return _autopysta.vehvec_rend(self)

    def clear(self):
        return _autopysta.vehvec_clear(self)

    def get_allocator(self):
        return _autopysta.vehvec_get_allocator(self)

    def pop_back(self):
        return _autopysta.vehvec_pop_back(self)

    def erase(self, *args):
        return _autopysta.vehvec_erase(self, *args)

    def __init__(self, *args):
        _autopysta.vehvec_swiginit(self, _autopysta.new_vehvec(*args))

    def push_back(self, x):
        return _autopysta.vehvec_push_back(self, x)

    def front(self):
        return _autopysta.vehvec_front(self)

    def back(self):
        return _autopysta.vehvec_back(self)

    def assign(self, n, x):
        return _autopysta.vehvec_assign(self, n, x)

    def resize(self, *args):
        return _autopysta.vehvec_resize(self, *args)

    def insert(self, *args):
        return _autopysta.vehvec_insert(self, *args)

    def reserve(self, n):
        return _autopysta.vehvec_reserve(self, n)

    def capacity(self):
        return _autopysta.vehvec_capacity(self)
    __swig_destroy__ = _autopysta.delete_vehvec

# Register vehvec in _autopysta:
_autopysta.vehvec_swigregister(vehvec)

class crtvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _autopysta.crtvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _autopysta.crtvec___nonzero__(self)

    def __bool__(self):
        return _autopysta.crtvec___bool__(self)

    def __len__(self):
        return _autopysta.crtvec___len__(self)

    def __getslice__(self, i, j):
        return _autopysta.crtvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _autopysta.crtvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _autopysta.crtvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _autopysta.crtvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _autopysta.crtvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _autopysta.crtvec___setitem__(self, *args)

    def pop(self):
        return _autopysta.crtvec_pop(self)

    def append(self, x):
        return _autopysta.crtvec_append(self, x)

    def empty(self):
        return _autopysta.crtvec_empty(self)

    def size(self):
        return _autopysta.crtvec_size(self)

    def swap(self, v):
        return _autopysta.crtvec_swap(self, v)

    def begin(self):
        return _autopysta.crtvec_begin(self)

    def end(self):
        return _autopysta.crtvec_end(self)

    def rbegin(self):
        return _autopysta.crtvec_rbegin(self)

    def rend(self):
        return _autopysta.crtvec_rend(self)

    def clear(self):
        return _autopysta.crtvec_clear(self)

    def get_allocator(self):
        return _autopysta.crtvec_get_allocator(self)

    def pop_back(self):
        return _autopysta.crtvec_pop_back(self)

    def erase(self, *args):
        return _autopysta.crtvec_erase(self, *args)

    def __init__(self, *args):
        _autopysta.crtvec_swiginit(self, _autopysta.new_crtvec(*args))

    def push_back(self, x):
        return _autopysta.crtvec_push_back(self, x)

    def front(self):
        return _autopysta.crtvec_front(self)

    def back(self):
        return _autopysta.crtvec_back(self)

    def assign(self, n, x):
        return _autopysta.crtvec_assign(self, n, x)

    def resize(self, *args):
        return _autopysta.crtvec_resize(self, *args)

    def insert(self, *args):
        return _autopysta.crtvec_insert(self, *args)

    def reserve(self, n):
        return _autopysta.crtvec_reserve(self, n)

    def capacity(self):
        return _autopysta.crtvec_capacity(self)
    __swig_destroy__ = _autopysta.delete_crtvec

# Register crtvec in _autopysta:
_autopysta.crtvec_swigregister(crtvec)

class pntvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _autopysta.pntvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _autopysta.pntvec___nonzero__(self)

    def __bool__(self):
        return _autopysta.pntvec___bool__(self)

    def __len__(self):
        return _autopysta.pntvec___len__(self)

    def __getslice__(self, i, j):
        return _autopysta.pntvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _autopysta.pntvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _autopysta.pntvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _autopysta.pntvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _autopysta.pntvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _autopysta.pntvec___setitem__(self, *args)

    def pop(self):
        return _autopysta.pntvec_pop(self)

    def append(self, x):
        return _autopysta.pntvec_append(self, x)

    def empty(self):
        return _autopysta.pntvec_empty(self)

    def size(self):
        return _autopysta.pntvec_size(self)

    def swap(self, v):
        return _autopysta.pntvec_swap(self, v)

    def begin(self):
        return _autopysta.pntvec_begin(self)

    def end(self):
        return _autopysta.pntvec_end(self)

    def rbegin(self):
        return _autopysta.pntvec_rbegin(self)

    def rend(self):
        return _autopysta.pntvec_rend(self)

    def clear(self):
        return _autopysta.pntvec_clear(self)

    def get_allocator(self):
        return _autopysta.pntvec_get_allocator(self)

    def pop_back(self):
        return _autopysta.pntvec_pop_back(self)

    def erase(self, *args):
        return _autopysta.pntvec_erase(self, *args)

    def __init__(self, *args):
        _autopysta.pntvec_swiginit(self, _autopysta.new_pntvec(*args))

    def push_back(self, x):
        return _autopysta.pntvec_push_back(self, x)

    def front(self):
        return _autopysta.pntvec_front(self)

    def back(self):
        return _autopysta.pntvec_back(self)

    def assign(self, n, x):
        return _autopysta.pntvec_assign(self, n, x)

    def resize(self, *args):
        return _autopysta.pntvec_resize(self, *args)

    def insert(self, *args):
        return _autopysta.pntvec_insert(self, *args)

    def reserve(self, n):
        return _autopysta.pntvec_reserve(self, n)

    def capacity(self):
        return _autopysta.pntvec_capacity(self)
    __swig_destroy__ = _autopysta.delete_pntvec

# Register pntvec in _autopysta:
_autopysta.pntvec_swigregister(pntvec)

class fltvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _autopysta.fltvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _autopysta.fltvec___nonzero__(self)

    def __bool__(self):
        return _autopysta.fltvec___bool__(self)

    def __len__(self):
        return _autopysta.fltvec___len__(self)

    def __getslice__(self, i, j):
        return _autopysta.fltvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _autopysta.fltvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _autopysta.fltvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _autopysta.fltvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _autopysta.fltvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _autopysta.fltvec___setitem__(self, *args)

    def pop(self):
        return _autopysta.fltvec_pop(self)

    def append(self, x):
        return _autopysta.fltvec_append(self, x)

    def empty(self):
        return _autopysta.fltvec_empty(self)

    def size(self):
        return _autopysta.fltvec_size(self)

    def swap(self, v):
        return _autopysta.fltvec_swap(self, v)

    def begin(self):
        return _autopysta.fltvec_begin(self)

    def end(self):
        return _autopysta.fltvec_end(self)

    def rbegin(self):
        return _autopysta.fltvec_rbegin(self)

    def rend(self):
        return _autopysta.fltvec_rend(self)

    def clear(self):
        return _autopysta.fltvec_clear(self)

    def get_allocator(self):
        return _autopysta.fltvec_get_allocator(self)

    def pop_back(self):
        return _autopysta.fltvec_pop_back(self)

    def erase(self, *args):
        return _autopysta.fltvec_erase(self, *args)

    def __init__(self, *args):
        _autopysta.fltvec_swiginit(self, _autopysta.new_fltvec(*args))

    def push_back(self, x):
        return _autopysta.fltvec_push_back(self, x)

    def front(self):
        return _autopysta.fltvec_front(self)

    def back(self):
        return _autopysta.fltvec_back(self)

    def assign(self, n, x):
        return _autopysta.fltvec_assign(self, n, x)

    def resize(self, *args):
        return _autopysta.fltvec_resize(self, *args)

    def insert(self, *args):
        return _autopysta.fltvec_insert(self, *args)

    def reserve(self, n):
        return _autopysta.fltvec_reserve(self, n)

    def capacity(self):
        return _autopysta.fltvec_capacity(self)
    __swig_destroy__ = _autopysta.delete_fltvec

# Register fltvec in _autopysta:
_autopysta.fltvec_swigregister(fltvec)

class fltvecvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _autopysta.fltvecvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _autopysta.fltvecvec___nonzero__(self)

    def __bool__(self):
        return _autopysta.fltvecvec___bool__(self)

    def __len__(self):
        return _autopysta.fltvecvec___len__(self)

    def __getslice__(self, i, j):
        return _autopysta.fltvecvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _autopysta.fltvecvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _autopysta.fltvecvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _autopysta.fltvecvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _autopysta.fltvecvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _autopysta.fltvecvec___setitem__(self, *args)

    def pop(self):
        return _autopysta.fltvecvec_pop(self)

    def append(self, x):
        return _autopysta.fltvecvec_append(self, x)

    def empty(self):
        return _autopysta.fltvecvec_empty(self)

    def size(self):
        return _autopysta.fltvecvec_size(self)

    def swap(self, v):
        return _autopysta.fltvecvec_swap(self, v)

    def begin(self):
        return _autopysta.fltvecvec_begin(self)

    def end(self):
        return _autopysta.fltvecvec_end(self)

    def rbegin(self):
        return _autopysta.fltvecvec_rbegin(self)

    def rend(self):
        return _autopysta.fltvecvec_rend(self)

    def clear(self):
        return _autopysta.fltvecvec_clear(self)

    def get_allocator(self):
        return _autopysta.fltvecvec_get_allocator(self)

    def pop_back(self):
        return _autopysta.fltvecvec_pop_back(self)

    def erase(self, *args):
        return _autopysta.fltvecvec_erase(self, *args)

    def __init__(self, *args):
        _autopysta.fltvecvec_swiginit(self, _autopysta.new_fltvecvec(*args))

    def push_back(self, x):
        return _autopysta.fltvecvec_push_back(self, x)

    def front(self):
        return _autopysta.fltvecvec_front(self)

    def back(self):
        return _autopysta.fltvecvec_back(self)

    def assign(self, n, x):
        return _autopysta.fltvecvec_assign(self, n, x)

    def resize(self, *args):
        return _autopysta.fltvecvec_resize(self, *args)

    def insert(self, *args):
        return _autopysta.fltvecvec_insert(self, *args)

    def reserve(self, n):
        return _autopysta.fltvecvec_reserve(self, n)

    def capacity(self):
        return _autopysta.fltvecvec_capacity(self)
    __swig_destroy__ = _autopysta.delete_fltvecvec

# Register fltvecvec in _autopysta:
_autopysta.fltvecvec_swigregister(fltvecvec)

class road_object(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    m = property(_autopysta.road_object_m_get, _autopysta.road_object_m_set)
    traj = property(_autopysta.road_object_traj_get, _autopysta.road_object_traj_set)
    defined_t = property(_autopysta.road_object_defined_t_get, _autopysta.road_object_defined_t_set)

    def current(self):
        return _autopysta.road_object_current(self)

    def update(self, arg2):
        return _autopysta.road_object_update(self, arg2)
    __swig_destroy__ = _autopysta.delete_road_object

# Register road_object in _autopysta:
_autopysta.road_object_swigregister(road_object)

class vehicle(road_object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    needs_initialization = property(_autopysta.vehicle_needs_initialization_get, _autopysta.vehicle_needs_initialization_set)
    placeholder_points = property(_autopysta.vehicle_placeholder_points_get, _autopysta.vehicle_placeholder_points_set)

    def __init__(self, *args):
        _autopysta.vehicle_swiginit(self, _autopysta.new_vehicle(*args))

    def initialize_vehicle(self):
        return _autopysta.vehicle_initialize_vehicle(self)

    def p(self):
        return _autopysta.vehicle_p(self)

    def current(self):
        return _autopysta.vehicle_current(self)

    def update(self, arg2):
        return _autopysta.vehicle_update(self, arg2)
    __swig_destroy__ = _autopysta.delete_vehicle

# Register vehicle in _autopysta:
_autopysta.vehicle_swigregister(vehicle)

class fixed_object(road_object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pos):
        _autopysta.fixed_object_swiginit(self, _autopysta.new_fixed_object(pos))

    def current(self):
        return _autopysta.fixed_object_current(self)

    def update(self, ro):
        return _autopysta.fixed_object_update(self, ro)
    __swig_destroy__ = _autopysta.delete_fixed_object

# Register fixed_object in _autopysta:
_autopysta.fixed_object_swigregister(fixed_object)

class simulation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _autopysta.simulation_swiginit(self, _autopysta.new_simulation(*args))

    def run(self):
        return _autopysta.simulation_run(self)
    __swig_destroy__ = _autopysta.delete_simulation

# Register simulation in _autopysta:
_autopysta.simulation_swigregister(simulation)


def is_python_builtin():
    return _autopysta.is_python_builtin()

def _autopysta_graph_trajectories(self, lane=-1):
	colors = ['g-', 'r-', 'b-', 'k-', 'c-', 'm-', 'y-']
	pt.figure()
	if(lane == -1):
		trys = self.all_lanes()
		pt.title("All lanes")
	else:
		trys = self.by_lane(lane)
		pt.title("Lane {0}".format(lane))
	pt.xlabel("Time (seconds)")
	pt.ylabel("Position (meters)")
	for pi in range(len(trys)):
		pd = trys[pi]
		p=pd[0].LANE()
		tt=[pd[i].T() for i in range(len(pd))]
		xx=[pd[i].X() for i in range(len(pd))]
		pt.plot(tt,xx,colors[p])
	pt.show()

def _autopysta_graph_velocities(self, lane=-1):
	colors = ['g-', 'r-', 'b-', 'k-', 'c-', 'm-', 'y-']
	pt.figure()
	if(lane == -1):
		trys = self.all_lanes()
		pt.title("All lanes")
	else:
		trys = self.by_lane(lane)
		pt.title("Lane {0}".format(lane))
	pt.xlabel("Time (seconds)")
	pt.ylabel("Velocity (m/s)")
	for pi in range(len(trys)):
		pd = trys[pi]
		p=pd[0].LANE()
		tt=[pd[i].T() for i in range(len(pd))]
		xx=[pd[i].V() for i in range(len(pd))]
		pt.plot(tt,xx,colors[p])
	pt.show()

results.plot_x_vs_t = _autopysta_graph_trajectories
results.plot_v_vs_t = _autopysta_graph_velocities

class AutopystaException(BaseException):
    def __init__(self):
        BaseException.__init__(self)
        self.myexc = Exception()

AutopystaException = _autopysta.Exception



