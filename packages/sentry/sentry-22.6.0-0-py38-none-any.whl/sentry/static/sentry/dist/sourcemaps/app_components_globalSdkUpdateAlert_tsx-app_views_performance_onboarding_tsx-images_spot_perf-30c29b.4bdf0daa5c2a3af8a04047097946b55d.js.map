{"version":3,"file":"chunks/app_components_globalSdkUpdateAlert_tsx-app_views_performance_onboarding_tsx-images_spot_perf-30c29b.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/globalSdkUpdateAlert.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/performance/onboarding.tsx"],"sourcesContent":["import {Fragment, useCallback, useEffect, useState} from 'react';\n\nimport {promptsCheck, promptsUpdate} from 'sentry/actionCreators/prompts';\nimport Alert, {AlertProps} from 'sentry/components/alert';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {ProjectSdkUpdates} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {promptIsDismissed} from 'sentry/utils/promptIsDismissed';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport withSdkUpdates from 'sentry/utils/withSdkUpdates';\n\nimport {SidebarPanelKey} from './sidebar/types';\nimport Button from './button';\n\ninterface InnerGlobalSdkSuggestionsProps extends AlertProps {\n  className?: string;\n  sdkUpdates?: ProjectSdkUpdates[] | null;\n}\n\nfunction InnerGlobalSdkUpdateAlert(\n  props: InnerGlobalSdkSuggestionsProps\n): React.ReactElement | null {\n  const api = useApi();\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n\n  const [showUpdateAlert, setShowUpdateAlert] = useState<boolean>(false);\n\n  const handleSnoozePrompt = useCallback(() => {\n    promptsUpdate(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n      status: 'snoozed',\n    });\n\n    trackAdvancedAnalyticsEvent('sdk_updates.snoozed', {organization});\n    setShowUpdateAlert(false);\n  }, [api, organization]);\n\n  const handleReviewUpdatesClick = useCallback(() => {\n    SidebarPanelStore.activatePanel(SidebarPanelKey.Broadcasts);\n    trackAdvancedAnalyticsEvent('sdk_updates.clicked', {organization});\n  }, []);\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('sdk_updates.seen', {organization});\n\n    let isUnmounted = false;\n\n    promptsCheck(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n    }).then(prompt => {\n      if (isUnmounted) {\n        return;\n      }\n\n      setShowUpdateAlert(!promptIsDismissed(prompt));\n    });\n\n    return () => {\n      isUnmounted = true;\n    };\n  }, []);\n\n  if (!showUpdateAlert || !props.sdkUpdates?.length) {\n    return null;\n  }\n\n  // withSdkUpdates explicitly only queries My Projects. This means that when\n  // looking at any projects outside of My Projects (like All Projects), this\n  // will only show the updates relevant to the to user.\n  const projectSpecificUpdates =\n    selection?.projects?.length === 0 || selection?.projects[0] === ALL_ACCESS_PROJECTS\n      ? props.sdkUpdates\n      : props.sdkUpdates.filter(update =>\n          selection?.projects?.includes(parseInt(update.projectId, 10))\n        );\n\n  // Check if we have at least one suggestion out of the list of updates\n  if (projectSpecificUpdates.every(v => v.suggestions.length === 0)) {\n    return null;\n  }\n\n  return (\n    <Alert\n      type=\"info\"\n      showIcon\n      className={props.className}\n      trailingItems={\n        <Fragment>\n          <Button\n            priority=\"link\"\n            size=\"zero\"\n            title={t('Dismiss for the next two weeks')}\n            onClick={handleSnoozePrompt}\n          >\n            {t('Remind me later')}\n          </Button>\n          <span>|</span>\n          <Button priority=\"link\" size=\"zero\" onClick={handleReviewUpdatesClick}>\n            {t('Review updates')}\n          </Button>\n        </Fragment>\n      }\n    >\n      {t(\n        `You have outdated SDKs in your projects. Update them for important fixes and features.`\n      )}\n    </Alert>\n  );\n}\n\nconst WithSdkUpdatesGlobalSdkUpdateAlert = withSdkUpdates(InnerGlobalSdkUpdateAlert);\n\nexport {\n  WithSdkUpdatesGlobalSdkUpdateAlert as GlobalSdkUpdateAlert,\n  InnerGlobalSdkUpdateAlert,\n};\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  image: React.ReactNode;\n  className?: string;\n};\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\nimport tourAlert from 'sentry-images/spot/performance-tour-alert.svg';\nimport tourCorrelate from 'sentry-images/spot/performance-tour-correlate.svg';\nimport tourMetrics from 'sentry-images/spot/performance-tour-metrics.svg';\nimport tourTrace from 'sentry-images/spot/performance-tour-trace.svg';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'sentry/components/modals/featureTourModal';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\n\nconst performanceSetupUrl =\n  'https://docs.sentry.io/performance-monitoring/getting-started/';\n\nconst docsLink = (\n  <Button external href={performanceSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const PERFORMANCE_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Track Application Metrics'),\n    image: <TourImage src={tourMetrics} />,\n    body: (\n      <TourText>\n        {t(\n          'Monitor your slowest pageloads and APIs to see which users are having the worst time.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Correlate Errors and Performance'),\n    image: <TourImage src={tourCorrelate} />,\n    body: (\n      <TourText>\n        {t(\n          'See what errors occurred within a transaction and the impact of those errors.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Watch and Alert'),\n    image: <TourImage src={tourAlert} />,\n    body: (\n      <TourText>\n        {t(\n          'Highlight mission-critical pages and APIs and set latency alerts to notify you before things go wrong.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Trace Across Systems'),\n    image: <TourImage src={tourTrace} />,\n    body: (\n      <TourText>\n        {t(\n          \"Follow a trace from a user's session and drill down to identify any bottlenecks that occur.\"\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction Onboarding({organization, project}: Props) {\n  const api = useApi();\n\n  function handleAdvance(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.advance', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.close', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  return (\n    <OnboardingPanel image={<PerfImage src={emptyStateImg} />}>\n      <h3>{t('Pinpoint problems')}</h3>\n      <p>\n        {t(\n          'Something seem slow? Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <Button\n          priority=\"primary\"\n          target=\"_blank\"\n          href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n        >\n          {t('Start Setup')}\n        </Button>\n        <Button\n          data-test-id=\"create-sample-transaction-btn\"\n          onClick={async () => {\n            trackAdvancedAnalyticsEvent('performance_views.create_sample_transaction', {\n              platform: project.platform,\n              organization,\n            });\n            addLoadingMessage(t('Processing sample event...'), {\n              duration: 15000,\n            });\n            const url = `/projects/${organization.slug}/${project.slug}/create-sample-transaction/`;\n            try {\n              const eventData = await api.requestPromise(url, {method: 'POST'});\n              browserHistory.push(\n                `/organizations/${organization.slug}/performance/${project.slug}:${eventData.eventID}/`\n              );\n              clearIndicators();\n            } catch (error) {\n              Sentry.withScope(scope => {\n                scope.setExtra('error', error);\n                Sentry.captureException(new Error('Failed to create sample event'));\n              });\n              clearIndicators();\n              addErrorMessage(t('Failed to create a new sample event'));\n              return;\n            }\n          }}\n        >\n          {t('View Sample Transaction')}\n        </Button>\n      </ButtonList>\n      <FeatureTourModal\n        steps={PERFORMANCE_TOUR_STEPS}\n        onAdvance={handleAdvance}\n        onCloseModal={handleClose}\n        doneUrl={performanceSetupUrl}\n        doneText={t('Start Setup')}\n      >\n        {({showModal}) => (\n          <Button\n            priority=\"link\"\n            onClick={() => {\n              trackAdvancedAnalyticsEvent('performance_views.tour.start', {organization});\n              showModal();\n            }}\n          >\n            {t('Take a Tour')}\n          </Button>\n        )}\n      </FeatureTourModal>\n    </OnboardingPanel>\n  );\n}\n\nconst PerfImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    max-width: unset;\n    user-select: none;\n    position: absolute;\n    top: 75px;\n    bottom: 0;\n    width: 450px;\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 480px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 600px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  margin-bottom: 16px;\n`;\n\nexport default Onboarding;\n"],"names":["InnerGlobalSdkUpdateAlert","props","api","useApi","organization","useOrganization","selection","usePageFilters","showUpdateAlert","setShowUpdateAlert","useState","handleSnoozePrompt","useCallback","promptsUpdate","organizationId","id","feature","status","trackAdvancedAnalyticsEvent","handleReviewUpdatesClick","SidebarPanelStore","SidebarPanelKey","useEffect","isUnmounted","promptsCheck","then","prompt","promptIsDismissed","sdkUpdates","length","projects","ALL_ACCESS_PROJECTS","filter","update","includes","parseInt","projectId","every","v","suggestions","type","showIcon","className","trailingItems","Fragment","priority","size","title","t","onClick","WithSdkUpdatesGlobalSdkUpdateAlert","withSdkUpdates","OnboardingPanel","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","small","medium","performanceSetupUrl","docsLink","external","href","PERFORMANCE_TOUR_STEPS","src","tourMetrics","body","actions","Onboarding","project","PerfImage","emptyStateImg","ButtonList","gap","target","async","platform","addLoadingMessage","duration","url","slug","eventData","requestPromise","method","browserHistory","eventID","clearIndicators","error","Sentry","scope","setExtra","Error","addErrorMessage","steps","onAdvance","step","onCloseModal","doneUrl","doneText","showModal","large","ButtonBar"],"sourceRoot":""}