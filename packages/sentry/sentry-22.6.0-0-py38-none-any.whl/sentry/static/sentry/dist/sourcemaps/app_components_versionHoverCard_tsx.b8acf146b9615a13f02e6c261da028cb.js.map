{"version":3,"file":"chunks/app_components_versionHoverCard_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/release.tsx","webpack:///./app/actions/releaseActions.tsx","webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/avatar/avatarList.tsx","webpack:///./app/components/lastCommit.tsx","webpack:///./app/components/repoLabel.tsx","webpack:///./app/components/versionHoverCard.tsx","webpack:///./app/utils/withRelease.tsx","webpack:///./app/stores/releaseStore.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport ReleaseActions from 'sentry/actions/releaseActions';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport ReleaseStore, {getReleaseStoreKey} from 'sentry/stores/releaseStore';\nimport {Deploy, Release, ReleaseStatus} from 'sentry/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\nexport function getProjectRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/`;\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRelease for the same\n  // release to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  ReleaseStore.state.releaseLoading[getReleaseStoreKey(projectSlug, releaseVersion)] =\n    true;\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getRelease-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function getReleaseDeploys(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/organizations/${orgSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/deploys/`;\n\n  // HACK(leedongwei): Same as above\n  ReleaseStore.state.deploysLoading[getReleaseStoreKey(projectSlug, releaseVersion)] =\n    true;\n  ReleaseActions.loadDeploys(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Deploy[]) => {\n      ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadDeploysError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getReleaseDeploys-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function archiveRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Archiving Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Archived,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully archived.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be archived.')\n      );\n      throw error;\n    });\n}\n\nexport function restoreRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Restoring Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Active,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully restored.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be restored.')\n      );\n      throw error;\n    });\n}\n","import {createActions} from 'reflux';\n\nconst ReleaseActions = createActions([\n  'loadRelease', // Singular as it loads 1 release\n  'loadReleaseError',\n  'loadReleaseSuccess',\n  'loadDeploys', // Plural as it loads all deploys related to a release\n  'loadDeploysError',\n  'loadDeploysSuccess',\n]);\n\nexport default ReleaseActions;\n","import {createActions} from 'reflux';\n\nconst RepositoryActions = createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n\nexport default RepositoryActions;\n","import {Component} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport Tooltip from 'sentry/components/tooltip';\nimport {AvatarUser} from 'sentry/types';\n\nconst defaultProps = {\n  avatarSize: 28,\n  maxVisibleAvatars: 5,\n  typeMembers: 'users',\n  tooltipOptions: {},\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\ntype Mutable<T> = {-readonly [P in keyof T]: T[P]};\n\ntype Props = {\n  tooltipOptions: Mutable<UserAvatar['props']['tooltipOptions']>;\n  users: AvatarUser[];\n  className?: string;\n  renderTooltip?: UserAvatar['props']['renderTooltip'];\n} & DefaultProps;\n\nexport default class AvatarList extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      className,\n      users,\n      avatarSize,\n      maxVisibleAvatars,\n      renderTooltip,\n      typeMembers,\n      tooltipOptions,\n    } = this.props;\n\n    const visibleUsers = users.slice(0, maxVisibleAvatars);\n    const numCollapsedUsers = users.length - visibleUsers.length;\n\n    if (!tooltipOptions.position) {\n      tooltipOptions.position = 'top';\n    }\n\n    return (\n      <AvatarListWrapper className={className}>\n        {!!numCollapsedUsers && (\n          <Tooltip title={`${numCollapsedUsers} other ${typeMembers}`}>\n            <CollapsedUsers size={avatarSize} data-test-id=\"avatarList-collapsedusers\">\n              {numCollapsedUsers < 99 && <Plus>+</Plus>}\n              {numCollapsedUsers}\n            </CollapsedUsers>\n          </Tooltip>\n        )}\n        {visibleUsers.map(user => (\n          <StyledAvatar\n            key={`${user.id}-${user.email}`}\n            user={user}\n            size={avatarSize}\n            renderTooltip={renderTooltip}\n            tooltipOptions={tooltipOptions}\n            hasTooltip\n          />\n        ))}\n      </AvatarListWrapper>\n    );\n  }\n}\n\n// used in releases list page to do some alignment\nexport const AvatarListWrapper = styled('div')`\n  display: flex;\n  flex-direction: row-reverse;\n`;\n\nconst Circle = p => css`\n  border-radius: 50%;\n  border: 2px solid ${p.theme.background};\n  margin-left: -8px;\n  cursor: default;\n\n  &:hover {\n    z-index: 1;\n  }\n`;\n\nconst StyledAvatar = styled(UserAvatar)`\n  overflow: hidden;\n  ${Circle};\n`;\n\nconst CollapsedUsers = styled('div')<{size: number}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  text-align: center;\n  font-weight: 600;\n  background-color: ${p => p.theme.gray200};\n  color: ${p => p.theme.gray300};\n  font-size: ${p => Math.floor(p.size / 2.3)}px;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  ${Circle};\n`;\n\nconst Plus = styled('span')`\n  font-size: 10px;\n  margin-left: 1px;\n  margin-right: -1px;\n`;\n","import UserAvatar from 'sentry/components/avatar/userAvatar';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport {AvatarUser, Commit} from 'sentry/types';\n\ntype Props = {\n  commit: Commit;\n  headerClass: string;\n};\n\nconst unknownUser: AvatarUser = {\n  id: '',\n  name: '',\n  username: '??',\n  email: '',\n  avatarUrl: '',\n  avatar: {\n    avatarUuid: '',\n    avatarType: 'letter_avatar',\n  },\n  ip_address: '',\n};\n\nfunction LastCommit({commit, headerClass}: Props) {\n  function renderMessage(message: Commit['message']) {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n    if (firstLine.length > 100) {\n      let truncated = firstLine.substr(0, 90);\n      const words = truncated.split(/ /);\n      // try to not have elipsis mid-word\n      if (words.length > 1) {\n        words.pop();\n        truncated = words.join(' ');\n      }\n      return `${truncated}\\u2026`;\n    }\n    return firstLine;\n  }\n\n  const commitAuthor = commit?.author;\n  return (\n    <div>\n      <h6 className={headerClass}>Last commit</h6>\n      <div className=\"commit\">\n        <div className=\"commit-avatar\">\n          <UserAvatar user={commitAuthor || unknownUser} />\n        </div>\n        <div className=\"commit-message truncate\">{renderMessage(commit.message)}</div>\n        <div className=\"commit-meta\">\n          <strong>{commitAuthor?.name || t('Unknown Author')}</strong>\n          &nbsp;\n          <TimeSince date={commit.dateCreated} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LastCommit;\n","import styled from '@emotion/styled';\n\nconst RepoLabel = styled('span')`\n  /* label mixin from bootstrap */\n  font-weight: 700;\n  color: ${p => p.theme.white};\n  text-align: center;\n  white-space: nowrap;\n  border-radius: 0.25em;\n  /* end of label mixin from bootstrap */\n\n  ${p => p.theme.overflowEllipsis};\n\n  display: inline-block;\n  vertical-align: text-bottom;\n  line-height: 1;\n  background: ${p => p.theme.gray200};\n  padding: 3px;\n  max-width: 86px;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default RepoLabel;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport AvatarList from 'sentry/components/avatar/avatarList';\nimport Button from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport LastCommit from 'sentry/components/lastCommit';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport RepoLabel from 'sentry/components/repoLabel';\nimport TimeSince from 'sentry/components/timeSince';\nimport Version from 'sentry/components/version';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Deploy, Organization, Release, Repository} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport withApi from 'sentry/utils/withApi';\nimport withRelease from 'sentry/utils/withRelease';\nimport withRepositories from 'sentry/utils/withRepositories';\n\ninterface Props extends React.ComponentProps<typeof Hovercard> {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n\n  releaseVersion: string;\n  deploys?: Array<Deploy>;\n  deploysError?: Error;\n  deploysLoading?: boolean;\n  release?: Release;\n  releaseError?: Error;\n  releaseLoading?: boolean;\n  repositories?: Array<Repository>;\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n}\n\ntype State = {\n  visible: boolean;\n};\n\nclass VersionHoverCard extends Component<Props, State> {\n  state: State = {\n    visible: false,\n  };\n\n  toggleHovercard() {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  getRepoLink() {\n    const {organization} = this.props;\n    const orgSlug = organization.slug;\n    return {\n      header: null,\n      body: (\n        <ConnectRepo>\n          <h5>{t('Releases are better with commit data!')}</h5>\n          <p>\n            {t(\n              'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n            )}\n          </p>\n          <Button href={`/organizations/${orgSlug}/repos/`} priority=\"primary\">\n            {t('Connect a repository')}\n          </Button>\n        </ConnectRepo>\n      ),\n    };\n  }\n\n  getBody() {\n    const {releaseVersion, release, deploys} = this.props;\n    if (release === undefined || !defined(deploys)) {\n      return {header: null, body: null};\n    }\n\n    const {lastCommit} = release;\n    const recentDeploysByEnvironment = deploys.reduce(function (dbe, deploy) {\n      const {dateFinished, environment} = deploy;\n      if (!dbe.hasOwnProperty(environment)) {\n        dbe[environment] = dateFinished;\n      }\n\n      return dbe;\n    }, {});\n    let mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment);\n\n    if (Object.keys(recentDeploysByEnvironment).length > 3) {\n      mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment).slice(0, 3);\n    }\n\n    return {\n      header: (\n        <HeaderWrapper>\n          {t('Release')}\n          <VersionWrapper>\n            <StyledVersion version={releaseVersion} truncate anchor={false} />\n\n            <Clipboard value={releaseVersion}>\n              <ClipboardIconWrapper>\n                <IconCopy size=\"xs\" />\n              </ClipboardIconWrapper>\n            </Clipboard>\n          </VersionWrapper>\n        </HeaderWrapper>\n      ),\n      body: (\n        <div>\n          <div className=\"row\">\n            <div className=\"col-xs-4\">\n              <h6>{t('New Issues')}</h6>\n              <div className=\"count-since\">{release.newGroups}</div>\n            </div>\n            <div className=\"col-xs-8\">\n              <h6 style={{textAlign: 'right'}}>\n                {release.commitCount}{' '}\n                {release.commitCount !== 1 ? t('commits ') : t('commit ')} {t('by ')}{' '}\n                {release.authors.length}{' '}\n                {release.authors.length !== 1 ? t('authors') : t('author')}{' '}\n              </h6>\n              <AvatarList\n                users={release.authors}\n                avatarSize={25}\n                tooltipOptions={{container: 'body'} as any}\n                typeMembers=\"authors\"\n              />\n            </div>\n          </div>\n          {lastCommit && <LastCommit commit={lastCommit} headerClass=\"commit-heading\" />}\n          {deploys.length > 0 && (\n            <div>\n              <div className=\"divider\">\n                <h6 className=\"deploy-heading\">{t('Deploys')}</h6>\n              </div>\n              {mostRecentDeploySlice.map((env, idx) => {\n                const dateFinished = recentDeploysByEnvironment[env];\n                return (\n                  <div className=\"deploy\" key={idx}>\n                    <div className=\"deploy-meta\" style={{position: 'relative'}}>\n                      <VersionRepoLabel>{env}</VersionRepoLabel>\n                      {dateFinished && <StyledTimeSince date={dateFinished} />}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      ),\n    };\n  }\n\n  render() {\n    const {\n      deploysLoading,\n      deploysError,\n      release,\n      releaseLoading,\n      releaseError,\n      repositories,\n      repositoriesLoading,\n      repositoriesError,\n    } = this.props;\n    let header: React.ReactNode = null;\n    let body: React.ReactNode = null;\n\n    const loading = !!(deploysLoading || releaseLoading || repositoriesLoading);\n    const error = deploysError ?? releaseError ?? repositoriesError;\n    const hasRepos = repositories && repositories.length > 0;\n\n    if (loading) {\n      body = <LoadingIndicator mini />;\n    } else if (error) {\n      body = <LoadingError />;\n    } else {\n      const renderObj: {[key: string]: React.ReactNode} =\n        hasRepos && release ? this.getBody() : this.getRepoLink();\n      header = renderObj.header;\n      body = renderObj.body;\n    }\n\n    return (\n      <Hovercard {...this.props} header={header} body={body}>\n        {this.props.children}\n      </Hovercard>\n    );\n  }\n}\n\nexport {VersionHoverCard};\nexport default withApi(withRelease(withRepositories(VersionHoverCard)));\n\nconst ConnectRepo = styled('div')`\n  padding: ${space(2)};\n  text-align: center;\n`;\n\nconst VersionRepoLabel = styled(RepoLabel)`\n  width: 86px;\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  color: ${p => p.theme.gray300};\n  position: absolute;\n  left: 98px;\n  width: 50%;\n  padding: 3px 0;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst VersionWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: flex-end;\n`;\nconst StyledVersion = styled(Version)`\n  margin-right: ${space(0.5)};\n  max-width: 190px;\n`;\nconst ClipboardIconWrapper = styled('span')`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n","import {Component} from 'react';\n\nimport {getProjectRelease, getReleaseDeploys} from 'sentry/actionCreators/release';\nimport {Client} from 'sentry/api';\nimport ReleaseStore from 'sentry/stores/releaseStore';\nimport {Deploy, Organization, Release} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\ntype InjectedProps = {\n  deploys?: Array<Deploy>;\n  deploysError?: Error;\n  deploysLoading?: boolean;\n  release?: Release;\n  releaseError?: Error;\n  releaseLoading?: boolean;\n};\n\nfunction withRelease<P extends DependentProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithRelease extends Component<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  > {\n    static displayName = `withRelease(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      const {projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      this.state = {...releaseData};\n    }\n\n    componentDidMount() {\n      this.fetchRelease();\n      this.fetchDeploys();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ReleaseStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRelease() {\n      const {api, organization, projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.release && !releaseData.releaseLoading) ||\n        releaseData.releaseError\n      ) {\n        getProjectRelease(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    }\n\n    fetchDeploys() {\n      const {api, organization, projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.deploys && !releaseData.deploysLoading) ||\n        releaseData.deploysError\n      ) {\n        getReleaseDeploys(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    }\n\n    onStoreUpdate() {\n      const {projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      this.setState({...releaseData});\n    }\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P & DependentProps)}\n          {...(this.state as InjectedProps)}\n        />\n      );\n    }\n  }\n  return WithRelease;\n}\n\nexport default withRelease;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport OrganizationActions from 'sentry/actions/organizationActions';\nimport ReleaseActions from 'sentry/actions/releaseActions';\nimport {Deploy, Organization, Release} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\ntype StoreRelease = Map<string, Release>;\ntype StoreDeploys = Map<string, Array<Deploy>>;\ntype StoreLoading = Map<string, boolean>;\ntype StoreError = Map<string, Error>;\n\ninterface ReleaseStoreDefinition extends StoreDefinition {\n  get(\n    projectSlug: string,\n    releaseVersion: string\n  ): {\n    deploys: Array<Deploy> | undefined;\n    deploysError: Error | undefined;\n    deploysLoading: boolean | undefined;\n    release: Release | undefined;\n    releaseError: Error | undefined;\n    releaseLoading: boolean | undefined;\n  };\n\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error): void;\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error): void;\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  state: {\n    deploys: StoreDeploys;\n    deploysError: StoreError;\n    deploysLoading: StoreLoading;\n    orgSlug: string | undefined;\n    release: StoreRelease;\n    releaseError: StoreError;\n    releaseLoading: StoreLoading;\n  };\n  updateOrganization(org: Organization): void;\n}\n\nexport const getReleaseStoreKey = (projectSlug: string, releaseVersion: string) =>\n  `${projectSlug}${releaseVersion}`;\n\nconst storeConfig: ReleaseStoreDefinition = {\n  state: {\n    orgSlug: undefined,\n    release: new Map() as StoreRelease,\n    releaseLoading: new Map() as StoreLoading,\n    releaseError: new Map() as StoreError,\n    deploys: new Map() as StoreDeploys,\n    deploysLoading: new Map() as StoreLoading,\n    deploysError: new Map() as StoreError,\n  },\n\n  listenables: ReleaseActions,\n  unsubscribeListeners: [],\n\n  init() {\n    this.unsubscribeListeners.push(\n      this.listenTo(OrganizationActions.update, this.updateOrganization)\n    );\n    this.reset();\n  },\n\n  reset() {\n    this.state = {\n      orgSlug: undefined,\n      release: new Map() as StoreRelease,\n      releaseLoading: new Map() as StoreLoading,\n      releaseError: new Map() as StoreError,\n      deploys: new Map() as StoreDeploys,\n      deploysLoading: new Map() as StoreLoading,\n      deploysError: new Map() as StoreError,\n    };\n    this.trigger(this.state);\n  },\n\n  updateOrganization(org: Organization) {\n    this.reset();\n    this.state.orgSlug = org.slug;\n    this.trigger(this.state);\n  },\n\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: true,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {release, releaseLoading, releaseError, ...state} = this.state;\n    this.state = {\n      ...state,\n      release: {\n        ...release,\n        [releaseKey]: data,\n      },\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: true,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploys, deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploys: {\n        ...deploys,\n        [releaseKey]: data,\n      },\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  get(projectSlug: string, releaseVersion: string) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n\n    return {\n      release: this.state.release[releaseKey],\n      releaseLoading: this.state.releaseLoading[releaseKey],\n      releaseError: this.state.releaseError[releaseKey],\n      deploys: this.state.deploys[releaseKey],\n      deploysLoading: this.state.deploysLoading[releaseKey],\n      deploysError: this.state.deploysError[releaseKey],\n    };\n  },\n};\n\nconst ReleaseStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default ReleaseStore;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport RepoActions from 'sentry/actions/repositoryActions';\nimport {Repository} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\ninterface RepositoryStoreDefinition extends StoreDefinition {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesError?: Error;\n    repositoriesLoading?: boolean;\n  };\n\n  loadRepositories(orgSlug: string): void;\n\n  loadRepositoriesError(error: Error): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesError?: Error;\n    repositoriesLoading?: boolean;\n  };\n}\n\nconst storeConfig: RepositoryStoreDefinition = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\nconst RepositoryStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default RepositoryStore;\n","import {Component} from 'react';\n\nimport {getRepositories} from 'sentry/actionCreators/repositories';\nimport RepositoryActions from 'sentry/actions/repositoryActions';\nimport {Client} from 'sentry/api';\nimport RepositoryStore from 'sentry/stores/repositoryStore';\nimport {Organization, Repository} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nfunction withRepositories<P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithRepositories extends Component<P & DependentProps, InjectedProps> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: P & DependentProps, context: any) {\n      super(props, context);\n\n      const {organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      this.state =\n        repoData.orgSlug === orgSlug\n          ? {...INITIAL_STATE, ...repoData}\n          : {...INITIAL_STATE};\n    }\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    }\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = RepositoryStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRepositories() {\n      const {api, organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    }\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return WithRepositories;\n}\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'sentry/actions/repositoryActions';\nimport {Client} from 'sentry/api';\nimport RepositoryStore from 'sentry/stores/repositoryStore';\nimport {Repository} from 'sentry/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n"],"names":["getProjectRelease","api","params","orgSlug","projectSlug","releaseVersion","path","encodeURIComponent","ReleaseStore","getReleaseStoreKey","ReleaseActions","requestPromise","method","then","res","catch","err","status","Sentry","scope","setLevel","setFingerprint","getReleaseDeploys","archiveRelease","addLoadingMessage","t","data","ReleaseStatus","projects","version","release","addSuccessMessage","error","addErrorMessage","responseJSON","detail","restoreRelease","createActions","AvatarList","Component","render","className","users","avatarSize","maxVisibleAvatars","renderTooltip","typeMembers","tooltipOptions","this","props","visibleUsers","slice","numCollapsedUsers","length","position","AvatarListWrapper","title","CollapsedUsers","size","Plus","map","user","StyledAvatar","hasTooltip","id","email","Circle","p","css","theme","background","UserAvatar","gray200","gray300","Math","floor","unknownUser","name","username","avatarUrl","avatar","avatarUuid","avatarType","ip_address","LastCommit","commit","headerClass","commitAuthor","author","message","firstLine","split","truncated","substr","words","pop","join","renderMessage","date","dateCreated","white","overflowEllipsis","fontSizeSmall","VersionHoverCard","visible","toggleHovercard","setState","getRepoLink","organization","slug","header","body","ConnectRepo","href","priority","getBody","deploys","undefined","defined","lastCommit","recentDeploysByEnvironment","reduce","dbe","deploy","dateFinished","environment","hasOwnProperty","mostRecentDeploySlice","Object","keys","HeaderWrapper","VersionWrapper","StyledVersion","truncate","anchor","value","ClipboardIconWrapper","newGroups","style","textAlign","commitCount","authors","container","env","idx","VersionRepoLabel","StyledTimeSince","deploysLoading","deploysError","releaseLoading","releaseError","repositories","repositoriesLoading","repositoriesError","loading","hasRepos","mini","renderObj","children","withApi","WrappedComponent","WithRelease","constructor","context","super","onStoreUpdate","releaseData","state","componentDidMount","fetchRelease","fetchDeploys","componentWillUnmount","unsubscribe","getDisplayName","withRelease","withRepositories","space","RepoLabel","TimeSince","Version","storeConfig","Map","listenables","unsubscribeListeners","init","push","listenTo","OrganizationActions","updateOrganization","reset","trigger","org","loadRelease","releaseKey","loadReleaseError","loadReleaseSuccess","loadDeploys","loadDeploysError","loadDeploysSuccess","get","createStore","makeSafeRefluxStore","RepoActions","resetRepositories","loadRepositories","loadRepositoriesError","loadRepositoriesSuccess","INITIAL_STATE","WithRepositories","RepositoryStore","repoData","RepositoryActions","fetchRepositories","getRepositories"],"sourceRoot":""}