{"version":3,"file":"chunks/app_utils_discover_charts_tsx-app_utils_performance_histogram_utils_tsx-app_views_performance-a97f34.xxxxxxxxxxxxxxxxxxxx.js","mappings":"sXAkBO,SAASA,EAAiBC,GAAuD,IAAjCC,EAAiC,uDAAZ,GAC1E,KAAKC,EAAAA,EAAAA,IAAQF,GACX,MAAO,IAET,QAAQG,EAAAA,EAAAA,IAAoBF,IAC1B,IAAK,UACL,IAAK,SACH,OAAOD,EAAMI,iBACf,IAAK,aACH,OAAOC,EAAAA,EAAAA,IAAiBL,EAAO,GACjC,IAAK,WACH,OAAOM,EAAAA,EAAAA,IAAYN,EAAQ,IAAM,GAAG,GACtC,QACE,OAAOA,EAAMO,YAQZ,SAASC,EACdR,EACAC,GAEQ,IADRQ,EACQ,wDACR,QAAQN,EAAAA,EAAAA,IAAoBF,IAC1B,IAAK,UACL,IAAK,SACH,OAAOQ,GAAeC,EAAAA,EAAAA,IAAwBV,GAASA,EAAMI,iBAC/D,IAAK,aACH,OAAOC,EAAAA,EAAAA,IAAiBL,EAAO,GACjC,IAAK,WACH,OAAOW,EAAaX,GACtB,QACE,OAAOA,EAAMO,YAWZ,SAASI,EAAaX,GAC3B,GAAc,IAAVA,EACF,MAAO,IAET,GAAIA,GAASY,EAAAA,GAAM,CACjB,MAAMC,GAASb,EAAQY,EAAAA,IAAME,QAAQ,GACrC,OAAOC,EAAAA,EAAAA,GAAE,OAAQF,GAEnB,GAAIb,GAASgB,EAAAA,GAAK,CAChB,MAAMH,GAASb,EAAQgB,EAAAA,IAAKF,QAAQ,GACpC,OAAOC,EAAAA,EAAAA,GAAE,MAAOF,GAElB,GAAIb,GAASiB,EAAAA,GAAM,CACjB,MAAMJ,GAASb,EAAQiB,EAAAA,IAAMH,QAAQ,GACrC,OAAOC,EAAAA,EAAAA,GAAE,OAAQF,GAEnB,GAAIb,GAASkB,EAAAA,GAAQ,CACnB,MAAML,GAASb,EAAQkB,EAAAA,IAAQJ,QAAQ,GACvC,OAAOC,EAAAA,EAAAA,GAAE,QAASF,GAEpB,GAAIb,GAASmB,EAAAA,GAAQ,CACnB,MAAMN,GAASb,EAAQmB,EAAAA,IAAQL,QAAQ,GACvC,OAAOC,EAAAA,EAAAA,GAAE,MAAOF,GAElB,MAAMA,EAAQb,EAAMc,QAAQ,GAC5B,OAAOC,EAAAA,EAAAA,GAAE,OAAQF,K,yLCpFZ,SAASO,EAAeC,GAI7B,OAAOA,EAAKC,QAAU,EAAID,EAAK,GAAGE,IAAMF,EAAK,GAAGE,IAAM,EAGjD,SAASC,EAAeH,GAC7B,MAAMI,EAAQL,EAAeC,GAE7B,OAAOA,EAAKK,KAAIC,IACd,MAAMC,EAASD,EAAKJ,IACpB,MAAO,CACLM,MAAOD,EACPE,IAAKF,EAASH,MAKb,SAASM,EACdV,GAUA,IATA,UACEW,EADF,KAEEC,EAFF,mBAGEC,GAMF,uDADI,GAEJ,MAAMC,EAAanC,IACjB,OAAQiC,GACN,IAAK,WACH,MAAMG,EAAgBJ,MAAAA,EAAAA,EAAchC,EAAQ,IAAO,EAAI,EACvD,OAAOM,EAAAA,EAAAA,IAAYN,EAAQ,IAAMoC,GAAe,GAClD,IAAK,SAKH,MAAMC,EAAS,KAAOL,MAAAA,EAAAA,EAAa,GACnC,OAAQM,KAAKC,OAAOvC,EAAQwC,OAAOC,SAAWJ,GAAUA,GAAQjC,iBAClE,QACE,MAAM,IAAIsC,MAAO,0BAAyBT,OAGhD,OAAOZ,EAAKK,KAAIC,IAAQ,MACtB,MAAO,CACL3B,MAAO2B,EAAKgB,MACZC,KAAMT,EAAUR,EAAKJ,QACrB,UAAIW,MAAAA,OAAJ,EAAIA,EAAqBP,EAAKJ,YAA9B,QAAsC,S,oYChDrC,IAAKsB,EAuBL,SAASC,EACdC,EACAC,GAEA,MAAM,IAACC,EAAD,IAAMC,EAAN,IAAWC,EAAX,IAAgBC,GAAOJ,GAEzB,CAACC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,GAClC,MAAO,CACL,CAACP,EAAwBO,KAAM,CAC7BR,KAAMC,EAAwBO,IAC9BC,MAAOD,EAAM,CAAC,CAAC,uBAAyB,KAAIA,EAAItC,QAAQ,YAASwC,EACjEC,KAAM,CACJC,KAAM,OACNC,OAAOC,EAAAA,EAAAA,IAAcX,IAAiC,wBAExDlC,OAAOE,EAAAA,EAAAA,GAAE,QAEX,CAAC8B,EAAwBM,KAAM,CAC7BP,KAAMC,EAAwBM,IAC9BE,MAAOF,EAAM,CAAC,CAAC,uBAAyB,KAAIA,EAAIrC,QAAQ,YAASwC,EACjEC,KAAM,CACJC,KAAM,OACNC,OAAOC,EAAAA,EAAAA,IAAcX,IAAiC,wBAExDlC,OAAOE,EAAAA,EAAAA,GAAE,QAEX,CAAC8B,EAAwBK,KAAM,CAC7BN,KAAMC,EAAwBK,IAC9BG,MAAOH,EAAM,CAAC,CAAC,uBAAyB,KAAIA,EAAIpC,QAAQ,YAASwC,EACjEC,KAAM,CACJC,KAAM,OACNC,OAAOC,EAAAA,EAAAA,IAAcX,IAAiC,wBAExDlC,OAAOE,EAAAA,EAAAA,GAAE,QAEX,CAAC8B,EAAwBI,KAAM,CAC7BL,KAAMC,EAAwBI,IAC9BI,MAAOJ,EAAM,CAAC,CAAC,uBAAyB,KAAIA,EAAInC,QAAQ,YAASwC,EACjEC,KAAM,CACJC,KAAM,OACNC,OAAOC,EAAAA,EAAAA,IAAcX,IAAiC,wBAExDlC,OAAOE,EAAAA,EAAAA,GAAE,QAEX,CAAC8B,EAAwBc,MAAO,CAC9Bf,KAAMC,EAAwBc,KAC9B9C,OAAOE,EAAAA,EAAAA,GAAE,UAKR,SAAS6C,EAAT,GAUJ,IAVkC,QACnCC,EADmC,YAEnCC,EAFmC,UAGnCC,EAHmC,MAInCV,GAMC,EAED,MAAO,CACLW,SAFgB,kBAAiBH,gCAGjCR,MAAO,CACLS,YAAAA,EACAG,QAASF,EACTG,YAAab,EAAMa,YACnBC,YAAad,EAAMc,YACnBtC,MAAOwB,EAAMxB,MACbC,IAAKuB,EAAMvB,IACXuB,MAAOA,EAAMA,QAcZ,SAASe,EAAsCC,GACpD,OAVsBC,GAWpBC,EAAAA,EAAAA,IAAaF,EAAShB,MAAMmB,iBAAkB3B,EAAwBc,MATtEc,OAAOC,OAAO7B,GAAyB8B,SAASL,GAEzCA,EAGFzB,EAAwBc,KAPjC,IAAwBW,EAejB,SAASM,EACdN,EACAvB,GACA,QACA,MAAM8B,EAAsB/B,EAAuBC,GAC7CS,EAAI,UAAGqB,EAAoBP,GAAQf,YAA/B,aAAG,EAAkCC,KACzCC,EAAK,UAAGoB,EAAoBP,GAAQf,YAA/B,aAAG,EAAkCE,MAE1CJ,EAAmD,CACvDmB,iBAAkBF,GAKpB,OAHId,GAAQC,IACVJ,EAAME,KAAQ,GAAW,SAATC,EAAkB,IAAM,KAAKC,KAExCJ,EAGF,SAASyB,EACdC,GAEA,OAAQA,GACN,KAAKC,EAAAA,GAAAA,QACH,OAAOnC,EAAwBc,KACjC,KAAKqB,EAAAA,GAAAA,KACH,OAAOnC,EAAwBK,IACjC,QACE,S,SA7IML,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,IAAAA,MAAAA,EAAAA,IAAAA,MAAAA,EAAAA,IAAAA,MAAAA,EAAAA,KAAAA,O,CAAAA,IAAAA,EAAAA","sources":["webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n"],"names":["tooltipFormatter","value","seriesName","defined","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","getBucketWidth","data","length","bin","computeBuckets","width","map","item","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","factor","Math","round","Number","EPSILON","Error","count","name","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","query","undefined","sort","kind","field","filterToField","p100","eventsRouteWithQuery","orgSlug","transaction","projectID","pathname","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","Object","values","includes","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions"],"sourceRoot":""}