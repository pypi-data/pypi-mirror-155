{"version":3,"file":"chunks/app_utils_performance_vitals_constants_tsx-app_views_alerts_wizard_index_tsx-images_spot_aler-81a8ce.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/wizard/panelContent.tsx","webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx","webpack:///./app/views/alerts/wizard/index.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {measurementType, MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n\nexport const MOBILE_VITAL_DETAILS: Record<MobileVital, Vital> = {\n  [MobileVital.AppStartCold]: {\n    slug: 'app_start_cold',\n    name: t('App Start Cold'),\n    description: t(\n      'Cold start is a measure of the application start up time from scratch.'\n    ),\n    type: measurementType(MobileVital.AppStartCold),\n  },\n  [MobileVital.AppStartWarm]: {\n    slug: 'app_start_warm',\n    name: t('App Start Warm'),\n    description: t(\n      'Warm start is a measure of the application start up time while still in memory.'\n    ),\n    type: measurementType(MobileVital.AppStartWarm),\n  },\n  [MobileVital.FramesTotal]: {\n    slug: 'frames_total',\n    name: t('Total Frames'),\n    description: t(\n      'Total frames is a count of the number of frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesTotal),\n  },\n  [MobileVital.FramesSlow]: {\n    slug: 'frames_slow',\n    name: t('Slow Frames'),\n    description: t(\n      'Slow frames is a count of the number of slow frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesSlow),\n  },\n  [MobileVital.FramesFrozen]: {\n    slug: 'frames_frozen',\n    name: t('Frozen Frames'),\n    description: t(\n      'Frozen frames is a count of the number of frozen frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesFrozen),\n  },\n  [MobileVital.FramesSlowRate]: {\n    slug: 'frames_slow_rate',\n    name: t('Slow Frames Rate'),\n    description: t(\n      'Slow Frames Rate is the percentage of frames recorded within a transaction that is considered slow.'\n    ),\n    type: measurementType(MobileVital.FramesSlowRate),\n  },\n  [MobileVital.FramesFrozenRate]: {\n    slug: 'frames_frozen_rate',\n    name: t('Frozen Frames Rate'),\n    description: t(\n      'Frozen Frames Rate is the percentage of frames recorded within a transaction that is considered frozen.'\n    ),\n    type: measurementType(MobileVital.FramesFrozenRate),\n  },\n  [MobileVital.StallCount]: {\n    slug: 'stall_count',\n    name: t('Stalls'),\n    description: t(\n      'Stalls is the number of times the application stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallCount),\n  },\n  [MobileVital.StallTotalTime]: {\n    slug: 'stall_total_time',\n    name: t('Total Stall Time'),\n    description: t(\n      'Stall Total Time is the total amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallTotalTime),\n  },\n  [MobileVital.StallLongestTime]: {\n    slug: 'stall_longest_time',\n    name: t('Longest Stall Time'),\n    description: t(\n      'Stall Longest Time is the longest amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallLongestTime),\n  },\n  [MobileVital.StallPercentage]: {\n    slug: 'stall_percentage',\n    name: t('Stall Percentage'),\n    description: t(\n      'Stall Percentage is the percentage of the transaction duration the application was stalled.'\n    ),\n    type: measurementType(MobileVital.StallPercentage),\n  },\n};\n\nexport enum Browser {\n  CHROME = 'Chrome',\n  EDGE = 'Edge',\n  OPERA = 'Opera',\n  FIREFOX = 'Firefox',\n  SAFARI = 'Safari',\n  IE = 'IE',\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport type {Location} from 'history';\n\nimport Breadcrumbs, {Crumb, CrumbDropdown} from 'sentry/components/breadcrumbs';\nimport IdBadge from 'sentry/components/idBadge';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport useProjects from 'sentry/utils/useProjects';\nimport MenuItem from 'sentry/views/settings/components/settingsBreadcrumb/menuItem';\nimport type {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ninterface Props {\n  location: Location;\n  organization: Organization;\n  projectSlug: string;\n  routes: RouteWithName[];\n  title: string;\n  alertName?: string;\n  alertType?: string;\n  canChangeProject?: boolean;\n}\n\nfunction BuilderBreadCrumbs({\n  title,\n  alertName,\n  projectSlug,\n  routes,\n  canChangeProject,\n  location,\n  organization,\n  alertType,\n}: Props) {\n  const {projects} = useProjects();\n  const isSuperuser = isActiveSuperuser();\n  const project = projects.find(({slug}) => projectSlug === slug);\n  const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n\n  const label = (\n    <IdBadge project={project ?? {slug: projectSlug}} avatarSize={18} disableLink />\n  );\n\n  const projectCrumbLink: Crumb = {\n    to: `/organizations/${organization.slug}/alerts/rules/?project=${project?.id}`,\n    label,\n  };\n\n  function getProjectDropdownCrumb(): CrumbDropdown {\n    return {\n      onSelect: ({value: projectId}) => {\n        // TODO(taylangocmen): recreating route doesn't update query, don't edit recreateRoute will add project selector for alert-wizard-v3\n        browserHistory.push(\n          recreateRoute('', {\n            routes,\n            params: hasAlertWizardV3\n              ? {orgId: organization.slug, alertType}\n              : {orgId: organization.slug, projectId},\n            location,\n          })\n        );\n      },\n      label,\n      items: projects\n        .filter(proj => proj.isMember || isSuperuser)\n        .map((proj, index) => ({\n          index,\n          value: proj.slug,\n          label: (\n            <MenuItem>\n              <IdBadge\n                project={proj}\n                avatarProps={{consistentWidth: true}}\n                avatarSize={18}\n                disableLink\n              />\n            </MenuItem>\n          ),\n          searchKey: proj.slug,\n        })),\n    };\n  }\n\n  const projectCrumb = canChangeProject ? getProjectDropdownCrumb() : projectCrumbLink;\n\n  const crumbs: (Crumb | CrumbDropdown)[] = [\n    {\n      to: `/organizations/${organization.slug}/alerts/rules/`,\n      label: t('Alerts'),\n      preservePageFilters: true,\n    },\n    ...(hasAlertWizardV3 ? [] : [projectCrumb]),\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${organization.slug}/alerts/${projectSlug}/wizard`,\n            preservePageFilters: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default BuilderBreadCrumbs;\n","import diagramApdex from 'sentry-images/spot/alerts-wizard-apdex.svg';\nimport diagramCLS from 'sentry-images/spot/alerts-wizard-cls.svg';\nimport diagramCrashFreeSessions from 'sentry-images/spot/alerts-wizard-crash-free-sessions.svg';\nimport diagramCrashFreeUsers from 'sentry-images/spot/alerts-wizard-crash-free-users.svg';\nimport diagramCustom from 'sentry-images/spot/alerts-wizard-custom.svg';\nimport diagramErrors from 'sentry-images/spot/alerts-wizard-errors.svg';\nimport diagramFailureRate from 'sentry-images/spot/alerts-wizard-failure-rate.svg';\nimport diagramFID from 'sentry-images/spot/alerts-wizard-fid.svg';\nimport diagramIssues from 'sentry-images/spot/alerts-wizard-issues.svg';\nimport diagramLCP from 'sentry-images/spot/alerts-wizard-lcp.svg';\nimport diagramThroughput from 'sentry-images/spot/alerts-wizard-throughput.svg';\nimport diagramTransactionDuration from 'sentry-images/spot/alerts-wizard-transaction-duration.svg';\nimport diagramUsers from 'sentry-images/spot/alerts-wizard-users-experiencing-errors.svg';\n\nimport {t} from 'sentry/locale';\n\nimport {AlertType} from './options';\n\ntype PanelContent = {\n  description: string;\n  examples: string[];\n  docsLink?: string;\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. Set an alert for new issues, when an issue changes state, frequency of errors, or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n    illustration: diagramIssues,\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n    illustration: diagramErrors,\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n    illustration: diagramUsers,\n  },\n  throughput: {\n    description: t(\n      'Throughput is the total number of transactions in a project and you can alert when it reaches a threshold within a period of time.'\n    ),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n    illustration: diagramThroughput,\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n    illustration: diagramTransactionDuration,\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n    illustration: diagramApdex,\n  },\n  failure_rate: {\n    description: t(\n      'Failure rate is the percentage of unsuccessful transactions. Sentry treats transactions with a status other than “ok,” “canceled,” and “unknown” as failures.'\n    ),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n    illustration: diagramFailureRate,\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. It marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and so we recommend an LCP of less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramLCP,\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and we recommend a FID of less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramFID,\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramCLS,\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP), first contentful paint (FCP), and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n    illustration: diagramCustom,\n  },\n  crash_free_sessions: {\n    description: t(\n      'A session begins when a user starts the application and ends when it’s closed or sent to the background. A crash is when a session ends due to an error and this type of alert lets you monitor when those crashed sessions exceed a threshold. This lets you get a better picture of the health of your app.'\n    ),\n    examples: [\n      t('When the Crash Free Rate is below 98%, send a Slack notification to the team.'),\n    ],\n    illustration: diagramCrashFreeSessions,\n  },\n  crash_free_users: {\n    description: t(\n      'Crash Free Users is the percentage of distinct users that haven’t experienced a crash and so this type of alert tells you when the overall user experience dips below a certain unacceptable threshold.'\n    ),\n    examples: [\n      t('When the Crash Free Rate is below 97%, send an email notification to yourself.'),\n    ],\n    illustration: diagramCrashFreeUsers,\n  },\n};\n","import styled from '@emotion/styled';\n\nimport Radio from 'sentry/components/radio';\nimport space from 'sentry/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  label: string;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n  value: string | null;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n          <Radio\n            radioSize=\"small\"\n            aria-label={id}\n            checked={value === id}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n          />\n          <div>{name}</div>\n          {extraContent}\n        </RadioLineItem>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nconst RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  gap: ${space(0.25)} ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n  color: ${p => p.theme.subText};\n  transition: color 0.3s ease-in;\n  padding: 0;\n  position: relative;\n\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n\n  svg {\n    display: none;\n    opacity: 0;\n  }\n\n  &[aria-checked='true'] {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst RadioPanel = styled('div')`\n  margin: 0;\n`;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'sentry/views/alerts/rules/metric/types';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardRuleTemplates,\n  getAlertWizardCategories,\n  WizardRuleTemplate,\n} from './options';\nimport {AlertWizardPanelContent} from './panelContent';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId?: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  projectId: string;\n};\n\ntype State = {\n  alertOption: AlertType;\n};\n\nconst DEFAULT_ALERT_OPTION = 'issues';\n\nclass AlertWizard extends Component<Props, State> {\n  state: State = {\n    alertOption:\n      this.props.location.query.alert_option in AlertWizardAlertNames\n        ? this.props.location.query.alert_option\n        : DEFAULT_ALERT_OPTION,\n  };\n\n  componentDidMount() {\n    // capture landing on the alert wizard page and viewing the issue alert by default\n    this.trackView();\n  }\n\n  trackView(alertType: AlertType = DEFAULT_ALERT_OPTION) {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('alert_wizard.option_viewed', {\n      organization,\n      alert_type: alertType,\n    });\n  }\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    this.setState({alertOption});\n    this.trackView(alertOption);\n  };\n\n  renderCreateAlertButton() {\n    const {organization, location, params, projectId: _projectId} = this.props;\n    const {alertOption} = this.state;\n    const projectId = params.projectId ?? _projectId;\n    let metricRuleTemplate: Readonly<WizardRuleTemplate> | undefined =\n      AlertWizardRuleTemplates[alertOption];\n    const isMetricAlert = !!metricRuleTemplate;\n    const isTransactionDataset = metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n\n    if (\n      organization.features.includes('alert-crash-free-metrics') &&\n      metricRuleTemplate?.dataset === Dataset.SESSIONS\n    ) {\n      metricRuleTemplate = {...metricRuleTemplate, dataset: Dataset.METRICS};\n    }\n\n    const to = hasAlertWizardV3\n      ? {\n          pathname: `/organizations/${organization.slug}/alerts/new/${\n            isMetricAlert ? AlertRuleType.METRIC : AlertRuleType.ISSUE\n          }/`,\n          query: {\n            ...(metricRuleTemplate ? metricRuleTemplate : {}),\n            project: projectId,\n            referrer: location?.query?.referrer,\n          },\n        }\n      : {\n          pathname: `/organizations/${organization.slug}/alerts/${projectId}/new/`,\n          query: {\n            ...(metricRuleTemplate ? metricRuleTemplate : {}),\n            createFromWizard: true,\n            referrer: location?.query?.referrer,\n          },\n        };\n\n    const renderNoAccess = p => (\n      <Hovercard\n        body={\n          <FeatureDisabled\n            features={p.features}\n            hideHelpToggle\n            featureName={t('Metric Alerts')}\n          />\n        }\n      >\n        {p.children(p)}\n      </Hovercard>\n    );\n\n    return (\n      <Feature\n        features={\n          isTransactionDataset\n            ? ['organizations:incidents', 'organizations:performance-view']\n            : isMetricAlert\n            ? ['organizations:incidents']\n            : []\n        }\n        requireAll\n        organization={organization}\n        hookName=\"feature-disabled:alert-wizard-performance\"\n        renderDisabled={renderNoAccess}\n      >\n        {({hasFeature}) => (\n          <WizardButtonContainer\n            onClick={() =>\n              trackAdvancedAnalyticsEvent('alert_wizard.option_selected', {\n                organization,\n                alert_type: alertOption,\n              })\n            }\n          >\n            <CreateAlertButton\n              organization={organization}\n              projectSlug={projectId}\n              disabled={!hasFeature}\n              priority=\"primary\"\n              to={to}\n              hideIcon\n            >\n              {t('Set Conditions')}\n            </CreateAlertButton>\n          </WizardButtonContainer>\n        )}\n      </Feature>\n    );\n  }\n\n  render() {\n    const {organization, params, projectId: _projectId, routes, location} = this.props;\n    const {alertOption} = this.state;\n    const projectId = params.projectId ?? _projectId;\n    const title = t('Alert Creation Wizard');\n    const panelContent = AlertWizardPanelContent[alertOption];\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              projectSlug={projectId}\n              title={t('Select Alert')}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>{t('Select Alert')}</Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <WizardBody>\n              <WizardOptions>\n                <CategoryTitle>{t('Errors')}</CategoryTitle>\n                {getAlertWizardCategories(organization).map(\n                  ({categoryHeading, options}, i) => (\n                    <OptionsWrapper key={categoryHeading}>\n                      {i > 0 && <CategoryTitle>{categoryHeading} </CategoryTitle>}\n                      <RadioPanelGroup\n                        choices={options.map(alertType => {\n                          return [alertType, AlertWizardAlertNames[alertType]];\n                        })}\n                        onChange={this.handleChangeAlertOption}\n                        value={alertOption}\n                        label=\"alert-option\"\n                      />\n                    </OptionsWrapper>\n                  )\n                )}\n              </WizardOptions>\n              <WizardPanel visible={!!panelContent && !!alertOption}>\n                <WizardPanelBody>\n                  <div>\n                    <PanelHeader>{AlertWizardAlertNames[alertOption]}</PanelHeader>\n                    <PanelBody withPadding>\n                      <PanelDescription>\n                        {panelContent.description}{' '}\n                        {panelContent.docsLink && (\n                          <ExternalLink href={panelContent.docsLink}>\n                            {t('Learn more')}\n                          </ExternalLink>\n                        )}\n                      </PanelDescription>\n                      <WizardImage src={panelContent.illustration} />\n                      <ExampleHeader>{t('Examples')}</ExampleHeader>\n                      <ExampleList symbol=\"bullet\">\n                        {panelContent.examples.map((example, i) => (\n                          <ExampleItem key={i}>{example}</ExampleItem>\n                        ))}\n                      </ExampleList>\n                    </PanelBody>\n                  </div>\n                  <WizardFooter>{this.renderCreateAlertButton()}</WizardFooter>\n                </WizardPanelBody>\n              </WizardPanel>\n            </WizardBody>\n          </Layout.Main>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nconst CategoryTitle = styled('h2')`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)} !important;\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n  padding-top: ${space(1)};\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(3)};\n  padding-right: ${space(3)};\n  max-width: 300px;\n`;\n\nconst WizardImage = styled('img')`\n  max-height: 300px;\n`;\n\nconst WizardPanel = styled(Panel)<{visible?: boolean}>`\n  max-width: 700px;\n  position: sticky;\n  top: 20px;\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n  ${p => p.visible && 'animation: 0.6s pop ease forwards'};\n\n  @keyframes pop {\n    0% {\n      transform: translateY(30px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`;\n\nconst ExampleList = styled(List)`\n  margin-bottom: ${space(2)} !important;\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  flex: 1;\n  min-width: 100%;\n`;\n\nconst PanelDescription = styled('p')`\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: 0 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst WizardFooter = styled('div')`\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1.5)} ${space(1.5)} ${space(1.5)} ${space(1.5)};\n`;\n\nconst WizardButtonContainer = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport default AlertWizard;\n","import styled from '@emotion/styled';\n\nconst MenuItem = styled('div')`\n  font-size: 14px;\n  ${p => p.theme.overflowEllipsis};\n`;\n\nexport default MenuItem;\n"],"names":["WEB_VITAL_DETAILS","WebVital","slug","name","t","acronym","description","poorThreshold","type","measurementType","MOBILE_VITAL_DETAILS","MobileVital","Browser","recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","BuilderBreadCrumbs","title","alertName","projectSlug","canChangeProject","organization","alertType","projects","useProjects","isSuperuser","isActiveSuperuser","project","find","hasAlertWizardV3","features","includes","label","avatarSize","disableLink","projectCrumbLink","id","projectCrumb","onSelect","value","projectId","browserHistory","orgId","items","filter","proj","isMember","index","avatarProps","consistentWidth","searchKey","crumbs","preservePageFilters","push","StyledBreadcrumbs","Breadcrumbs","space","AlertWizardPanelContent","issues","examples","illustration","diagramIssues","num_errors","diagramErrors","users_experiencing_errors","diagramUsers","throughput","diagramThroughput","trans_duration","diagramTransactionDuration","apdex","docsLink","diagramApdex","failure_rate","diagramFailureRate","lcp","diagramLCP","fid","diagramFID","cls","diagramCLS","custom","diagramCustom","crash_free_sessions","diagramCrashFreeSessions","crash_free_users","diagramCrashFreeUsers","RadioPanelGroup","choices","onChange","props","Container","role","extraContent","RadioPanel","RadioLineItem","radioSize","checked","e","p","theme","subText","textColor","DEFAULT_ALERT_OPTION","AlertWizard","Component","alertOption","this","query","alert_option","AlertWizardAlertNames","setState","trackView","componentDidMount","trackAdvancedAnalyticsEvent","alert_type","renderCreateAlertButton","_projectId","state","metricRuleTemplate","AlertWizardRuleTemplates","isMetricAlert","isTransactionDataset","dataset","Dataset","pathname","AlertRuleType","referrer","createFromWizard","requireAll","hookName","renderDisabled","body","hideHelpToggle","featureName","children","hasFeature","WizardButtonContainer","onClick","disabled","priority","hideIcon","render","panelContent","Fragment","StyledHeaderContent","fullWidth","WizardBody","WizardOptions","CategoryTitle","getAlertWizardCategories","i","categoryHeading","OptionsWrapper","handleChangeAlertOption","WizardPanel","visible","WizardPanelBody","withPadding","PanelDescription","href","WizardImage","src","ExampleHeader","ExampleList","symbol","example","ExampleItem","WizardFooter","Layout","fontSizeExtraLarge","Panel","List","PanelBody","fontSizeLarge","ListItem","fontSizeMedium","border","overflowEllipsis"],"sourceRoot":""}