{"version":3,"file":"chunks/app_components_acl_access_tsx-app_components_forms_textCopyInput_tsx-app_components_modals_wi-6309ac.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/components/forms/textCopyInput.tsx","webpack:///./app/components/modals/widgetBuilder/addToDashboardModal.tsx","webpack:///./app/utils/withConfig.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import {Component, createRef} from 'react';\nimport {findDOMNode} from 'react-dom';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport {IconCopy} from 'sentry/icons';\nimport {inputStyles} from 'sentry/styles/input';\nimport {selectText} from 'sentry/utils/selectText';\n\nconst Wrapper = styled('div')`\n  display: flex;\n`;\n\nexport const StyledInput = styled('input')<{rtl?: boolean}>`\n  ${inputStyles};\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-right-width: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  direction: ${p => (p.rtl ? 'rtl' : 'ltr')};\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.backgroundSecondary};\n    border-right-width: 0;\n  }\n`;\n\nconst OverflowContainer = styled('div')`\n  flex-grow: 1;\n  border: none;\n`;\n\nexport const StyledCopyButton = styled(Button)`\n  flex-shrink: 1;\n  border-radius: 0 0.25em 0.25em 0;\n  box-shadow: none;\n`;\n\ntype Props = {\n  /**\n   * Text to copy\n   */\n  children: string;\n  className?: string;\n  disabled?: boolean;\n  onCopy?: (value: string, event: React.MouseEvent) => void;\n  /**\n   * Always show the ending of a long overflowing text in input\n   */\n  rtl?: boolean;\n  style?: React.CSSProperties;\n};\n\nclass TextCopyInput extends Component<Props> {\n  textRef = createRef<HTMLInputElement>();\n\n  // Select text when copy button is clicked\n  handleCopyClick = (e: React.MouseEvent) => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    const {onCopy, children} = this.props;\n\n    this.handleSelectText();\n\n    onCopy?.(children, e);\n\n    e.stopPropagation();\n  };\n\n  handleSelectText = () => {\n    const {rtl} = this.props;\n\n    if (!this.textRef.current) {\n      return;\n    }\n\n    // We use findDOMNode here because `this.textRef` is not a dom node,\n    // it's a ref to AutoSelectText\n    const node = findDOMNode(this.textRef.current); // eslint-disable-line react/no-find-dom-node\n    if (!node || !(node instanceof HTMLElement)) {\n      return;\n    }\n\n    if (rtl && node instanceof HTMLInputElement) {\n      // we don't want to select the first character - \\u202A, nor the last - \\u202C\n      node.setSelectionRange(1, node.value.length - 1);\n    } else {\n      selectText(node);\n    }\n  };\n\n  render() {\n    const {className, disabled, style, children, rtl} = this.props;\n\n    /**\n     * We are using direction: rtl; to always show the ending of a long overflowing text in input.\n     *\n     * This however means that the trailing characters with BiDi class O.N. ('Other Neutrals') goes to the other side.\n     * Hello! becomes !Hello and vice versa. This is a problem for us when we want to show path in this component, because\n     * /user/local/bin becomes user/local/bin/. Wrapping in unicode characters for left-to-righ embedding solves this,\n     * however we need to be aware of them when selecting the text - we are solving that by offseting the selectionRange.\n     */\n    const inputValue = rtl ? '\\u202A' + children + '\\u202C' : children;\n\n    return (\n      <Wrapper className={className}>\n        <OverflowContainer>\n          <StyledInput\n            readOnly\n            disabled={disabled}\n            ref={this.textRef}\n            style={style}\n            value={inputValue}\n            onClick={this.handleSelectText}\n            rtl={rtl}\n          />\n        </OverflowContainer>\n        <Clipboard hideUnsupported value={children}>\n          <StyledCopyButton\n            type=\"button\"\n            disabled={disabled}\n            onClick={this.handleCopyClick}\n          >\n            <IconCopy />\n          </StyledCopyButton>\n        </Clipboard>\n      </Wrapper>\n    );\n  }\n}\n\nexport default TextCopyInput;\n","import {Fragment, useEffect, useState} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport {\n  fetchDashboard,\n  fetchDashboards,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DateString, Organization, PageFilters, SelectValue} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  DashboardListItem,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {NEW_DASHBOARD_ID} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboardsV2/widgetCard';\n\ntype WidgetAsQueryParams = Query & {\n  defaultTableColumns: string[];\n  defaultTitle: string;\n  defaultWidgetQuery: string;\n  displayType: DisplayType;\n  environment: string[];\n  project: number[];\n  source: string;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n};\n\nexport type AddToDashboardModalProps = {\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetAsQueryParams: WidgetAsQueryParams;\n};\n\ntype Props = ModalRenderProps & AddToDashboardModalProps;\n\nconst SELECT_DASHBOARD_MESSAGE = t('Select a dashboard');\n\nfunction AddToDashboardModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  organization,\n  router,\n  selection,\n  widget,\n  widgetAsQueryParams,\n}: Props) {\n  const api = useApi();\n  const [dashboards, setDashboards] = useState<DashboardListItem[] | null>(null);\n  const [selectedDashboardId, setSelectedDashboardId] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchDashboards(api, organization.slug).then(setDashboards);\n  }, []);\n\n  function handleGoToBuilder() {\n    const pathname =\n      selectedDashboardId === NEW_DASHBOARD_ID\n        ? `/organizations/${organization.slug}/dashboards/new/widget/new/`\n        : `/organizations/${organization.slug}/dashboard/${selectedDashboardId}/widget/new/`;\n\n    router.push({\n      pathname,\n      query: widgetAsQueryParams,\n    });\n    closeModal();\n  }\n\n  async function handleAddAndStayInDiscover() {\n    if (selectedDashboardId === null || selectedDashboardId === NEW_DASHBOARD_ID) {\n      return;\n    }\n\n    let orderby = widget.queries[0].orderby;\n    if (!!!(DisplayType.AREA && widget.queries[0].columns.length)) {\n      orderby = ''; // Clear orderby if its not a top n visualization.\n    }\n    const query = widget.queries[0];\n\n    const newWidget = {\n      ...widget,\n      title: widget.title === '' ? t('All Events') : widget.title,\n      queries: [{...query, orderby}],\n    };\n\n    try {\n      const dashboard = await fetchDashboard(api, organization.slug, selectedDashboardId);\n      const newDashboard = {\n        ...dashboard,\n        widgets: [...dashboard.widgets, newWidget],\n      };\n\n      await updateDashboard(api, organization.slug, newDashboard);\n\n      closeModal();\n      addSuccessMessage(t('Successfully added widget to dashboard'));\n    } catch (e) {\n      const errorMessage = t('Unable to add widget to dashboard');\n      handleXhrErrorResponse(errorMessage)(e);\n      addErrorMessage(errorMessage);\n    }\n  }\n\n  const canSubmit = selectedDashboardId !== null;\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Add to Dashboard')}</h4>\n      </Header>\n\n      <Body>\n        <SelectControlWrapper>\n          <SelectControl\n            disabled={dashboards === null}\n            menuPlacement=\"auto\"\n            name=\"dashboard\"\n            placeholder={t('Select Dashboard')}\n            value={selectedDashboardId}\n            options={\n              dashboards && [\n                {label: t('+ Create New Dashboard'), value: 'new'},\n                ...dashboards.map(({title, id, widgetDisplay}) => ({\n                  label: title,\n                  value: id,\n                  isDisabled: widgetDisplay.length >= MAX_WIDGETS,\n                  tooltip:\n                    widgetDisplay.length >= MAX_WIDGETS &&\n                    tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                      maxWidgets: MAX_WIDGETS,\n                    }),\n                  tooltipOptions: {position: 'right'},\n                })),\n              ]\n            }\n            onChange={(option: SelectValue<string>) => {\n              if (option.disabled) {\n                return;\n              }\n              setSelectedDashboardId(option.value);\n            }}\n          />\n        </SelectControlWrapper>\n        {t('This is a preview of how the widget will appear in your dashboard.')}\n        <WidgetCard\n          api={api}\n          organization={organization}\n          currentWidgetDragging={false}\n          isEditing={false}\n          isSorting={false}\n          widgetLimitReached={false}\n          selection={selection}\n          widget={widget}\n          showStoredAlert\n        />\n      </Body>\n\n      <Footer>\n        <StyledButtonBar gap={1.5}>\n          <Button\n            onClick={handleAddAndStayInDiscover}\n            disabled={!canSubmit || selectedDashboardId === NEW_DASHBOARD_ID}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Add + Stay in Discover')}\n          </Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleGoToBuilder}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Open in Widget Builder')}\n          </Button>\n        </StyledButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport default AddToDashboardModal;\n\nconst SelectControlWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${props => props.theme.breakpoints.small}) {\n    grid-template-rows: repeat(2, 1fr);\n    gap: ${space(1.5)};\n    width: 100%;\n\n    > button {\n      width: 100%;\n    }\n  }\n`;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n","import ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {Config} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedConfigProps = {\n  config: Config;\n};\n\n/**\n * Higher order component that passes the config object to the wrapped\n * component\n */\nfunction withConfig<P extends InjectedConfigProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  type Props = Omit<P, keyof InjectedConfigProps> & Partial<InjectedConfigProps>;\n\n  const Wrapper: React.FC<Props> = props => {\n    const config = useLegacyStore(ConfigStore);\n    const allProps = {config, ...props} as P;\n\n    return <WrappedComponent {...allProps} />;\n  };\n\n  Wrapper.displayName = `withConfig(${getDisplayName(WrappedComponent)})`;\n\n  return Wrapper;\n}\n\nexport default withConfig;\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","Wrapper","StyledInput","inputStyles","p","theme","backgroundSecondary","rtl","OverflowContainer","StyledCopyButton","Button","TextCopyInput","createRef","e","textRef","current","onCopy","handleSelectText","stopPropagation","node","findDOMNode","HTMLElement","HTMLInputElement","setSelectionRange","value","length","selectText","className","disabled","style","inputValue","readOnly","ref","onClick","hideUnsupported","handleCopyClick","SELECT_DASHBOARD_MESSAGE","AddToDashboardModal","Header","Body","Footer","closeModal","router","selection","widget","widgetAsQueryParams","api","useApi","dashboards","setDashboards","useState","selectedDashboardId","setSelectedDashboardId","useEffect","fetchDashboards","slug","then","canSubmit","Fragment","closeButton","SelectControlWrapper","menuPlacement","name","placeholder","options","label","map","title","id","widgetDisplay","isDisabled","MAX_WIDGETS","tooltip","tct","maxWidgets","tooltipOptions","position","onChange","option","currentWidgetDragging","isEditing","isSorting","widgetLimitReached","showStoredAlert","StyledButtonBar","gap","async","NEW_DASHBOARD_ID","orderby","queries","DisplayType","columns","query","newWidget","dashboard","fetchDashboard","newDashboard","widgets","updateDashboard","addSuccessMessage","errorMessage","handleXhrErrorResponse","addErrorMessage","undefined","priority","pathname","push","space","ButtonBar","breakpoints","small","modalCss","WrappedComponent","allProps","useLegacyStore","ConfigStore","displayName","getDisplayName"],"sourceRoot":""}