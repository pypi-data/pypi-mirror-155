{"version":3,"file":"chunks/app_views_performance_trends_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/trends/content.tsx","webpack:///./app/views/performance/trends/index.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Alert from 'sentry/components/alert';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport DropdownControl, {DropdownItem} from 'sentry/components/dropdownControl';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {getPerformanceLandingUrl, getTransactionSearchQuery} from '../utils';\n\nimport ChangedTransactions from './changedTransactions';\nimport {TrendChangeType, TrendFunctionField, TrendView} from './types';\nimport {\n  DEFAULT_MAX_DURATION,\n  DEFAULT_TRENDS_STATS_PERIOD,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  modifyTrendsViewDefaultPeriod,\n  resetCursors,\n  TRENDS_FUNCTIONS,\n  TRENDS_PARAMETERS,\n} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  error?: string;\n  previousTrendFunction?: TrendFunctionField;\n};\n\nexport const defaultTrendsSelectionDate = {\n  start: null,\n  end: null,\n  utc: false,\n  period: DEFAULT_TRENDS_STATS_PERIOD,\n};\n\nclass TrendsContent extends Component<Props, State> {\n  state: State = {};\n\n  handleSearch = (searchQuery: string) => {\n    const {location} = this.props;\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        query: String(searchQuery).trim() || undefined,\n      },\n    });\n  };\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  handleTrendFunctionChange = (field: string) => {\n    const {organization, location} = this.props;\n\n    const offsets = {};\n\n    Object.values(TrendChangeType).forEach(trendChangeType => {\n      const queryKey = getSelectedQueryKey(trendChangeType);\n      offsets[queryKey] = undefined;\n    });\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_function',\n      eventName: 'Performance Views: Change Function',\n      organization_id: parseInt(organization.id, 10),\n      function_name: field,\n    });\n\n    this.setState({\n      previousTrendFunction: getCurrentTrendFunction(location).field,\n    });\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...offsets,\n        ...cursors,\n        trendFunction: field,\n      },\n    });\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <Alert type=\"error\" showIcon>\n        {error}\n      </Alert>\n    );\n  }\n\n  handleParameterChange = (label: string) => {\n    const {organization, location} = this.props;\n    const cursors = resetCursors();\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_parameter',\n      eventName: 'Performance Views: Change Parameter',\n      organization_id: parseInt(organization.id, 10),\n      parameter_name: label,\n    });\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        trendParameter: label,\n      },\n    });\n  };\n\n  getPerformanceLink() {\n    const {location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n    };\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    // This stops errors from occurring when navigating to other views since we are appending aggregates to the trends view\n    conditions.removeFilter('tpm()');\n    conditions.removeFilter('confidence()');\n    conditions.removeFilter('transaction.duration');\n    newQuery.query = conditions.formatString();\n    return {\n      pathname: getPerformanceLandingUrl(this.props.organization),\n      query: newQuery,\n    };\n  }\n\n  render() {\n    const {organization, eventView, location, projects} = this.props;\n    const {previousTrendFunction} = this.state;\n\n    const trendView = eventView.clone() as TrendView;\n    modifyTrendsViewDefaultPeriod(trendView, location);\n\n    const fields = generateAggregateFields(\n      organization,\n      [\n        {\n          field: 'absolute_correlation()',\n        },\n        {\n          field: 'trend_percentage()',\n        },\n        {\n          field: 'trend_difference()',\n        },\n        {\n          field: 'count_percentage()',\n        },\n        {\n          field: 'tpm()',\n        },\n        {\n          field: 'tps()',\n        },\n      ],\n      ['epm()', 'eps()']\n    );\n    const currentTrendFunction = getCurrentTrendFunction(location);\n    const currentTrendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const query = getTransactionSearchQuery(location);\n\n    return (\n      <PageFiltersContainer\n        defaultSelection={{\n          datetime: defaultTrendsSelectionDate,\n        }}\n        hideGlobalHeader\n      >\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: 'Performance',\n                  to: this.getPerformanceLink(),\n                },\n                {\n                  label: 'Trends',\n                },\n              ]}\n            />\n            <Layout.Title>{t('Trends')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <DefaultTrends location={location} eventView={eventView} projects={projects}>\n              <FilterActions>\n                <PageFilterBar condensed>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"left\" />\n                </PageFilterBar>\n                <StyledSearchBar\n                  searchSource=\"trends\"\n                  organization={organization}\n                  projectIds={trendView.project}\n                  query={query}\n                  fields={fields}\n                  onSearch={this.handleSearch}\n                  maxQueryLength={MAX_QUERY_LENGTH}\n                />\n                <div data-test-id=\"trends-dropdown\">\n                  <DropdownControl\n                    buttonProps={{prefix: t('Percentile')}}\n                    label={currentTrendFunction.label}\n                  >\n                    {TRENDS_FUNCTIONS.map(({label, field}) => (\n                      <DropdownItem\n                        key={field}\n                        onSelect={this.handleTrendFunctionChange}\n                        eventKey={field}\n                        data-test-id={field}\n                        isActive={field === currentTrendFunction.field}\n                      >\n                        {label}\n                      </DropdownItem>\n                    ))}\n                  </DropdownControl>\n                </div>\n                <DropdownControl\n                  buttonProps={{prefix: t('Parameter')}}\n                  label={currentTrendParameter.label}\n                >\n                  {TRENDS_PARAMETERS.map(({label}) => (\n                    <DropdownItem\n                      key={label}\n                      onSelect={this.handleParameterChange}\n                      eventKey={label}\n                      data-test-id={label}\n                      isActive={label === currentTrendParameter.label}\n                    >\n                      {label}\n                    </DropdownItem>\n                  ))}\n                </DropdownControl>\n              </FilterActions>\n              <ListContainer>\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.IMPROVED}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.REGRESSION}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n              </ListContainer>\n            </DefaultTrends>\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    );\n  }\n}\n\ntype DefaultTrendsProps = {\n  children: React.ReactNode[];\n  eventView: EventView;\n  location: Location;\n  projects: Project[];\n};\n\nclass DefaultTrends extends Component<DefaultTrendsProps> {\n  hasPushedDefaults = false;\n\n  render() {\n    const {children, location, eventView, projects} = this.props;\n\n    const queryString = decodeScalar(location.query.query);\n    const trendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const conditions = new MutableSearch(queryString || '');\n\n    if (queryString || this.hasPushedDefaults) {\n      this.hasPushedDefaults = true;\n      return <Fragment>{children}</Fragment>;\n    }\n    this.hasPushedDefaults = true;\n    conditions.setFilterValues('tpm()', ['>0.01']);\n    conditions.setFilterValues(trendParameter.column, ['>0', `<${DEFAULT_MAX_DURATION}`]);\n\n    const query = conditions.formatString();\n    eventView.query = query;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(query).trim() || undefined,\n      },\n    });\n    return null;\n  }\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nconst ListContainer = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n`;\n\nexport default withPageFilters(TrendsContent);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {generatePerformanceEventView} from '../data';\n\nimport TrendsContent from './content';\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  eventView: EventView;\n  error?: string;\n};\n\nclass TrendsSummary extends Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    return {\n      ...prevState,\n      eventView: generatePerformanceEventView(nextProps.location, nextProps.projects, {\n        isTrends: true,\n      }),\n    };\n  }\n\n  state: State = {\n    eventView: generatePerformanceEventView(this.props.location, this.props.projects, {\n      isTrends: true,\n    }),\n    error: undefined,\n  };\n\n  getDocumentTitle(): string {\n    return [t('Trends'), t('Performance')].join(' - ');\n  }\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  renderContent() {\n    const {organization, location, projects} = this.props;\n    const {eventView} = this.state;\n    return (\n      <TrendsContent\n        organization={organization}\n        location={location}\n        eventView={eventView}\n        projects={projects}\n      />\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <StyledPageContent>\n          <NoProjectMessage organization={organization}>\n            {this.renderContent()}\n          </NoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withProjects(withPageFilters(withApi(TrendsSummary))));\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n"],"names":["defaultTrendsSelectionDate","start","end","utc","period","DEFAULT_TRENDS_STATS_PERIOD","TrendsContent","Component","searchQuery","location","this","props","cursors","resetCursors","browserHistory","pathname","query","String","trim","undefined","error","setState","field","organization","offsets","Object","values","TrendChangeType","forEach","trendChangeType","queryKey","getSelectedQueryKey","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","function_name","previousTrendFunction","getCurrentTrendFunction","trendFunction","label","parameter_name","trendParameter","renderError","state","type","showIcon","getPerformanceLink","newQuery","decodeScalar","conditions","MutableSearch","removeFilter","formatString","getPerformanceLandingUrl","render","eventView","projects","trendView","clone","modifyTrendsViewDefaultPeriod","fields","generateAggregateFields","currentTrendFunction","currentTrendParameter","getCurrentTrendParameter","project","getTransactionSearchQuery","defaultSelection","datetime","hideGlobalHeader","crumbs","to","t","fullWidth","DefaultTrends","FilterActions","condensed","alignDropdown","StyledSearchBar","searchSource","projectIds","onSearch","handleSearch","maxQueryLength","MAX_QUERY_LENGTH","buttonProps","prefix","TRENDS_FUNCTIONS","onSelect","handleTrendFunctionChange","isActive","TRENDS_PARAMETERS","handleParameterChange","ListContainer","setError","children","queryString","hasPushedDefaults","Fragment","setFilterValues","column","DEFAULT_MAX_DURATION","cursor","space","p","theme","breakpoints","small","xlarge","SearchBar","withPageFilters","TrendsSummary","generatePerformanceEventView","isTrends","nextProps","prevState","getDocumentTitle","join","renderContent","title","orgSlug","slug","StyledPageContent","withOrganization","withProjects","withApi","PageContent"],"sourceRoot":""}