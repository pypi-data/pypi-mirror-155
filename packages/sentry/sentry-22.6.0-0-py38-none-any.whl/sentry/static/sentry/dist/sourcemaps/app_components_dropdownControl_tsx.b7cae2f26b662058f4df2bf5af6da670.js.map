{"version":3,"file":"chunks/app_components_dropdownControl_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"grBAgFA,MAAMA,UAAwBC,EAAAA,UAM5BC,aAAaC,EAAiBC,GAC5B,MAAM,MACJC,EADI,OAEJC,EAFI,YAGJC,EAHI,mBAIJC,EAJI,SAKJC,EALI,SAMJC,EANI,UAOJC,GACEC,KAAKC,MAET,OAAIP,EACKA,EAAO,CAACH,OAAAA,EAAQC,cAAAA,IAGrBI,IAAuBL,GAEvB,QAAC,IAAD,CAASW,aAAW,EAACC,SAAS,MAAMC,MAAOR,EAA3C,UACE,QAACS,EAAD,CACER,SAAUA,KACNL,EAAcG,GAClBJ,OAAQA,EACR,eAAa,0BACbO,SAAUA,EACVQ,kBAAmBR,EACnBS,kBAAmBR,MAAAA,GAAAA,EAPrB,SASGN,OAOP,QAACY,EAAD,CACER,SAAUA,KACNL,EAAcG,GAClBJ,OAAQA,EACR,eAAa,0BACbO,SAAUA,EACVQ,kBAAmBR,EACnBS,kBAAmBR,MAAAA,GAAAA,EAPrB,SASGN,IAKPe,eAAejB,EAAiBkB,GAC9B,MAAM,SAACC,EAAD,WAAWC,EAAX,UAAuBC,EAAvB,eAAkCC,EAAlC,SAAkDhB,EAAlD,SAA4DC,GAChEE,KAAKC,MAEP,GAAwB,mBAAbS,EACT,OAAOA,EAAS,CAACnB,OAAAA,EAAQkB,aAAAA,IAG3B,MAAMK,EAAYH,EAAa,QAAU,OAEzC,OACE,QAACI,EAAD,IACMN,IACJZ,SAAUA,EACViB,UAAWA,EACXE,MAAOJ,EACPrB,OAAQA,EACRsB,eAAgBA,EAChBf,SAAUA,EACVmB,aAAW,EACX,eAAa,mBATf,SAWGP,IAKPQ,SACE,MAAM,iBAACC,EAAD,UAAmBC,EAAnB,UAA8BrB,GAAaC,KAAKC,MAEtD,OACE,QAACoB,EAAD,CAAWD,UAAWA,EAAWrB,UAAWA,MAAAA,GAAAA,EAA5C,UACE,QAAC,IAAD,CAAcoB,iBAAkBA,EAAhC,SACG,QAAC,OAAC5B,EAAD,aAASkB,EAAT,cAAuBjB,GAAxB,SACC,QAAC,EAAA8B,SAAD,WACGtB,KAAKV,aAAaC,EAAQC,GAC1BQ,KAAKQ,eAAejB,EAAQkB,YA1FrCrB,EAAAA,YAAAA,mB,OAAAA,EAAAA,eACgC,CAClC+B,kBAAkB,EAClBP,UAAW,SAgGf,MAAMS,GAAY,OAAO,MAAP,qBAAH,8DAIQE,GAAKA,EAAEC,MAAMC,YAAYC,OAJjC,YAKFH,GAAKA,EAAExB,WAAa,QALlB,MASTM,GAAuB,OAAOsB,EAAAA,EAAP,qBAAH,YACbJ,GAAKA,EAAEC,MAAMI,OAAOC,qBAAqBC,OAD5B,wBAKpBf,GAAU,OAAOgB,EAAAA,EAAP,qBAAH,YACAR,GAAMA,EAAEhC,OAAS,QAAU,QAD3B,kBAEKgC,GAAKA,EAAEC,MAAM9B,OAAO6B,EAAE1B,UAAY,QAAQmC,QAF/C,KAKPC,GAAe,OAAOC,EAAAA,EAAP,qBAAH,cACHX,GAAKA,EAAEC,MAAMW,gBADV,KAIlB","sources":["webpack:///./app/components/dropdownControl.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport DropdownBubble from 'sentry/components/dropdownBubble';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownMenu, {\n  GetActorPropsFn,\n  GetMenuPropsFn,\n} from 'sentry/components/dropdownMenu';\nimport MenuItem from 'sentry/components/menuItem';\nimport Tooltip from 'sentry/components/tooltip';\n\ntype ButtonPriority = React.ComponentProps<typeof DropdownButton>['priority'];\n\ntype DefaultProps = {\n  /**\n   * Should the menu contents always be rendered?  Defaults to true.\n   * Set to false to have menu contents removed from the DOM on close.\n   */\n  alwaysRenderMenu: boolean;\n  /**\n   * Width of the menu. Defaults to 100% of the button width.\n   */\n  menuWidth: string;\n};\n\ntype ChildrenArgs = {\n  getMenuProps: GetMenuPropsFn;\n  isOpen: boolean;\n};\n\ntype ButtonArgs = {\n  getActorProps: GetActorPropsFn;\n  isOpen: boolean;\n};\n\ntype Props = DefaultProps & {\n  children:\n    | ((args: ChildrenArgs) => React.ReactElement)\n    | React.ReactElement\n    | Array<React.ReactElement>;\n  /**\n   * Align the dropdown menu to the right. (Default aligns to left)\n   */\n  alignRight?: boolean;\n  /**\n   * This makes the dropdown menu blend (e.g. corners are not rounded) with its\n   * actor (opener) component\n   */\n  blendWithActor?: boolean;\n  /**\n   * A closure that returns a styled button. Function will get {isOpen, getActorProps}\n   * as arguments. Use this if you need to style/replace the dropdown button.\n   */\n  button?: (args: ButtonArgs) => React.ReactNode;\n  /**\n   * Props to pass to DropdownButton\n   */\n  buttonProps?: React.ComponentProps<typeof DropdownButton>;\n  /**\n   * Tooltip to show on button when dropdown isn't open\n   */\n  buttonTooltipTitle?: string | null;\n  className?: string;\n  detached?: boolean;\n  fullWidth?: boolean;\n\n  /**\n   * String or element for the button contents.\n   */\n  label?: NonNullable<React.ReactNode>;\n\n  priority?: ButtonPriority;\n};\n\n/*\n * A higher level dropdown component that helps with building complete dropdowns\n * including the button + menu options. Use the `button` or `label` prop to set\n * the button content and `children` to provide menu options.\n */\nclass DropdownControl extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    alwaysRenderMenu: true,\n    menuWidth: '100%',\n  };\n\n  renderButton(isOpen: boolean, getActorProps: GetActorPropsFn) {\n    const {\n      label,\n      button,\n      buttonProps,\n      buttonTooltipTitle,\n      priority,\n      detached,\n      fullWidth,\n    } = this.props;\n\n    if (button) {\n      return button({isOpen, getActorProps});\n    }\n\n    if (buttonTooltipTitle && !isOpen) {\n      return (\n        <Tooltip skipWrapper position=\"top\" title={buttonTooltipTitle}>\n          <StyledDropdownButton\n            priority={priority}\n            {...getActorProps(buttonProps)}\n            isOpen={isOpen}\n            data-test-id=\"dropdown-control-button\"\n            detached={detached}\n            hideBottomBorder={!detached}\n            rightAlignChevron={fullWidth ?? false}\n          >\n            {label}\n          </StyledDropdownButton>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <StyledDropdownButton\n        priority={priority}\n        {...getActorProps(buttonProps)}\n        isOpen={isOpen}\n        data-test-id=\"dropdown-control-button\"\n        detached={detached}\n        hideBottomBorder={!detached}\n        rightAlignChevron={fullWidth ?? false}\n      >\n        {label}\n      </StyledDropdownButton>\n    );\n  }\n\n  renderChildren(isOpen: boolean, getMenuProps: GetMenuPropsFn) {\n    const {children, alignRight, menuWidth, blendWithActor, priority, detached} =\n      this.props;\n\n    if (typeof children === 'function') {\n      return children({isOpen, getMenuProps});\n    }\n\n    const alignMenu = alignRight ? 'right' : 'left';\n\n    return (\n      <Content\n        {...getMenuProps()}\n        priority={priority}\n        alignMenu={alignMenu}\n        width={menuWidth}\n        isOpen={isOpen}\n        blendWithActor={blendWithActor}\n        detached={detached}\n        blendCorner\n        data-test-id=\"dropdown-control\"\n      >\n        {children}\n      </Content>\n    );\n  }\n\n  render() {\n    const {alwaysRenderMenu, className, fullWidth} = this.props;\n\n    return (\n      <Container className={className} fullWidth={fullWidth ?? false}>\n        <DropdownMenu alwaysRenderMenu={alwaysRenderMenu}>\n          {({isOpen, getMenuProps, getActorProps}) => (\n            <Fragment>\n              {this.renderButton(isOpen, getActorProps)}\n              {this.renderChildren(isOpen, getMenuProps)}\n            </Fragment>\n          )}\n        </DropdownMenu>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')<{fullWidth: boolean}>`\n  display: inline-block;\n  position: relative;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: ${p => p.fullWidth && '100%'};\n  }\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};\n  white-space: nowrap;\n`;\n\nconst Content = styled(DropdownBubble)<{isOpen: boolean; priority?: ButtonPriority}>`\n  display: ${p => (p.isOpen ? 'block' : 'none')};\n  border-color: ${p => p.theme.button[p.priority || 'form'].border};\n`;\n\nconst DropdownItem = styled(MenuItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default DropdownControl;\nexport {DropdownItem, Content};\n"],"names":["DropdownControl","Component","renderButton","isOpen","getActorProps","label","button","buttonProps","buttonTooltipTitle","priority","detached","fullWidth","this","props","skipWrapper","position","title","StyledDropdownButton","hideBottomBorder","rightAlignChevron","renderChildren","getMenuProps","children","alignRight","menuWidth","blendWithActor","alignMenu","Content","width","blendCorner","render","alwaysRenderMenu","className","Container","Fragment","p","theme","breakpoints","small","DropdownButton","zIndex","dropdownAutocomplete","actor","DropdownBubble","border","DropdownItem","MenuItem","fontSizeMedium"],"sourceRoot":""}