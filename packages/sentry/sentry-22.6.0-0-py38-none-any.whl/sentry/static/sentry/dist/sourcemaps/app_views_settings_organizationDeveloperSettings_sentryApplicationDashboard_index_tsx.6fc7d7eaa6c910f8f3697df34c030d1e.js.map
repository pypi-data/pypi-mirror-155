{"version":3,"file":"chunks/app_views_settings_organizationDeveloperSettings_sentryApplicationDashboard_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"6aAmBO,SAASA,EAAT,GAAsE,IAAnD,OAACC,EAAD,cAASC,KAAkBC,GAAwB,EAC3E,OACE,QAAC,IAAD,IACMA,EACJF,OAAQA,EAAOG,KAAI,QAAC,WAACC,EAAD,KAAaC,EAAb,UAAmBC,KAAcC,GAAlC,SACjBC,EAAAA,EAAAA,GAAW,IACNP,KACAM,EACHE,KAAML,EACNC,KAAMC,IAAaD,MAAAA,OAAJ,EAAIA,EAAMF,KAAI,QAAC,MAACO,EAAD,KAAQD,GAAT,QAAmB,CAACA,EAAMC,OACvDC,WAAW,EACXC,mBAAoB,EACpBC,kBAAmB,SAZbd,EAAAA,YAAAA,a,sPCbD,MAAMe,UAGXC,EAAAA,EACRC,WACE,MAAO,GAGTC,SACE,OACE,QAAC,IAAD,CAAqBC,MAAOC,KAAKH,WAAjC,SACGG,KAAKC,qBAXON,EAAAA,YAAAA,a,k3CCgBrB,MAAMO,GAAaC,EAAAA,EAAAA,GAAE,cAEfC,GAAYC,EAAAA,EAAAA,MAiBZC,EAAgBC,GAAAA,EAASC,IAG7B,IAAIC,EAA4B,GAChC,MAAMC,GAAsBF,EAAIG,OAAOC,UAAY,IAAIC,MACrDC,GAA4B,eAAjBA,EAAQC,OA+BrB,OA7BIL,IACFD,EAAkB,CAAC,yBAA0B,yBAvBlBC,CAAAA,IAC7B,MAAMM,EAAgBC,GACpBA,EAAOC,MAAKC,GAAwB,WAAfA,EAAMJ,MAAqB,QAASI,IAErDC,EACJJ,EAAaN,EAAmBW,OAAOC,kBACvCN,EAAaN,EAAmBW,OAAOE,iBAAmB,IAEtDC,EACJR,EAAaN,EAAmBe,KAAKH,kBACrCN,EAAaN,EAAmBe,KAAKF,iBAAmB,IAE1D,OAAOH,GAAsBI,GAYvBE,CAAsBhB,IACxBD,EAAgBkB,KAAK,6BAIV,CACbzB,KAEmB,aAAfM,EAAIoB,OACJ,CAAC,uBAAwB,wBACzB,MACApB,EAAIqB,OAAOC,SAAS,SAAW,CAAC,iBAAmB,MACnDtB,EAAIqB,OAAOC,SAAS,SACpB,CAAC,gBAAiB,iBAAkB,gBAAiB,kBACrD,MACAtB,EAAIuB,YACJ,CACE,wBACA,oBACA,wBACA,wBACA,wBAEF,MACDtB,MAMDuB,EAAe,IAA4B,IAA3B,KAACC,GAA0B,EAC3ClB,EAAiD,QAOrD,OANIkB,GAAQ,KAAOA,GAAQ,IACzBlB,EAAO,UACEkB,GAAQ,KAAOA,GAAQ,MAChClB,EAAO,YAIP,QAACmB,EAAD,WACE,QAACC,EAAD,CAAWpB,KAAMA,EAAjB,SAAiC,IAATkB,EAAa,UAAYA,OAVjDD,EAAAA,YAAAA,eAeN,MAAMI,EAAgB,QAAC,KAACC,EAAD,KAAOZ,GAAR,SACpBA,GACE,QAAC,IAAD,CAAca,KAAMb,EAApB,WACE,QAAC,IAAD,CAAUY,KAAMA,KAChB,QAACE,EAAD,CAAgBC,KAAK,aAGvB,QAAC,IAAD,CAAUH,KAAMA,EAAMI,OAAQrC,EAAY,yBAA2B,cAc1D,MAAMsC,UAAmB9C,EAAAA,EAA6B,+DACpD,IADoD,qCAqC1C+C,IACvB3C,KAAK4C,SACH,CACED,UAAAA,EACAE,YAAa,GAEf7C,KAAK8C,sBA3C0D,sCA+C1C,KACvB9C,KAAK4C,SACH,CACEG,YAAa/C,KAAKgD,MAAMD,WACxBF,YAAa,GAEf7C,KAAK8C,sBArD0D,8BAyDlD,KACf9C,KAAK4C,SAAS,CACZC,YAAa7C,KAAKgD,MAAMH,YAAc,QA3DyB,8BA+DlD,KACf7C,KAAK4C,SAAS,CACZC,YAAa7C,KAAKgD,MAAMH,YAAc,OA9DtCI,kBACF,OAjGiB,IAiGTjD,KAAKgD,MAAMH,YAAc,GAAoB7C,KAAKgD,MAAME,SAASC,OAGvEC,kBACF,OAAOpD,KAAKgD,MAAMH,YAAc,EAGlCQ,eACE,MAAM,KAACC,GAAQtD,KAAKjB,MAAMyB,IAEpB+C,EAAa,GAUnB,OATIvD,KAAKgD,QACHhD,KAAKgD,MAAML,YAAczC,IAC3BqD,EAAMZ,UAAY3C,KAAKgD,MAAML,WAE3B3C,KAAKgD,MAAMD,aACbQ,EAAMR,YAAa,IAIhB,CAAC,CAAC,WAAa,gBAAeO,cAAkB,CAACC,MAAAA,KAG1DC,kBACE,MAAO,IACFC,MAAMD,kBACTN,SAAU,GACVP,UAAWzC,EACX6C,YAAY,EACZF,YAAa,GAoCjBa,gBACE,OAAO1D,KAAK2D,aAGdA,aACE,MAAM,SAACT,EAAD,UAAWP,EAAX,WAAsBI,EAAtB,YAAkCF,GAAe7C,KAAKgD,OACtD,IAACxC,GAAOR,KAAKjB,MAEb6E,EAAkBV,EAASW,MA1KhB,GA2KfhB,EA3Ke,IA4KdA,EAAc,IAGjB,OACE,QAAC,EAAAiB,SAAD,YACE,wBAAK3D,EAAAA,EAAAA,GAAE,kBAEP,0BACE,uBACGA,EAAAA,EAAAA,GACC,kGAIJ,QAAC4D,EAAD,YACE,QAAC,KAAD,CACEC,MAAOrB,EACPsB,UAAU,QACVC,OAAQ,QAAC,OAACC,EAAD,cAASC,GAAV,SACN,QAACC,EAAD,IAA0BD,IAAiBD,OAAQA,EAAnD,SACGxB,KALP,SASGrC,EAAcE,GAAKxB,KAAI+B,IACtB,QAAC,KAAD,CAEEuD,SAAUtE,KAAKuE,sBACfC,SAAUzD,EACV0D,SAAU9B,IAAc5B,EAJ1B,SAMGA,GALIA,QAUX,QAAC2D,EAAD,CAAwBC,QAAS3E,KAAK4E,uBAAtC,UACE,QAACC,EAAD,YACE,QAAC,IAAD,CAAUC,QAAS/B,EAAYgC,SAAU,UACxC5E,EAAAA,EAAAA,GAAE,2BAMX,QAAC,KAAD,YACE,QAAC,KAAD,WACE,QAAC6E,EAAD,CAAaC,gBAAgC,aAAfzE,EAAIoB,OAAlC,WACE,yBAAMzB,EAAAA,EAAAA,GAAE,WACR,yBAAMA,EAAAA,EAAAA,GAAE,iBACQ,aAAfK,EAAIoB,SAAyB,yBAAMzB,EAAAA,EAAAA,GAAE,mBACtC,yBAAMA,EAAAA,EAAAA,GAAE,iBACR,yBAAMA,EAAAA,EAAAA,GAAE,sBAIVH,KAAKgD,MAAMkC,SAyBX,QAAC,IAAD,KAxBA,QAAC,IAAD,UACGtB,EAAgBT,OAAS,EACxBS,EAAgB5E,KAAI,CAACmG,EAASC,KAC5B,QAAC,KAAD,WACE,QAACJ,EAAD,CAAaC,gBAAgC,aAAfzE,EAAIoB,OAAlC,WACE,QAACQ,EAAD,CAAeC,KAAM8C,EAAQ9C,KAAMZ,KAAM0D,EAAQE,YACjD,QAACrD,EAAD,CAAcC,KAAMkD,EAAQG,eACZ,aAAf9E,EAAIoB,SACH,wBACGuD,EAAQI,aAAeJ,EAAQI,aAAajG,KAAO,QAGxD,wBAAM6F,EAAQxC,aACd,QAAC6C,EAAD,UAAcL,EAAQM,iBAVVL,MAelB,QAAC,IAAD,CAAcM,MAAM,QAAC,KAAD,CAAUlD,KAAK,OAAnC,UACGrC,EAAAA,EAAAA,GAAE,kDASb,QAACwF,EAAD,YACE,QAAC,KAAD,CACED,MAAM,QAAC,KAAD,CAAaE,UAAU,OAAOpD,KAAK,OACzCmC,QAAS3E,KAAK6F,eACdC,UAAW9F,KAAKoD,YAChB,cAAYjD,EAAAA,EAAAA,GAAE,oBAEhB,QAAC,KAAD,CACEuF,MAAM,QAAC,KAAD,CAAaE,UAAU,QAAQpD,KAAK,OAC1CmC,QAAS3E,KAAK+F,eACdD,UAAW9F,KAAKiD,YAChB,cAAY9C,EAAAA,EAAAA,GAAE,sBAQ1B,MAAM6E,GAAc,OAAO,MAAP,qBAAH,iDAEoBgB,GAAMA,EAAEf,gBAAkB,MAAQ,IAFtD,6BAGIgB,EAAAA,EAAAA,GAAM,KAHV,mCAQXT,GAAc,OAAO,MAAP,qBAAH,iDAIXG,GAAoB,OAAO,MAAP,qBAAH,gPAiBjB5B,GAAoB,OAAO,MAAP,qBAAH,mDAGHkC,EAAAA,EAAAA,GAAM,GAHH,KAMjBpB,GAAqB,OAAO,MAAP,qBAAH,mBAERoB,EAAAA,EAAAA,GAAM,GAFE,0CASlB5B,GAAuB,OAAO6B,EAAAA,EAAP,qBAAH,YACbF,GAAKA,EAAEG,MAAMC,OAAOC,OAAS,GADhB,+EAQpB3B,GAAyB,OAAO4B,EAAAA,GAAP,qBAAH,gGAMtB/D,GAAiB,OAAOgE,EAAAA,GAAP,qBAAH,0BAETP,GAAKA,EAAEG,MAAMK,SAFJ,KAKdtE,GAAO,OAAO,MAAP,qBAAH,YACG+D,EAAAA,EAAAA,GAAM,IADT,KAIJ9D,GAAY,OAAOsE,EAAAA,EAAP,qBAAH,YACFR,EAAAA,EAAAA,GAAM,IADJ,yBC3UA,MAAMS,UAAmC/G,EAAAA,EACtD0D,eACE,MAAM,QAACsD,GAAW3G,KAAKjB,MAAM6H,OAGvBC,EAAMC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KACxCC,EAAkB,OAExB,MAAO,CACL,CACE,QACC,gBAAeP,WAChB,CAACpD,MAAO,CAAC4D,MAAON,EAAMK,EAAiBE,MAAOP,KAGhD,CACE,eACC,gBAAeF,iBAChB,CAACpD,MAAO,CAAC4D,MAAON,EAAMK,EAAiBE,MAAOP,KAEhD,CAAC,MAAQ,gBAAeF,OAI5B9G,WACE,OAAOM,EAAAA,EAAAA,GAAE,yBAGXkH,oBACE,MAAM,IAAC7G,EAAD,MAAM8G,GAAStH,KAAKgD,OACpB,gBAACuE,EAAD,cAAkBC,GAAiBF,EACzC,OACE,QAAC,EAAAxD,SAAD,YACE,wBAAK3D,EAAAA,EAAAA,GAAE,sCACP,QAACsH,EAAD,WACGjH,EAAIkH,eACH,QAACC,EAAD,YACE,QAACC,EAAD,WAAczH,EAAAA,EAAAA,GAAE,qBAChB,QAAC,IAAD,CAAU0H,UAAQ,EAACxF,KAAM7B,EAAIkH,mBAE7B,MACJ,QAACC,EAAD,YACE,QAACC,EAAD,WAAczH,EAAAA,EAAAA,GAAE,qBAChB,sBAAIqH,QAEN,QAACG,EAAD,YACE,QAACC,EAAD,WAAczH,EAAAA,EAAAA,GAAE,uBAChB,sBAAIoH,UAGPvH,KAAK8H,yBAKZA,sBACE,MAAM,aAACC,EAAD,eAAeC,GAAkBhI,KAAKgD,MAAMsE,MAE5CW,EAAgB,CACpB/I,KAAM6I,EAAa/I,KAAIkJ,IAAS,CAC9B5I,KAAiB,IAAX4I,EAAM,GACZ3I,MAAO2I,EAAM,OAEfjJ,YAAYkB,EAAAA,EAAAA,GAAE,cAEVgI,EAAkB,CACtBjJ,KAAM8I,EAAehJ,KAAIkJ,IAAS,CAChC5I,KAAiB,IAAX4I,EAAM,GACZ3I,MAAO2I,EAAM,OAEfjJ,YAAYkB,EAAAA,EAAAA,GAAE,gBAGhB,OACE,QAAC,KAAD,YACE,QAAC,KAAD,WAAcA,EAAAA,EAAAA,GAAE,sDAChB,QAACiI,EAAD,WACE,QAAC,IAAD,CACEvJ,OAAQ,CAACoJ,EAAeE,GACxBE,OAAQ,IACRC,SAAO,EACPC,iBAAe,EACfC,OAAQ,CACNC,MAAM,EACNC,OAAQ,aACRxJ,KAAM,CAAC,YAAa,eACpByJ,UAAW,IAEbC,MAAO,CAAC7H,KAAM,QAAS8H,YAAa,EAAGC,IAAK,WAC5CC,MAAO,CAAChI,KAAM,QACdiI,KAAM,CAACC,MAAMhD,EAAAA,EAAAA,GAAM,GAAIiD,OAAOjD,EAAAA,EAAAA,GAAM,WAO9CkD,yBACE,MAAM,MAACC,GAASpJ,KAAKgD,MAAMqG,cACrB,QAAC1C,EAAD,MAAU2C,GAAStJ,KAAKjB,MAAM6H,OAEpC,OACE,QAAC,KAAD,YACE,QAAC,KAAD,WAAczG,EAAAA,EAAAA,GAAE,wBAChB,QAAC,IAAD,WACE,QAACoJ,EAAD,CAAmBrK,KAAM,CAACsK,MAAOJ,QAGnC,QAAC,KAAD,WACE,QAACK,EAAD,YACGtJ,EAAAA,EAAAA,GAAE,yDACH,QAAC,IAAD,CAAMuJ,GAAK,gBAAe/C,sBAA1B,UACGxG,EAAAA,EAAAA,GAAE,iCAEJA,EAAAA,EAAAA,GAAE,uDACH,QAAC,IAAD,CAAMuJ,GAAK,aAAYJ,kBAAvB,UAA+CnJ,EAAAA,EAAAA,GAAE,+BAO3DwJ,8BACE,MAAM,sBAACC,GAAyB5J,KAAKgD,MAAMqG,aACrCQ,EAA+B,CACnC,mBAAmB1J,EAAAA,EAAAA,GACjB,kEAEF,cAAcA,EAAAA,EAAAA,GAAE,gEAGlB,OACE,QAAC,KAAD,YACE,QAAC,KAAD,WAAcA,EAAAA,EAAAA,GAAE,6BAEhB,QAAC,IAAD,WACE,QAACoJ,EAAD,CAAmBrK,KAAM0K,OAG3B,QAAC,KAAD,WACE,QAACH,EAAD,UACGK,OAAOC,KAAKH,GAAuB5K,KAClC,CAACgL,EAAW5E,IACVyE,EAA6BG,KAC3B,QAAC,EAAAlG,SAAD,YACE,2BAAU,GAAEkG,QACXH,EAA6BG,IAC9B,mBAHa5E,YAa/BzB,aACE,MAAM,IAACnD,GAAOR,KAAKgD,MAEnB,OACE,0BACE,QAAC,IAAD,CAAoBjD,MAAQ,IAAEI,EAAAA,EAAAA,GAAE,8BAA8BK,EAAIlB,SAClD,cAAfkB,EAAIoB,QAA0B5B,KAAKqH,oBACpB,cAAf7G,EAAIoB,QAA0B5B,KAAKmJ,yBACnC3I,EAAIG,OAAOC,UAAYZ,KAAK2J,+BAC7B,QAACjH,EAAD,CAAYlC,IAAKA,QAWzB,MAAM+I,EAAoB,IAAoC,IAAnC,KAACrK,GAAkC,EAC5D,MAAM+K,EAA+CH,OAAOC,KAAK7K,GAAMF,KACpEkL,IAKQ,CACLjL,WAAYiL,EACZhL,KANiBA,EAAKgL,GAAKlL,KAAIkJ,IAAS,CACxC3I,MAAO2I,EAAM,GACb5I,KAAiB,IAAX4I,EAAM,WASlB,OACE,QAACE,EAAD,WACE,QAAC,IAAD,CACEG,iBAAe,EACf1J,OAAQoL,EACRjB,KAAM,CAACC,MAAMhD,EAAAA,EAAAA,GAAM,GAAIiD,OAAOjD,EAAAA,EAAAA,GAAM,IACpCuC,OAAQ,CACNC,MAAM,EACNC,OAAQ,aACRxJ,KAAM4K,OAAOC,KAAK7K,SAvBtBqK,EAAAA,YAAAA,oBA8BN,MAAM9B,GAAM,OAAO,MAAP,sBAAH,sCAIHE,GAAe,OAAO,MAAP,sBAAH,iBACA1B,EAAAA,EAAAA,GAAM,GADN,KAGZ2B,GAAc,OAAO,KAAP,sBAAH,kBACE3B,EAAAA,EAAAA,GAAM,GADR,mDAIND,GAAKA,EAAEG,MAAMK,SAJP,KAOXiD,GAAe,OAAO,MAAP,sBAAH,YACLxD,EAAAA,EAAAA,GAAM,KADD,KAIZmC,GAAe,OAAO,MAAP,sBAAH,gBACDnC,EAAAA,EAAAA,GAAM,GADL","sources":["webpack:///./app/components/charts/lineChart.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx"],"sourcesContent":["import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport LineSeries from './series/lineSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type LineChartSeries = Series &\n  Omit<LineSeriesOption, 'data' | 'name'> & {\n    dataArray?: LineSeriesOption['data'];\n  };\n\nexport interface LineChartProps extends Omit<ChartProps, 'series'> {\n  series: LineChartSeries[];\n  seriesOptions?: LineSeriesOption;\n}\n\nexport function LineChart({series, seriesOptions, ...props}: LineChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      series={series.map(({seriesName, data, dataArray, ...options}) =>\n        LineSeries({\n          ...seriesOptions,\n          ...options,\n          name: seriesName,\n          data: dataArray || data?.map(({value, name}) => [name, value]),\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n        })\n      )}\n    />\n  );\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment-timezone';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport Checkbox from 'sentry/components/checkbox';\nimport DateTime from 'sentry/components/dateTime';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownControl, {DropdownItem} from 'sentry/components/dropdownControl';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport {IconChevron, IconFlag, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {SentryApp, SentryAppSchemaIssueLink, SentryAppWebhookRequest} from 'sentry/types';\nimport {shouldUse24Hours} from 'sentry/utils/dates';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\nconst ALL_EVENTS = t('All Events');\nconst MAX_PER_PAGE = 10;\nconst is24Hours = shouldUse24Hours();\n\nconst componentHasSelectUri = (issueLinkComponent: SentryAppSchemaIssueLink): boolean => {\n  const hasSelectUri = (fields: any[]): boolean =>\n    fields.some(field => field.type === 'select' && 'uri' in field);\n\n  const createHasSelectUri =\n    hasSelectUri(issueLinkComponent.create.required_fields) ||\n    hasSelectUri(issueLinkComponent.create.optional_fields || []);\n\n  const linkHasSelectUri =\n    hasSelectUri(issueLinkComponent.link.required_fields) ||\n    hasSelectUri(issueLinkComponent.link.optional_fields || []);\n\n  return createHasSelectUri || linkHasSelectUri;\n};\n\nconst getEventTypes = memoize((app: SentryApp) => {\n  // TODO(nola): ideally this would be kept in sync with EXTENDED_VALID_EVENTS on the backend\n\n  let issueLinkEvents: string[] = [];\n  const issueLinkComponent = (app.schema.elements || []).find(\n    element => element.type === 'issue-link'\n  );\n  if (issueLinkComponent) {\n    issueLinkEvents = ['external_issue.created', 'external_issue.linked'];\n    if (componentHasSelectUri(issueLinkComponent as SentryAppSchemaIssueLink)) {\n      issueLinkEvents.push('select_options.requested');\n    }\n  }\n\n  const events = [\n    ALL_EVENTS,\n    // Internal apps don't have installation webhooks\n    ...(app.status !== 'internal'\n      ? ['installation.created', 'installation.deleted']\n      : []),\n    ...(app.events.includes('error') ? ['error.created'] : []),\n    ...(app.events.includes('issue')\n      ? ['issue.created', 'issue.resolved', 'issue.ignored', 'issue.assigned']\n      : []),\n    ...(app.isAlertable\n      ? [\n          'event_alert.triggered',\n          'metric_alert.open',\n          'metric_alert.resolved',\n          'metric_alert.critical',\n          'metric_alert.warning',\n        ]\n      : []),\n    ...issueLinkEvents,\n  ];\n\n  return events;\n});\n\nconst ResponseCode = ({code}: {code: number}) => {\n  let type: React.ComponentProps<typeof Tag>['type'] = 'error';\n  if (code <= 399 && code >= 300) {\n    type = 'warning';\n  } else if (code <= 299 && code >= 100) {\n    type = 'success';\n  }\n\n  return (\n    <Tags>\n      <StyledTag type={type}>{code === 0 ? 'timeout' : code}</StyledTag>\n    </Tags>\n  );\n};\n\nconst TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string}) =>\n  link ? (\n    <ExternalLink href={link}>\n      <DateTime date={date} />\n      <StyledIconOpen size=\"12px\" />\n    </ExternalLink>\n  ) : (\n    <DateTime date={date} format={is24Hours ? 'MMM D, YYYY HH:mm:ss z' : 'll LTS z'} />\n  );\n\ntype Props = AsyncComponent['props'] & {\n  app: SentryApp;\n};\n\ntype State = AsyncComponent['state'] & {\n  currentPage: number;\n  errorsOnly: boolean;\n  eventType: string;\n  requests: SentryAppWebhookRequest[];\n};\n\nexport default class RequestLog extends AsyncComponent<Props, State> {\n  shouldReload = true;\n\n  get hasNextPage() {\n    return (this.state.currentPage + 1) * MAX_PER_PAGE < this.state.requests.length;\n  }\n\n  get hasPrevPage() {\n    return this.state.currentPage > 0;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {slug} = this.props.app;\n\n    const query: any = {};\n    if (this.state) {\n      if (this.state.eventType !== ALL_EVENTS) {\n        query.eventType = this.state.eventType;\n      }\n      if (this.state.errorsOnly) {\n        query.errorsOnly = true;\n      }\n    }\n\n    return [['requests', `/sentry-apps/${slug}/requests/`, {query}]];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      requests: [],\n      eventType: ALL_EVENTS,\n      errorsOnly: false,\n      currentPage: 0,\n    };\n  }\n\n  handleChangeEventType = (eventType: string) => {\n    this.setState(\n      {\n        eventType,\n        currentPage: 0,\n      },\n      this.remountComponent\n    );\n  };\n\n  handleChangeErrorsOnly = () => {\n    this.setState(\n      {\n        errorsOnly: !this.state.errorsOnly,\n        currentPage: 0,\n      },\n      this.remountComponent\n    );\n  };\n\n  handleNextPage = () => {\n    this.setState({\n      currentPage: this.state.currentPage + 1,\n    });\n  };\n\n  handlePrevPage = () => {\n    this.setState({\n      currentPage: this.state.currentPage - 1,\n    });\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {requests, eventType, errorsOnly, currentPage} = this.state;\n    const {app} = this.props;\n\n    const currentRequests = requests.slice(\n      currentPage * MAX_PER_PAGE,\n      (currentPage + 1) * MAX_PER_PAGE\n    );\n\n    return (\n      <Fragment>\n        <h5>{t('Request Log')}</h5>\n\n        <div>\n          <p>\n            {t(\n              'This log shows the status of any outgoing webhook requests from Sentry to your integration.'\n            )}\n          </p>\n\n          <RequestLogFilters>\n            <DropdownControl\n              label={eventType}\n              menuWidth=\"220px\"\n              button={({isOpen, getActorProps}) => (\n                <StyledDropdownButton {...getActorProps()} isOpen={isOpen}>\n                  {eventType}\n                </StyledDropdownButton>\n              )}\n            >\n              {getEventTypes(app).map(type => (\n                <DropdownItem\n                  key={type}\n                  onSelect={this.handleChangeEventType}\n                  eventKey={type}\n                  isActive={eventType === type}\n                >\n                  {type}\n                </DropdownItem>\n              ))}\n            </DropdownControl>\n\n            <StyledErrorsOnlyButton onClick={this.handleChangeErrorsOnly}>\n              <ErrorsOnlyCheckbox>\n                <Checkbox checked={errorsOnly} onChange={() => {}} />\n                {t('Errors Only')}\n              </ErrorsOnlyCheckbox>\n            </StyledErrorsOnlyButton>\n          </RequestLogFilters>\n        </div>\n\n        <Panel>\n          <PanelHeader>\n            <TableLayout hasOrganization={app.status !== 'internal'}>\n              <div>{t('Time')}</div>\n              <div>{t('Status Code')}</div>\n              {app.status !== 'internal' && <div>{t('Organization')}</div>}\n              <div>{t('Event Type')}</div>\n              <div>{t('Webhook URL')}</div>\n            </TableLayout>\n          </PanelHeader>\n\n          {!this.state.loading ? (\n            <PanelBody>\n              {currentRequests.length > 0 ? (\n                currentRequests.map((request, idx) => (\n                  <PanelItem key={idx}>\n                    <TableLayout hasOrganization={app.status !== 'internal'}>\n                      <TimestampLink date={request.date} link={request.errorUrl} />\n                      <ResponseCode code={request.responseCode} />\n                      {app.status !== 'internal' && (\n                        <div>\n                          {request.organization ? request.organization.name : null}\n                        </div>\n                      )}\n                      <div>{request.eventType}</div>\n                      <OverflowBox>{request.webhookUrl}</OverflowBox>\n                    </TableLayout>\n                  </PanelItem>\n                ))\n              ) : (\n                <EmptyMessage icon={<IconFlag size=\"xl\" />}>\n                  {t('No requests found in the last 30 days.')}\n                </EmptyMessage>\n              )}\n            </PanelBody>\n          ) : (\n            <LoadingIndicator />\n          )}\n        </Panel>\n\n        <PaginationButtons>\n          <Button\n            icon={<IconChevron direction=\"left\" size=\"sm\" />}\n            onClick={this.handlePrevPage}\n            disabled={!this.hasPrevPage}\n            aria-label={t('Previous page')}\n          />\n          <Button\n            icon={<IconChevron direction=\"right\" size=\"sm\" />}\n            onClick={this.handleNextPage}\n            disabled={!this.hasNextPage}\n            aria-label={t('Next page')}\n          />\n        </PaginationButtons>\n      </Fragment>\n    );\n  }\n}\n\nconst TableLayout = styled('div')<{hasOrganization: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr 0.5fr ${p => (p.hasOrganization ? '1fr' : '')} 1fr 1fr;\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst OverflowBox = styled('div')`\n  word-break: break-word;\n`;\n\nconst PaginationButtons = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n\n  > :first-child {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n\n  > :nth-child(2) {\n    margin-left: -1px;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n`;\n\nconst RequestLogFilters = styled('div')`\n  display: flex;\n  align-items: center;\n  padding-bottom: ${space(1)};\n`;\n\nconst ErrorsOnlyCheckbox = styled('div')`\n  input {\n    margin: 0 ${space(1)} 0 0;\n  }\n\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  z-index: ${p => p.theme.zIndex.header - 1};\n  white-space: nowrap;\n\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n`;\n\nconst StyledErrorsOnlyButton = styled(Button)`\n  margin-left: -1px;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n\nconst StyledIconOpen = styled(IconOpen)`\n  margin-left: 6px;\n  color: ${p => p.theme.subText};\n`;\n\nconst Tags = styled('div')`\n  margin: -${space(0.5)};\n`;\n\nconst StyledTag = styled(Tag)`\n  padding: ${space(0.5)};\n  display: inline-flex;\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {LineChart, LineChartSeries} from 'sentry/components/charts/lineChart';\nimport DateTime from 'sentry/components/dateTime';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelBody, PanelFooter, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {SentryApp} from 'sentry/types';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport RequestLog from './requestLog';\n\ntype Props = RouteComponentProps<{appSlug: string; orgId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  app: SentryApp;\n  interactions: {\n    componentInteractions: {\n      [key: string]: [number, number][];\n    };\n    views: [number, number][];\n  };\n  stats: {\n    installStats: [number, number][];\n    totalInstalls: number;\n    totalUninstalls: number;\n    uninstallStats: [number, number][];\n  };\n};\n\nexport default class SentryApplicationDashboard extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {appSlug} = this.props.params;\n\n    // Default time range for now: 90 days ago to now\n    const now = Math.floor(new Date().getTime() / 1000);\n    const ninety_days_ago = 3600 * 24 * 90;\n\n    return [\n      [\n        'stats',\n        `/sentry-apps/${appSlug}/stats/`,\n        {query: {since: now - ninety_days_ago, until: now}},\n      ],\n\n      [\n        'interactions',\n        `/sentry-apps/${appSlug}/interaction/`,\n        {query: {since: now - ninety_days_ago, until: now}},\n      ],\n      ['app', `/sentry-apps/${appSlug}/`],\n    ];\n  }\n\n  getTitle() {\n    return t('Integration Dashboard');\n  }\n\n  renderInstallData() {\n    const {app, stats} = this.state;\n    const {totalUninstalls, totalInstalls} = stats;\n    return (\n      <Fragment>\n        <h5>{t('Installation & Interaction Data')}</h5>\n        <Row>\n          {app.datePublished ? (\n            <StatsSection>\n              <StatsHeader>{t('Date published')}</StatsHeader>\n              <DateTime dateOnly date={app.datePublished} />\n            </StatsSection>\n          ) : null}\n          <StatsSection>\n            <StatsHeader>{t('Total installs')}</StatsHeader>\n            <p>{totalInstalls}</p>\n          </StatsSection>\n          <StatsSection>\n            <StatsHeader>{t('Total uninstalls')}</StatsHeader>\n            <p>{totalUninstalls}</p>\n          </StatsSection>\n        </Row>\n        {this.renderInstallCharts()}\n      </Fragment>\n    );\n  }\n\n  renderInstallCharts() {\n    const {installStats, uninstallStats} = this.state.stats;\n\n    const installSeries = {\n      data: installStats.map(point => ({\n        name: point[0] * 1000,\n        value: point[1],\n      })),\n      seriesName: t('installed'),\n    };\n    const uninstallSeries = {\n      data: uninstallStats.map(point => ({\n        name: point[0] * 1000,\n        value: point[1],\n      })),\n      seriesName: t('uninstalled'),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Installations/Uninstallations over Last 90 Days')}</PanelHeader>\n        <ChartWrapper>\n          <BarChart\n            series={[installSeries, uninstallSeries]}\n            height={150}\n            stacked\n            isGroupedByDate\n            legend={{\n              show: true,\n              orient: 'horizontal',\n              data: ['installed', 'uninstalled'],\n              itemWidth: 15,\n            }}\n            yAxis={{type: 'value', minInterval: 1, max: 'dataMax'}}\n            xAxis={{type: 'time'}}\n            grid={{left: space(4), right: space(4)}}\n          />\n        </ChartWrapper>\n      </Panel>\n    );\n  }\n\n  renderIntegrationViews() {\n    const {views} = this.state.interactions;\n    const {appSlug, orgId} = this.props.params;\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Integration Views')}</PanelHeader>\n        <PanelBody>\n          <InteractionsChart data={{Views: views}} />\n        </PanelBody>\n\n        <PanelFooter>\n          <StyledFooter>\n            {t('Integration views are measured through views on the ')}\n            <Link to={`/sentry-apps/${appSlug}/external-install/`}>\n              {t('external installation page')}\n            </Link>\n            {t(' and views on the Learn More/Install modal on the ')}\n            <Link to={`/settings/${orgId}/integrations/`}>{t('integrations page')}</Link>\n          </StyledFooter>\n        </PanelFooter>\n      </Panel>\n    );\n  }\n\n  renderComponentInteractions() {\n    const {componentInteractions} = this.state.interactions;\n    const componentInteractionsDetails = {\n      'stacktrace-link': t(\n        'Each link click or context menu open counts as one interaction'\n      ),\n      'issue-link': t('Each open of the issue link modal counts as one interaction'),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Component Interactions')}</PanelHeader>\n\n        <PanelBody>\n          <InteractionsChart data={componentInteractions} />\n        </PanelBody>\n\n        <PanelFooter>\n          <StyledFooter>\n            {Object.keys(componentInteractions).map(\n              (component, idx) =>\n                componentInteractionsDetails[component] && (\n                  <Fragment key={idx}>\n                    <strong>{`${component}: `}</strong>\n                    {componentInteractionsDetails[component]}\n                    <br />\n                  </Fragment>\n                )\n            )}\n          </StyledFooter>\n        </PanelFooter>\n      </Panel>\n    );\n  }\n\n  renderBody() {\n    const {app} = this.state;\n\n    return (\n      <div>\n        <SettingsPageHeader title={`${t('Integration Dashboard')} - ${app.name}`} />\n        {app.status === 'published' && this.renderInstallData()}\n        {app.status === 'published' && this.renderIntegrationViews()}\n        {app.schema.elements && this.renderComponentInteractions()}\n        <RequestLog app={app} />\n      </div>\n    );\n  }\n}\n\ntype InteractionsChartProps = {\n  data: {\n    [key: string]: [number, number][];\n  };\n};\nconst InteractionsChart = ({data}: InteractionsChartProps) => {\n  const elementInteractionsSeries: LineChartSeries[] = Object.keys(data).map(\n    (key: string) => {\n      const seriesData = data[key].map(point => ({\n        value: point[1],\n        name: point[0] * 1000,\n      }));\n      return {\n        seriesName: key,\n        data: seriesData,\n      };\n    }\n  );\n\n  return (\n    <ChartWrapper>\n      <LineChart\n        isGroupedByDate\n        series={elementInteractionsSeries}\n        grid={{left: space(4), right: space(4)}}\n        legend={{\n          show: true,\n          orient: 'horizontal',\n          data: Object.keys(data),\n        }}\n      />\n    </ChartWrapper>\n  );\n};\n\nconst Row = styled('div')`\n  display: flex;\n`;\n\nconst StatsSection = styled('div')`\n  margin-right: ${space(4)};\n`;\nconst StatsHeader = styled('h6')`\n  margin-bottom: ${space(1)};\n  font-size: 12px;\n  text-transform: uppercase;\n  color: ${p => p.theme.subText};\n`;\n\nconst StyledFooter = styled('div')`\n  padding: ${space(1.5)};\n`;\n\nconst ChartWrapper = styled('div')`\n  padding-top: ${space(3)};\n`;\n"],"names":["LineChart","series","seriesOptions","props","map","seriesName","data","dataArray","options","LineSeries","name","value","animation","animationThreshold","animationDuration","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ALL_EVENTS","t","is24Hours","shouldUse24Hours","getEventTypes","memoize","app","issueLinkEvents","issueLinkComponent","schema","elements","find","element","type","hasSelectUri","fields","some","field","createHasSelectUri","create","required_fields","optional_fields","linkHasSelectUri","link","componentHasSelectUri","push","status","events","includes","isAlertable","ResponseCode","code","Tags","StyledTag","TimestampLink","date","href","StyledIconOpen","size","format","RequestLog","eventType","setState","currentPage","remountComponent","errorsOnly","state","hasNextPage","requests","length","hasPrevPage","getEndpoints","slug","query","getDefaultState","super","renderLoading","renderBody","currentRequests","slice","Fragment","RequestLogFilters","label","menuWidth","button","isOpen","getActorProps","StyledDropdownButton","onSelect","handleChangeEventType","eventKey","isActive","StyledErrorsOnlyButton","onClick","handleChangeErrorsOnly","ErrorsOnlyCheckbox","checked","onChange","TableLayout","hasOrganization","loading","request","idx","errorUrl","responseCode","organization","OverflowBox","webhookUrl","icon","PaginationButtons","direction","handlePrevPage","disabled","handleNextPage","p","space","DropdownButton","theme","zIndex","header","Button","IconOpen","subText","Tag","SentryApplicationDashboard","appSlug","params","now","Math","floor","Date","getTime","ninety_days_ago","since","until","renderInstallData","stats","totalUninstalls","totalInstalls","Row","datePublished","StatsSection","StatsHeader","dateOnly","renderInstallCharts","installStats","uninstallStats","installSeries","point","uninstallSeries","ChartWrapper","height","stacked","isGroupedByDate","legend","show","orient","itemWidth","yAxis","minInterval","max","xAxis","grid","left","right","renderIntegrationViews","views","interactions","orgId","InteractionsChart","Views","StyledFooter","to","renderComponentInteractions","componentInteractions","componentInteractionsDetails","Object","keys","component","elementInteractionsSeries","key"],"sourceRoot":""}