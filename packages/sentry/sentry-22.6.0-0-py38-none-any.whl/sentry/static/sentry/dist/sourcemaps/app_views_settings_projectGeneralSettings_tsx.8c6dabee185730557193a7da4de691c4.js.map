{"version":3,"file":"chunks/app_views_settings_projectGeneralSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"msBAaO,MAAMA,EAAQ,wCAsBfC,EApB6B,MACjC,IAAIC,EAAI,EACR,MAAMC,EAAmB,GACzB,KAAOD,GAAK,KACVC,EAAOC,KAAKF,GAEVA,GADEA,EAAI,GACD,EACIA,EAAI,GACR,EACIA,EAAI,GACR,EACIA,EAAI,GACR,GAEA,GAGT,OAAOC,GAG0BE,GAE7BC,GAAsBC,EAAAA,EAAAA,GAC1B,iGAGWC,EAAgC,CAC3CC,KAAM,CACJA,KAAM,OACNC,KAAM,SACNC,UAAU,EACVC,OAAOL,EAAAA,EAAAA,GAAE,QACTM,aAAaN,EAAAA,EAAAA,GAAE,sBACfO,MAAMP,EAAAA,EAAAA,GAAE,2BACRQ,eAAgBC,EAAAA,EAChBC,QAAUC,IACD,CACLT,KAAMS,EAAKT,KACXU,KAAMD,EAAKT,OAIfW,YAAY,EACZC,qBAAsB,OACtBC,aAAaf,EAAAA,EAAAA,GAAE,gEAGjBgB,SAAU,CACRd,KAAM,WACNC,KAAM,SACNE,OAAOL,EAAAA,EAAAA,GAAE,YACTiB,QAAS,IACPC,EAAAA,EAAAA,KAAc,QAAC,GAACC,EAAD,KAAKjB,GAAN,QAAgB,CAC5BiB,GACA,QAACC,EAAD,YACE,QAACC,EAAD,CAAoBL,SAAUG,IAC7BjB,IAFmBiB,OAK1BZ,MAAMP,EAAAA,EAAAA,GAAE,yCACRsB,cAAcC,EAAAA,EAAAA,GAAa,CACzBC,UAAWC,IACT,MAAMC,EAAkBR,EAAAA,EAAAA,MAAe,QAAC,GAACC,GAAF,SAAUA,IAAOM,EAAOE,SAC/D,MAAQ,GAAED,MAAAA,OAAH,EAAGA,EAAiBxB,QAAQuB,EAAOE,YAKhDC,cAAe,CACb1B,KAAM,gBACNC,KAAM,SACNE,OAAOL,EAAAA,EAAAA,GAAE,kBACTM,aAAaN,EAAAA,EAAAA,GAAE,iBACfO,MAAMP,EAAAA,EAAAA,GAAE,wDAGV6B,WAAY,CACV3B,KAAM,aACNC,KAAM,QACN2B,cAAepC,EACfW,OAAOL,EAAAA,EAAAA,GAAE,gBACTO,MAAMP,EAAAA,EAAAA,GACJ,iFAEF+B,YAAaC,GAEC,KADZA,EAAMC,OAAOD,KAEJhC,EAAAA,EAAAA,GAAE,YAGPgC,EAAM,IAAMA,EAAM,IAAO,GAE3BA,GAAY,IACLE,EAAAA,EAAAA,IAAG,SAAU,UAAWF,KAG1BE,EAAAA,EAAAA,IAAG,UAAW,WAAYF,GAEnCnB,YAAY,EACZE,aAAaoB,EAAAA,EAAAA,IACX,0IAEA,CACEC,SAAS,yCAGbtB,qBAAsB,WAExBuB,eAAgB,CACdnC,KAAM,iBACNC,KAAM,SACNmC,WAAW,EACXC,UAAU,EACVC,QAAS,GACTC,KAAM,EACNnC,aAAaN,EAAAA,EAAAA,GAAE,sCACfK,OAAOL,EAAAA,EAAAA,GAAE,mBACTO,MAAMP,EAAAA,EAAAA,GAAE,4CACR0C,SAAUV,IAAOW,EAAAA,EAAAA,IAAuBX,GACxCY,SAAUZ,IAAOa,EAAAA,EAAAA,IAA2Bb,IAE9Cc,iBAAkB,CAChB5C,KAAM,mBACNC,KAAM,UAEN4C,SAAU,QAAC,aAACC,EAAD,KAAe9C,GAAhB,SAA2B8C,EAAa9C,IAClD+C,eAAgBlD,EAEhB6C,SAAU,CAACZ,EAAKkB,IAAUA,EAAMF,cAAgBE,EAAMF,aAAaE,EAAMhD,OAAS8B,EAClF3B,OAAOL,EAAAA,EAAAA,GAAE,qCACTO,MAAMP,EAAAA,EAAAA,GAAE,2EAEVmD,cAAe,CACbjD,KAAM,gBACNC,KAAM,SACNE,OAAOL,EAAAA,EAAAA,GAAE,kBACTO,MAAMP,EAAAA,EAAAA,GACJ,sGAEF4C,SAAUjB,IAASyB,EAAAA,EAAAA,GAAe,CAACzB,MAAAA,EAAO0B,MAAO,wBAEnDC,oBAAqB,CACnBpD,KAAM,sBACNC,KAAM,SACNG,aAAaN,EAAAA,EAAAA,GAAE,kBACfK,OAAOL,EAAAA,EAAAA,GAAE,yBACTO,MAAMP,EAAAA,EAAAA,GACJ,uGAGJuD,UAAW,CACTrD,KAAM,YACNC,KAAM,UACNE,OAAOL,EAAAA,EAAAA,GAAE,kBACTO,MAAMP,EAAAA,EAAAA,GAAE,4EAINoB,GAAkB,OAAO,MAAP,qBAAH,0DAIfC,GAAqB,OAAOmC,EAAAA,EAAP,qBAAH,iBACNC,EAAAA,EAAAA,GAAM,GADA,M,kKCpJT,SAASC,EACtBC,EACAC,GACQ,QACR,MAAM,OAACC,EAAD,OAASC,EAAT,SAAiBC,EAAjB,SAA2BC,GAAYJ,EACvCK,EAAQJ,EAAOK,KAAI,QAAC,KAACC,GAAF,SAAYA,GAAQ,MAC7C,IAAIC,EACAC,EAGc,iBAAPV,GACTU,EAAaR,EAAOS,QAAQX,GAAM,EAClCS,EAAgBG,GAAAA,CAAcN,EAAMO,MAAM,EAAGH,IAAaF,GAAoB,MAAZA,EAAK,MAEvEC,EAAgBG,GAAAA,CAAcN,GAAOE,GAAoB,MAAZA,EAAK,KAGpD,IAAIM,EAAYR,EAAMO,MAAMJ,EAAeC,QAEnB,IAAbL,IACTS,EAAYA,EAAUD,MAAM,EAAGR,IAGjC,MAAMU,EAAM,UAAGX,MAAAA,OAAH,EAAGA,EAAUW,cAAb,QAAuB,GAC7BC,EAAI,UAAGZ,MAAAA,OAAH,EAAGA,EAAUY,YAAb,QAAqB,GAEzBC,EAAa,GAAEH,EAAUI,KAAK,MACpB,iBAAPlB,EAAkB,GAAKA,IAC7Be,IAASC,IAEZ,OAAOG,EAAAA,EAAAA,GAAoBF,EAAWd,K,wDC/CxC,QAZA,SACEiB,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACR,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,I,oCCP5B,SAAS3E,EAAQ4E,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,G,kUCG1D,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,GAGTC,SACE,OACE,QAAC,IAAD,CAAqBC,MAAOC,KAAKH,WAAjC,SACGG,KAAKC,qBAXON,EAAAA,YAAAA,a,mRCCrB,MAAMO,EAAkB,QAAC,OAACC,EAAS,CAAC,oBAAqB9C,GAAjC,SACtB,QAAC,IAAD,CAAQ8C,OAAQA,EAAhB,SACG,QAAC,UAACC,GAAF,SACEA,IACC,QAAC,IAAD,CAAO9F,KAAK,aAAc+C,EAA1B,UACGlD,EAAAA,EAAAA,GACC,yGANN+F,EAAAA,YAAAA,kBAcN,W,u2CCoBA,MAAMG,UAA+BV,EAAAA,EAAwB,uDACf,KADe,yCAc/B,CAACrE,EAAYQ,KACvCkE,KAAKM,MAAMhF,GAAMQ,MAfwC,mCAkBrC,KACpB,MAAM,MAACyE,GAASP,KAAK3C,MAAMY,OACrBuC,EAAUR,KAAKS,MAAM3F,MAE3B4F,EAAAA,EAAAA,IAAyBH,GAEpBC,IAILG,EAAAA,EAAAA,IAAcX,KAAKY,IAAKL,EAAOC,GAASK,MAAK,KAE3CC,OAAO5C,SAAS6C,OAAO,QACtBC,EAAAA,EAAAA,GAAuB,iCA/B+B,qCAkCnCC,UACtB,MAAM,MAACV,GAASP,KAAK3C,MAAMY,OACrBuC,EAAUR,KAAKS,MAAM3F,KAC3B,GAAK0F,KAG2B,iBAArBR,KAAKM,MAAMY,OAAsBlB,KAAKM,MAAMY,MAAMC,OAAS,GAItE,UACQC,EAAAA,EAAAA,IAAgBpB,KAAKY,IAAKL,EAAOC,EAASR,KAAKM,MAAMY,OAE3DJ,OAAO5C,SAAS6C,OAAO,KACvB,MAAOM,GACHA,EAAIC,QAAU,MAChBN,EAAAA,EAAAA,GAAuB,6BAAvBA,CAAqDK,QAlDA,8BAuD1C,IAAM,IAAIE,IAAIvB,KAAK3C,MAAMF,aAAagD,QAAQqB,IAAI,mBApDnE3B,WACE,MAAM,UAAC4B,GAAazB,KAAK3C,MAAMY,OAC/B,OAAOyD,EAAAA,EAAAA,IAAcvH,EAAAA,EAAAA,GAAE,oBAAqBsH,GAAW,GAGzDE,eACE,MAAM,MAACpB,EAAD,UAAQkB,GAAazB,KAAK3C,MAAMY,OAEtC,MAAO,CAAC,CAAC,OAAS,aAAYsC,KAASkB,OA8CzCG,sBACE,MAAMpB,EAAUR,KAAKS,MAAM3F,KACrB+G,EAAiB7B,KAAK6B,kBACtB,WAACC,GAActB,EAErB,OACE,QAAC,IAAD,CACEhG,OAAOL,EAAAA,EAAAA,GAAE,kBACTO,MAAM4B,EAAAA,EAAAA,IACJ,wGACA,CACEkE,SAAS,2BAASA,EAAQzF,OAC1BgH,WAAW,mBANjB,WAUIF,IACA1H,EAAAA,EAAAA,GAAE,mEAEH2H,IACC3H,EAAAA,EAAAA,GACE,+EAGH0H,IAAmBC,IAClB,QAAC,IAAD,CACEE,UAAWhC,KAAKiC,oBAChBC,SAAS,SACTC,aAAahI,EAAAA,EAAAA,GAAE,kBACfiI,SACE,0BACE,QAAC,IAAD,WACE,4BACGjI,EAAAA,EAAAA,GAAE,iEAGP,QAAC,IAAD,WACGA,EAAAA,EAAAA,GAAE,yDAZX,UAiBE,yBACE,QAAC,KAAD,CAAQkI,UAAU,qBAAqB/H,KAAK,SAAS4H,SAAS,SAA9D,UACG/H,EAAAA,EAAAA,GAAE,2BASjBmI,wBACE,MAAM9B,EAAUR,KAAKS,MAAM3F,KACrB+G,EAAiB7B,KAAK6B,kBACtB,WAACC,GAActB,EAErB,OACE,QAAC,IAAD,CACEhG,OAAOL,EAAAA,EAAAA,GAAE,oBACTO,MAAM4B,EAAAA,EAAAA,IACJ,0GACA,CACEkE,SAAS,2BAASA,EAAQzF,OAC1BgH,WAAW,mBANjB,WAUIF,IACA1H,EAAAA,EAAAA,GAAE,qEAEH2H,IACC3H,EAAAA,EAAAA,GACE,mFAGH0H,IAAmBC,IAClB,QAAC,IAAD,CACEE,UAAWhC,KAAKuC,sBAChBL,SAAS,SACTC,aAAahI,EAAAA,EAAAA,GAAE,oBACfqI,cAAe,QAAC,QAACC,GAAF,SACb,0BACE,QAAC,IAAD,WACE,4BACGtI,EAAAA,EAAAA,GAAE,qEAGP,QAAC,IAAD,WACGA,EAAAA,EAAAA,GACC,uGAGJ,QAAC,KAAD,WACE,QAAC,IAAD,CACEuI,YAAU,EACVC,cAAe3C,KAAK4C,0BACpBC,SAAU,CAACC,EAAOC,EAAYC,EAAUC,KACtCA,EAAEC,kBACFT,KALJ,UAQE,QAAC,IAAD,CACEpI,KAAK,QACLG,OAAOL,EAAAA,EAAAA,GAAE,sBACTM,YAAY,oBACZF,UAAQ,EACRG,MAAMP,EAAAA,EAAAA,GACJ,sHA/Bd,UAuCE,yBACE,QAAC,KAAD,CAAQkI,UAAU,uBAAuB/H,KAAK,SAAS4H,SAAS,SAAhE,UACG/H,EAAAA,EAAAA,GAAE,6BASjBgJ,aAAa,MACX,MAAM,aAAChG,GAAgB6C,KAAK3C,MACtBmD,EAAUR,KAAKS,MAAM3F,MACrB,MAACyF,EAAD,UAAQkB,GAAazB,KAAK3C,MAAMY,OAChCmF,EAAY,aAAY7C,KAASkB,KACjCtB,EAAS,IAAIoB,IAAIpE,EAAagD,QAC9BkD,EAAgB,CACpBC,qBAAsB,CACpBnG,aAAAA,GAEFoG,SAAU,IAAIhC,IAAIpE,EAAaoG,UAC/BpD,OAAAA,EACAjD,UAAWiD,EAAOqB,IAAI,kBAElBgC,EAAOhD,EAAQiD,MAAMtC,OAAd,UAAuBX,EAAQiD,aAA/B,aAAuB,EAAgB,QAAKC,EAEzD,OACE,0BACE,QAAC,IAAD,CAAoB3D,OAAO5F,EAAAA,EAAAA,GAAE,uBAC7B,QAAC,IAAD,KAEA,QAAC,IAAD,CACEa,YAAU,EACV2I,WAAS,EACTC,YAAa,IACRpD,EACHgD,KAAAA,GAEFK,UAAU,MACVC,YAAaV,EACbW,gBAAiBC,IACfhE,KAAKiE,SAAS,CAACnJ,KAAMkJ,IACjBvC,IAAcuC,EAAKjJ,QACrBmJ,EAAAA,EAAAA,IAAkBzC,EAAWuC,EAAKjJ,MAElCiF,KAAK3C,MAAM8G,aAAaH,EAAKjJ,OAG/BqJ,EAAAA,EAAAA,cAA6BJ,IAjBjC,WAoBE,QAAC,IAAD,IACMX,EACJtD,OAAO5F,EAAAA,EAAAA,GAAE,mBACTC,OAAQ,CAACA,EAAAA,OAAAA,KAAaA,EAAAA,OAAAA,aAGxB,QAAC,IAAD,IACMiJ,EACJtD,OAAO5F,EAAAA,EAAAA,GAAE,SACTC,OAAQ,CAACA,EAAAA,OAAAA,kBAGX,QAAC,IAAD,IACMiJ,EACJtD,OAAO5F,EAAAA,EAAAA,GAAE,kBACTC,OAAQ,CAACA,EAAAA,OAAAA,eAGX,QAAC,IAAD,IACMiJ,EACJtD,OAAO5F,EAAAA,EAAAA,GAAE,mBACTC,OAAQ,CACNA,EAAAA,OAAAA,eACAA,EAAAA,OAAAA,iBACAA,EAAAA,OAAAA,cACAA,EAAAA,OAAAA,oBACAA,EAAAA,OAAAA,WAEFiK,aAAc,KACZ,QAAC,KAAD,CAAY/J,KAAK,OAAjB,UACE,QAAC,IAAD,CAAWgK,UAAQ,EAAnB,WACGhI,EAAAA,EAAAA,IACC,yHACA,CACEiI,MACE,aAAGC,KAAK,iDAAR,iCAKH,KACFlI,EAAAA,EAAAA,IACC,2EACA,CACEmI,QAAQ,oCACRC,SAAS,kDASvB,QAAC,KAAD,YACE,QAAC,KAAD,WAAcvK,EAAAA,EAAAA,GAAE,4BACf6F,KAAK4B,sBACL5B,KAAKsC,+BAWhB,MAAMqC,UAAwCC,EAAAA,UAA0B,kEAKpClB,IALoC,0BAMxDmB,EAAAA,EAAAA,QAAqB,IAAM7E,KAAK8E,yBAAoBpB,IALlEqB,uBACE/E,KAAKgF,cAMPF,mBACO9E,KAAKiF,aAGMJ,EAAAA,EAAAA,UAAwB7E,KAAKiF,cAM7CC,EAAAA,eAAAA,SACErH,EAAAA,EAAAA,GAAc,GAAI,IACbmC,KAAK3C,MACRY,OAAQ,IACH+B,KAAK3C,MAAMY,OACdwD,UAAWzB,KAAKiF,gBAMxBnF,SACE,OACE,QAACO,EAAD,CACE8D,aAAegB,GAAqBnF,KAAKiF,YAAcE,KACnDnF,KAAK3C,SAjCXsH,EAAAA,YAAAA,kCAuCN,SAAeS,EAAAA,EAAAA,GAAiBT","sources":["webpack:///./app/data/forms/projectGeneralSettings.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectGeneralSettings.tsx"],"sourcesContent":["import {createFilter} from 'react-select';\nimport styled from '@emotion/styled';\nimport {PlatformIcon} from 'platformicons';\n\nimport {Field} from 'sentry/components/forms/type';\nimport platforms from 'sentry/data/platforms';\nimport {t, tct, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'sentry/utils';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/';\n\nconst getResolveAgeAllowedValues = () => {\n  let i = 0;\n  const values: number[] = [];\n  while (i <= 720) {\n    values.push(i);\n    if (i < 12) {\n      i += 1;\n    } else if (i < 24) {\n      i += 3;\n    } else if (i < 36) {\n      i += 6;\n    } else if (i < 48) {\n      i += 12;\n    } else {\n      i += 24;\n    }\n  }\n  return values;\n};\n\nconst RESOLVE_AGE_ALLOWED_VALUES = getResolveAgeAllowedValues();\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\nexport const fields: Record<string, Field> = {\n  name: {\n    name: 'name',\n    type: 'string',\n    required: true,\n    label: t('Name'),\n    placeholder: t('my-awesome-project'),\n    help: t('A name for this project'),\n    transformInput: slugify,\n    getData: (data: {name?: string}) => {\n      return {\n        name: data.name,\n        slug: data.name,\n      };\n    },\n\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('You will be redirected to the new project slug after saving'),\n  },\n\n  platform: {\n    name: 'platform',\n    type: 'select',\n    label: t('Platform'),\n    choices: () =>\n      platforms.map(({id, name}) => [\n        id,\n        <PlatformWrapper key={id}>\n          <StyledPlatformIcon platform={id} />\n          {name}\n        </PlatformWrapper>,\n      ]),\n    help: t('The primary platform for this project'),\n    filterOption: createFilter({\n      stringify: option => {\n        const matchedPlatform = platforms.find(({id}) => id === option.value);\n        return `${matchedPlatform?.name} ${option.value}`;\n      },\n    }),\n  },\n\n  subjectPrefix: {\n    name: 'subjectPrefix',\n    type: 'string',\n    label: t('Subject Prefix'),\n    placeholder: t('e.g. [my-org]'),\n    help: t('Choose a custom prefix for emails from this project'),\n  },\n\n  resolveAge: {\n    name: 'resolveAge',\n    type: 'range',\n    allowedValues: RESOLVE_AGE_ALLOWED_VALUES,\n    label: t('Auto Resolve'),\n    help: t(\n      \"Automatically resolve an issue if it hasn't been seen for this amount of time\"\n    ),\n    formatLabel: val => {\n      val = Number(val);\n      if (val === 0) {\n        return t('Disabled');\n      }\n\n      if (val > 23 && val % 24 === 0) {\n        // Based on allowed values, val % 24 should always be true\n        val = val / 24;\n        return tn('%s day', '%s days', val);\n      }\n\n      return tn('%s hour', '%s hours', val);\n    },\n    saveOnBlur: false,\n    saveMessage: tct(\n      '[Caution]: Enabling auto resolve will immediately resolve anything that has ' +\n        'not been seen within this period of time. There is no undo!',\n      {\n        Caution: <strong>Caution</strong>,\n      }\n    ),\n    saveMessageAlertType: 'warning',\n  },\n  allowedDomains: {\n    name: 'allowedDomains',\n    type: 'string',\n    multiline: true,\n    autosize: true,\n    maxRows: 10,\n    rows: 1,\n    placeholder: t('https://example.com or example.com'),\n    label: t('Allowed Domains'),\n    help: t('Separate multiple entries with a newline'),\n    getValue: val => extractMultilineFields(val),\n    setValue: val => convertMultilineFieldValue(val),\n  },\n  scrapeJavaScript: {\n    name: 'scrapeJavaScript',\n    type: 'boolean',\n    // if this is off for the organization, it cannot be enabled for the project\n    disabled: ({organization, name}) => !organization[name],\n    disabledReason: ORG_DISABLED_REASON,\n    // `props` are the props given to FormField\n    setValue: (val, props) => props.organization && props.organization[props.name] && val,\n    label: t('Enable JavaScript source fetching'),\n    help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n  },\n  securityToken: {\n    name: 'securityToken',\n    type: 'string',\n    label: t('Security Token'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n    setValue: value => getDynamicText({value, fixed: '__SECURITY_TOKEN__'}),\n  },\n  securityTokenHeader: {\n    name: 'securityTokenHeader',\n    type: 'string',\n    placeholder: t('X-Sentry-Token'),\n    label: t('Security Token Header'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n  },\n  verifySSL: {\n    name: 'verifySSL',\n    type: 'boolean',\n    label: t('Verify TLS/SSL'),\n    help: t('Outbound requests will verify TLS (sometimes known as SSL) connections'),\n  },\n};\n\nconst PlatformWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {\n  changeProjectSlug,\n  removeProject,\n  transferProject,\n} from 'sentry/actionCreators/projects';\nimport ProjectActions from 'sentry/actions/projectActions';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Field from 'sentry/components/forms/field';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {FieldValue} from 'sentry/components/forms/model';\nimport TextField from 'sentry/components/forms/textField';\nimport {removePageFiltersStorage} from 'sentry/components/organizations/pageFilters/persistence';\nimport {Panel, PanelAlert, PanelHeader} from 'sentry/components/panels';\nimport {fields} from 'sentry/data/forms/projectGeneralSettings';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {Organization, Project} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n    onChangeSlug: (slug: string) => void;\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  data: Project;\n};\n\nclass ProjectGeneralSettings extends AsyncView<Props, State> {\n  private _form: Record<string, FieldValue> = {};\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Project Settings'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n\n    return [['data', `/projects/${orgId}/${projectId}/`]];\n  }\n\n  handleTransferFieldChange = (id: string, value: FieldValue) => {\n    this._form[id] = value;\n  };\n\n  handleRemoveProject = () => {\n    const {orgId} = this.props.params;\n    const project = this.state.data;\n\n    removePageFiltersStorage(orgId);\n\n    if (!project) {\n      return;\n    }\n\n    removeProject(this.api, orgId, project).then(() => {\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    }, handleXhrErrorResponse('Unable to remove project'));\n  };\n\n  handleTransferProject = async () => {\n    const {orgId} = this.props.params;\n    const project = this.state.data;\n    if (!project) {\n      return;\n    }\n    if (typeof this._form.email !== 'string' || this._form.email.length < 1) {\n      return;\n    }\n\n    try {\n      await transferProject(this.api, orgId, project, this._form.email);\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    } catch (err) {\n      if (err.status >= 500) {\n        handleXhrErrorResponse('Unable to transfer project')(err);\n      }\n    }\n  };\n\n  isProjectAdmin = () => new Set(this.props.organization.access).has('project:admin');\n\n  renderRemoveProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <Field\n        label={t('Remove Project')}\n        help={tct(\n          'Remove the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to remove this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be removed. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleRemoveProject}\n            priority=\"danger\"\n            confirmText={t('Remove project')}\n            message={\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Removing this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t('This will also remove all associated event data.')}\n                </TextBlock>\n              </div>\n            }\n          >\n            <div>\n              <Button className=\"ref-remove-project\" type=\"button\" priority=\"danger\">\n                {t('Remove Project')}\n              </Button>\n            </div>\n          </Confirm>\n        )}\n      </Field>\n    );\n  }\n\n  renderTransferProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <Field\n        label={t('Transfer Project')}\n        help={tct(\n          'Transfer the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to transfer this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be transferred. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleTransferProject}\n            priority=\"danger\"\n            confirmText={t('Transfer project')}\n            renderMessage={({confirm}) => (\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Transferring this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t(\n                    'Please enter the email of an organization owner to whom you would like to transfer this project.'\n                  )}\n                </TextBlock>\n                <Panel>\n                  <Form\n                    hideFooter\n                    onFieldChange={this.handleTransferFieldChange}\n                    onSubmit={(_data, _onSuccess, _onError, e) => {\n                      e.stopPropagation();\n                      confirm();\n                    }}\n                  >\n                    <TextField\n                      name=\"email\"\n                      label={t('Organization Owner')}\n                      placeholder=\"admin@example.com\"\n                      required\n                      help={t(\n                        'A request will be emailed to this address, asking the organization owner to accept the project transfer.'\n                      )}\n                    />\n                  </Form>\n                </Panel>\n              </div>\n            )}\n          >\n            <div>\n              <Button className=\"ref-transfer-project\" type=\"button\" priority=\"danger\">\n                {t('Transfer Project')}\n              </Button>\n            </div>\n          </Confirm>\n        )}\n      </Field>\n    );\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const project = this.state.data;\n    const {orgId, projectId} = this.props.params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n    const team = project.teams.length ? project.teams?.[0] : undefined;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Project Settings')} />\n        <PermissionAlert />\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            ...project,\n            team,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={resp => {\n            this.setState({data: resp});\n            if (projectId !== resp.slug) {\n              changeProjectSlug(projectId, resp.slug);\n              // Container will redirect after stores get updated with new slug\n              this.props.onChangeSlug(resp.slug);\n            }\n            // This will update our project context\n            ProjectActions.updateSuccess(resp);\n          }}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Project Details')}\n            fields={[fields.name, fields.platform]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Email')}\n            fields={[fields.subjectPrefix]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Event Settings')}\n            fields={[fields.resolveAge]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Client Security')}\n            fields={[\n              fields.allowedDomains,\n              fields.scrapeJavaScript,\n              fields.securityToken,\n              fields.securityTokenHeader,\n              fields.verifySSL,\n            ]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                <TextBlock noMargin>\n                  {tct(\n                    'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',\n                    {\n                      link: (\n                        <a href=\"https://github.com/getsentry/sentry-javascript\">\n                          sentry-javascript\n                        </a>\n                      ),\n                    }\n                  )}{' '}\n                  {tct(\n                    'This will restrict requests based on the [Origin] and [Referer] headers.',\n                    {\n                      Origin: <code>Origin</code>,\n                      Referer: <code>Referer</code>,\n                    }\n                  )}\n                </TextBlock>\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Project Administration')}</PanelHeader>\n          {this.renderRemoveProject()}\n          {this.renderTransferProject()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype ContainerProps = {\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nclass ProjectGeneralSettingsContainer extends Component<ContainerProps> {\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  changedSlug: string | undefined = undefined;\n  unsubscribe = ProjectsStore.listen(() => this.onProjectsUpdate(), undefined);\n\n  onProjectsUpdate() {\n    if (!this.changedSlug) {\n      return;\n    }\n    const project = ProjectsStore.getBySlug(this.changedSlug);\n\n    if (!project) {\n      return;\n    }\n\n    browserHistory.replace(\n      recreateRoute('', {\n        ...this.props,\n        params: {\n          ...this.props.params,\n          projectId: this.changedSlug,\n        },\n      })\n    );\n  }\n\n  render() {\n    return (\n      <ProjectGeneralSettings\n        onChangeSlug={(newSlug: string) => (this.changedSlug = newSlug)}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(ProjectGeneralSettingsContainer);\n"],"names":["route","RESOLVE_AGE_ALLOWED_VALUES","i","values","push","getResolveAgeAllowedValues","ORG_DISABLED_REASON","t","fields","name","type","required","label","placeholder","help","transformInput","slugify","getData","data","slug","saveOnBlur","saveMessageAlertType","saveMessage","platform","choices","platforms","id","PlatformWrapper","StyledPlatformIcon","filterOption","createFilter","stringify","option","matchedPlatform","value","subjectPrefix","resolveAge","allowedValues","formatLabel","val","Number","tn","tct","Caution","allowedDomains","multiline","autosize","maxRows","rows","getValue","extractMultilineFields","setValue","convertMultilineFieldValue","scrapeJavaScript","disabled","organization","disabledReason","props","securityToken","getDynamicText","fixed","securityTokenHeader","verifySSL","PlatformIcon","space","recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","str","toLowerCase","replace","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","PermissionAlert","access","hasAccess","ProjectGeneralSettings","_form","orgId","project","state","removePageFiltersStorage","removeProject","api","then","window","assign","handleXhrErrorResponse","async","email","length","transferProject","err","status","Set","has","projectId","routeTitleGen","getEndpoints","renderRemoveProject","isProjectAdmin","isInternal","linebreak","onConfirm","handleRemoveProject","priority","confirmText","message","className","renderTransferProject","handleTransferProject","renderMessage","confirm","hideFooter","onFieldChange","handleTransferFieldChange","onSubmit","_data","_onSuccess","_onError","e","stopPropagation","renderBody","endpoint","jsonFormProps","additionalFieldProps","features","team","teams","undefined","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","resp","setState","changeProjectSlug","onChangeSlug","ProjectActions","renderHeader","noMargin","link","href","Origin","Referer","ProjectGeneralSettingsContainer","Component","ProjectsStore","onProjectsUpdate","componentWillUnmount","unsubscribe","changedSlug","browserHistory","newSlug","withOrganization"],"sourceRoot":""}