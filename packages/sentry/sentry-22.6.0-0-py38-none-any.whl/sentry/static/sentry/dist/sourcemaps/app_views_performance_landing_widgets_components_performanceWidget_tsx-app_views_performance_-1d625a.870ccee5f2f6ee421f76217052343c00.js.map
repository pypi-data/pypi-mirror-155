{"version":3,"file":"chunks/app_views_performance_landing_widgets_components_performanceWidget_tsx-app_views_performance_-1d625a.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/contexts/metricsEnhancedPerformanceDataContext.tsx","webpack:///./app/views/performance/landing/widgets/components/performanceWidgetContainer.tsx","webpack:///./app/views/performance/landing/widgets/components/dataStateSwitch.tsx","webpack:///./app/views/performance/landing/widgets/components/queryHandler.tsx","webpack:///./app/views/performance/landing/widgets/components/widgetHeader.tsx","webpack:///./app/views/performance/landing/widgets/components/performanceWidget.tsx","webpack:///./app/views/performance/landing/widgets/components/selectableList.tsx"],"sourcesContent":["import {ReactNode, useCallback, useState} from 'react';\n\nimport Tag from 'sentry/components/tag';\nimport {t} from 'sentry/locale';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {WIDGET_MAP_DENY_LIST} from 'sentry/views/performance/landing/widgets/utils';\nimport {PerformanceWidgetSetting} from 'sentry/views/performance/landing/widgets/widgetDefinitions';\n\nimport {AutoSampleState, MEPState, useMEPSettingContext} from './metricsEnhancedSetting';\nimport {createDefinedContext} from './utils';\n\ninterface MetricsEnhancedPerformanceDataContext {\n  setIsMetricsData: (value?: boolean) => void;\n  isMetricsData?: boolean;\n}\n\nconst [_MEPDataProvider, _useMEPDataContext] =\n  createDefinedContext<MetricsEnhancedPerformanceDataContext>({\n    name: 'MetricsEnhancedPerformanceDataContext',\n  });\n\nexport const MEPDataProvider = ({\n  children,\n  chartSetting,\n}: {\n  children: ReactNode;\n  chartSetting?: PerformanceWidgetSetting;\n}) => {\n  const {setAutoSampleState} = useMEPSettingContext();\n  const [isMetricsData, _setIsMetricsData] = useState<boolean | undefined>(undefined); // Uses undefined to cover 'not initialized'\n\n  const setIsMetricsData = useCallback(\n    (value?: boolean) => {\n      if (WIDGET_MAP_DENY_LIST.includes(chartSetting as PerformanceWidgetSetting)) {\n        // Certain widgets shouldn't update their sampled tags or have the page info change eg. Auto(...)\n        return;\n      }\n      if (value === true) {\n        setAutoSampleState(AutoSampleState.metrics);\n      } else if (value === false) {\n        setAutoSampleState(AutoSampleState.transactions);\n      }\n      _setIsMetricsData(value);\n    },\n    [setAutoSampleState, _setIsMetricsData]\n  );\n\n  return (\n    <_MEPDataProvider value={{isMetricsData, setIsMetricsData}}>\n      {children}\n    </_MEPDataProvider>\n  );\n};\n\nexport const useMEPDataContext = _useMEPDataContext;\n\nexport const MEPTag = () => {\n  const {isMetricsData} = useMEPDataContext();\n  const {metricSettingState} = useMEPSettingContext();\n  const organization = useOrganization();\n\n  if (!organization.features.includes('performance-use-metrics')) {\n    // Separate if for easier flag deletion\n    return null;\n  }\n  if (metricSettingState === MEPState.auto && isMetricsData === false) {\n    return (\n      <Tag\n        tooltipText={t(\n          'These search conditions are only applicable to sampled transaction data. To edit sampling rates, go to Filters & Sampling in settings.'\n        )}\n        data-test-id=\"has-metrics-data-tag\"\n      >\n        {'Sampled'}\n      </Tag>\n    );\n  }\n  return <span data-test-id=\"no-metrics-data-tag\" />;\n};\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\nexport type PerformanceWidgetContainerTypes = 'panel' | 'inline';\n\nconst StyledPanel = styled(Panel)`\n  padding-top: ${space(2)};\n  margin-bottom: 0;\n`;\nconst Div = styled('div')``;\n\nconst getPerformanceWidgetContainer = ({\n  containerType,\n}: {\n  containerType: PerformanceWidgetContainerTypes;\n}) => {\n  if (containerType === 'panel') {\n    return StyledPanel;\n  }\n  if (containerType === 'inline') {\n    return Div;\n  }\n  return Div;\n};\n\nexport default getPerformanceWidgetContainer;\n","import {Fragment} from 'react';\n\nexport function DataStateSwitch(props: {\n  dataComponents: JSX.Element[];\n  emptyComponent: JSX.Element;\n  errorComponent: JSX.Element;\n\n  hasData: boolean;\n  isErrored: boolean;\n  isLoading: boolean;\n  loadingComponent?: JSX.Element;\n}): JSX.Element {\n  if (props.isErrored) {\n    return props.errorComponent;\n  }\n  if (props.isLoading && props.loadingComponent) {\n    return props.loadingComponent;\n  }\n  if (!props.hasData) {\n    return props.emptyComponent;\n  }\n  return <Fragment>{props.dataComponents}</Fragment>;\n}\n","import {Fragment, useEffect} from 'react';\n\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {useMEPDataContext} from 'sentry/utils/performance/contexts/metricsEnhancedPerformanceDataContext';\n\nimport {QueryDefinitionWithKey, QueryHandlerProps, WidgetDataConstraint} from '../types';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\n/*\n  Component to handle switching component-style queries over to state. This should be temporary to make it easier to switch away from waterfall style api components.\n*/\nexport function QueryHandler<T extends WidgetDataConstraint>(\n  props: QueryHandlerProps<T>\n) {\n  const children = props.children ?? <Fragment />;\n\n  if (!props.queries.length) {\n    return <Fragment>{children}</Fragment>;\n  }\n\n  return (\n    <Fragment>\n      {props.queries\n        .filter(q => (q.enabled ? q.enabled(props.widgetData) : true))\n        .map(query => (\n          <SingleQueryHandler key={query.queryKey} {...props} query={query} />\n        ))}\n    </Fragment>\n  );\n}\n\nfunction genericQueryReferrer(setting: PerformanceWidgetSetting) {\n  return `api.performance.generic-widget-chart.${setting.replace(/_/g, '-')}`;\n}\n\nfunction SingleQueryHandler<T extends WidgetDataConstraint>(\n  props: QueryHandlerProps<T> & {query: QueryDefinitionWithKey<T>}\n) {\n  const query = props.query;\n  const globalSelection = props.queryProps.eventView.getPageFilters();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : null;\n\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : null;\n\n  useEffect(\n    () => () => {\n      // Destroy previous data on unmount, in case enabled value changes and unmounts the query component.\n      props.removeWidgetDataForKey(query.queryKey);\n    },\n    []\n  );\n\n  return (\n    <query.component\n      key={query.queryKey}\n      fields={query.fields}\n      yAxis={query.fields}\n      start={start}\n      end={end}\n      period={globalSelection.datetime.period}\n      project={globalSelection.projects}\n      environment={globalSelection.environments}\n      organization={props.queryProps.organization}\n      orgSlug={props.queryProps.organization.slug}\n      eventView={props.queryProps.eventView}\n      query={props.queryProps.eventView.getQueryWithAdditionalConditions()}\n      widgetData={props.widgetData}\n      referrer={genericQueryReferrer(props.queryProps.chartSetting)}\n    >\n      {results => {\n        return (\n          <Fragment>\n            <QueryResultSaver<T> results={results} {...props} query={query} />\n          </Fragment>\n        );\n      }}\n    </query.component>\n  );\n}\n\nfunction QueryResultSaver<T extends WidgetDataConstraint>(\n  props: {\n    // TODO(k-fish): Fix this any.\n    query: QueryDefinitionWithKey<T>;\n    results: any;\n  } & QueryHandlerProps<T>\n) {\n  const mepContext = useMEPDataContext();\n  const {results, query} = props;\n\n  const transformed = query.transform(props.queryProps, results, props.query);\n\n  useEffect(() => {\n    const isMetricsData =\n      results?.seriesAdditionalInfo?.[props.queryProps.fields[0]]?.isMetricsData;\n    mepContext.setIsMetricsData(isMetricsData);\n    props.setWidgetDataForKey(query.queryKey, transformed);\n  }, [transformed?.hasData, transformed?.isLoading, transformed?.isErrored]);\n  return <Fragment />;\n}\n","import styled from '@emotion/styled';\n\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport space from 'sentry/styles/space';\nimport {MEPTag} from 'sentry/utils/performance/contexts/metricsEnhancedPerformanceDataContext';\n\nimport {\n  GenericPerformanceWidgetProps,\n  WidgetDataConstraint,\n  WidgetDataProps,\n} from '../types';\n\nexport function WidgetHeader<T extends WidgetDataConstraint>(\n  props: GenericPerformanceWidgetProps<T> & WidgetDataProps<T>\n) {\n  const {title, titleTooltip, Subtitle, HeaderActions} = props;\n  return (\n    <WidgetHeaderContainer>\n      <TitleContainer>\n        <StyledHeaderTitleLegend data-test-id=\"performance-widget-title\">\n          <TextOverflow>{title}</TextOverflow>\n          <MEPTag />\n          <QuestionTooltip position=\"top\" size=\"sm\" title={titleTooltip} />\n        </StyledHeaderTitleLegend>\n        {Subtitle ? <Subtitle {...props} /> : null}\n      </TitleContainer>\n      <HeaderActionsContainer>\n        {HeaderActions && <HeaderActions {...props} />}\n      </HeaderActionsContainer>\n    </WidgetHeaderContainer>\n  );\n}\n\nconst StyledHeaderTitleLegend = styled(HeaderTitleLegend)`\n  position: relative;\n  z-index: initial;\n`;\n\nconst TitleContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst WidgetHeaderContainer = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  gap: ${space(1)};\n`;\n\nconst HeaderActionsContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(1)};\n`;\n","import {Fragment, useCallback, useRef, useState} from 'react';\nimport {withRouter} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconWarning} from 'sentry/icons/iconWarning';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {MEPDataProvider} from 'sentry/utils/performance/contexts/metricsEnhancedPerformanceDataContext';\nimport useApi from 'sentry/utils/useApi';\nimport getPerformanceWidgetContainer from 'sentry/views/performance/landing/widgets/components/performanceWidgetContainer';\n\nimport {\n  GenericPerformanceWidgetProps,\n  WidgetDataConstraint,\n  WidgetDataProps,\n  WidgetDataResult,\n  WidgetPropUnion,\n} from '../types';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\nimport {DataStateSwitch} from './dataStateSwitch';\nimport {QueryHandler} from './queryHandler';\nimport {WidgetHeader} from './widgetHeader';\n\n// Generic performance widget for type T, where T defines all the data contained in the widget.\nexport function GenericPerformanceWidget<T extends WidgetDataConstraint>(\n  props: WidgetPropUnion<T>\n) {\n  // Use object keyed to chart setting so switching between charts of a similar type doesn't retain data with query components still having inflight requests.\n  const [allWidgetData, setWidgetData] = useState<{[chartSetting: string]: T}>({});\n  const widgetData = allWidgetData[props.chartSetting] ?? {};\n  const widgetDataRef = useRef(widgetData);\n\n  const setWidgetDataForKey = useCallback(\n    (dataKey: string, result?: WidgetDataResult) => {\n      const _widgetData = widgetDataRef.current;\n      const newWidgetData = {..._widgetData, [dataKey]: result};\n      widgetDataRef.current = newWidgetData;\n      setWidgetData({[props.chartSetting]: newWidgetData});\n    },\n    [allWidgetData, setWidgetData]\n  );\n  const removeWidgetDataForKey = useCallback(\n    (dataKey: string) => {\n      const _widgetData = widgetDataRef.current;\n      const newWidgetData = {..._widgetData};\n      delete newWidgetData[dataKey];\n      widgetDataRef.current = newWidgetData;\n      setWidgetData({[props.chartSetting]: newWidgetData});\n    },\n    [allWidgetData, setWidgetData]\n  );\n  const widgetProps = {widgetData, setWidgetDataForKey, removeWidgetDataForKey};\n\n  const queries = Object.entries(props.Queries).map(([key, definition]) => ({\n    ...definition,\n    queryKey: key,\n  }));\n\n  const api = useApi();\n\n  const totalHeight = props.Visualizations.reduce((acc, curr) => acc + curr.height, 0);\n\n  return (\n    <Fragment>\n      <MEPDataProvider chartSetting={props.chartSetting}>\n        <QueryHandler\n          eventView={props.eventView}\n          widgetData={widgetData}\n          setWidgetDataForKey={setWidgetDataForKey}\n          removeWidgetDataForKey={removeWidgetDataForKey}\n          queryProps={props}\n          queries={queries}\n          api={api}\n        />\n        <_DataDisplay<T> {...props} {...widgetProps} totalHeight={totalHeight} />\n      </MEPDataProvider>\n    </Fragment>\n  );\n}\n\nfunction trackDataComponentClicks(\n  chartSetting: PerformanceWidgetSetting,\n  organization: Organization\n) {\n  trackAdvancedAnalyticsEvent('performance_views.landingv3.widget.interaction', {\n    organization,\n    widget_type: chartSetting,\n  });\n}\n\nfunction _DataDisplay<T extends WidgetDataConstraint>(\n  props: GenericPerformanceWidgetProps<T> & WidgetDataProps<T> & {totalHeight: number}\n) {\n  const {Visualizations, chartHeight, totalHeight, containerType, EmptyComponent} = props;\n\n  const Container = getPerformanceWidgetContainer({\n    containerType,\n  });\n\n  const numberKeys = Object.keys(props.Queries).length;\n  const missingDataKeys = Object.values(props.widgetData).length !== numberKeys;\n  const hasData =\n    !missingDataKeys && Object.values(props.widgetData).every(d => !d || d.hasData);\n  const isLoading = Object.values(props.widgetData).some(d => !d || d.isLoading);\n  const isErrored =\n    !missingDataKeys && Object.values(props.widgetData).some(d => d && d.isErrored);\n\n  return (\n    <Container data-test-id=\"performance-widget-container\">\n      <ContentContainer>\n        <WidgetHeader<T> {...props} />\n      </ContentContainer>\n      <DataStateSwitch\n        isLoading={isLoading}\n        isErrored={isErrored}\n        hasData={hasData}\n        errorComponent={<DefaultErrorComponent height={totalHeight} />}\n        dataComponents={Visualizations.map((Visualization, index) => (\n          <ContentContainer\n            key={index}\n            noPadding={Visualization.noPadding}\n            bottomPadding={Visualization.bottomPadding}\n            data-test-id=\"widget-state-has-data\"\n            onClick={() =>\n              trackDataComponentClicks(props.chartSetting, props.organization)\n            }\n          >\n            {getDynamicText({\n              value: (\n                <Visualization.component\n                  grid={defaultGrid}\n                  queryFields={Visualization.fields}\n                  widgetData={props.widgetData}\n                  height={chartHeight}\n                />\n              ),\n              fixed: <Placeholder height={`${chartHeight}px`} />,\n            })}\n          </ContentContainer>\n        ))}\n        loadingComponent={<PerformanceWidgetPlaceholder height={`${totalHeight}px`} />}\n        emptyComponent={\n          EmptyComponent ? (\n            <EmptyComponent />\n          ) : (\n            <PerformanceWidgetPlaceholder height={`${totalHeight}px`} />\n          )\n        }\n      />\n    </Container>\n  );\n}\n\nexport const DataDisplay = withRouter(_DataDisplay);\n\nconst DefaultErrorComponent = (props: {height: number}) => {\n  return (\n    <ErrorPanel data-test-id=\"widget-state-is-errored\" height={`${props.height}px`}>\n      <IconWarning color=\"gray300\" size=\"lg\" />\n    </ErrorPanel>\n  );\n};\n\nconst defaultGrid = {\n  left: space(0),\n  right: space(0),\n  top: space(2),\n  bottom: space(1),\n};\n\nconst ContentContainer = styled('div')<{bottomPadding?: boolean; noPadding?: boolean}>`\n  padding-left: ${p => (p.noPadding ? space(0) : space(2))};\n  padding-right: ${p => (p.noPadding ? space(0) : space(2))};\n  padding-bottom: ${p => (p.bottomPadding ? space(1) : space(0))};\n`;\n\nconst PerformanceWidgetPlaceholder = styled(Placeholder)`\n  border-color: transparent;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n`;\n\nGenericPerformanceWidget.defaultProps = {\n  containerType: 'panel',\n  chartHeight: 200,\n};\n","import styled from '@emotion/styled';\n\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport {RadioLineItem} from 'sentry/components/forms/controls/radioGroup';\nimport Link from 'sentry/components/links/link';\nimport Radio from 'sentry/components/radio';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  items: (() => React.ReactNode)[];\n  selectedIndex: number;\n  setSelectedIndex: (index: number) => void;\n  radioColor?: string;\n};\n\nexport default function SelectableList(props: Props) {\n  return (\n    <div>\n      {props.items.map((item, index) => (\n        <SelectableItem\n          {...props}\n          isSelected={index === props.selectedIndex}\n          currentIndex={index}\n          key={index}\n        >\n          {item()}\n        </SelectableItem>\n      ))}\n    </div>\n  );\n}\n\nfunction SelectableItem({\n  isSelected,\n  currentIndex: index,\n  children,\n  setSelectedIndex,\n  radioColor,\n}: {children: React.ReactNode; currentIndex: number; isSelected: boolean} & Props) {\n  return (\n    <ListItemContainer>\n      <ItemRadioContainer color={radioColor ?? ''}>\n        <RadioLineItem index={index} role=\"radio\">\n          <Radio checked={isSelected} onChange={() => setSelectedIndex(index)} />\n        </RadioLineItem>\n      </ItemRadioContainer>\n      {children}\n    </ListItemContainer>\n  );\n}\n\nexport const RightAlignedCell = styled('div')`\n  text-align: right;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 ${space(1)};\n`;\n\nexport const Subtitle = styled('span')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n  display: inline-block;\n`;\n\nexport const GrowLink = styled(Link)`\n  flex-grow: 1;\n  display: inherit;\n`;\n\nexport const WidgetEmptyStateWarning = () => {\n  return <StyledEmptyStateWarning small>{t('No results')}</StyledEmptyStateWarning>;\n};\n\nexport function ListClose(props: {\n  onClick: () => void;\n  setSelectListIndex: (n: number) => void;\n}) {\n  return (\n    <StyledTooltip title={t('Exclude this transaction from the search filter.')}>\n      <StyledIconClose\n        onClick={() => {\n          props.onClick();\n          props.setSelectListIndex(0);\n        }}\n      />\n    </StyledTooltip>\n  );\n}\n\nconst StyledTooltip = styled(Tooltip)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledIconClose = styled(IconClose)`\n  cursor: pointer;\n  color: ${p => p.theme.gray200};\n`;\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst ListItemContainer = styled('div')`\n  display: flex;\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ItemRadioContainer = styled('div')`\n  grid-row: 1/3;\n  input {\n    cursor: pointer;\n  }\n  input:checked::after {\n    background-color: ${p => p.color};\n  }\n`;\n"],"names":["_MEPDataProvider","_useMEPDataContext","createDefinedContext","name","MEPDataProvider","children","chartSetting","setAutoSampleState","useMEPSettingContext","isMetricsData","_setIsMetricsData","useState","undefined","setIsMetricsData","useCallback","value","WIDGET_MAP_DENY_LIST","AutoSampleState","useMEPDataContext","MEPTag","metricSettingState","useOrganization","features","includes","MEPState","tooltipText","t","StyledPanel","Panel","space","Div","DataStateSwitch","props","isErrored","errorComponent","isLoading","loadingComponent","hasData","Fragment","dataComponents","emptyComponent","QueryHandler","queries","length","filter","q","enabled","widgetData","map","query","SingleQueryHandler","queryKey","globalSelection","queryProps","eventView","getPageFilters","start","datetime","getUtcToLocalDateObject","end","useEffect","removeWidgetDataForKey","component","fields","yAxis","period","project","projects","environment","environments","organization","orgSlug","slug","getQueryWithAdditionalConditions","referrer","setting","replace","results","QueryResultSaver","mepContext","transformed","transform","seriesAdditionalInfo","setWidgetDataForKey","WidgetHeader","title","titleTooltip","Subtitle","HeaderActions","WidgetHeaderContainer","TitleContainer","StyledHeaderTitleLegend","position","size","HeaderActionsContainer","HeaderTitleLegend","GenericPerformanceWidget","allWidgetData","setWidgetData","widgetDataRef","useRef","dataKey","result","newWidgetData","current","widgetProps","Object","entries","Queries","key","definition","api","useApi","totalHeight","Visualizations","reduce","acc","curr","height","_DataDisplay","chartHeight","containerType","EmptyComponent","Container","getPerformanceWidgetContainer","numberKeys","keys","missingDataKeys","values","every","d","some","ContentContainer","DefaultErrorComponent","Visualization","index","noPadding","bottomPadding","onClick","trackDataComponentClicks","trackAdvancedAnalyticsEvent","widget_type","getDynamicText","grid","defaultGrid","queryFields","fixed","PerformanceWidgetPlaceholder","withRouter","color","left","right","top","bottom","p","Placeholder","defaultProps","SelectableList","items","item","SelectableItem","isSelected","selectedIndex","currentIndex","setSelectedIndex","radioColor","ListItemContainer","ItemRadioContainer","role","checked","onChange","RightAlignedCell","theme","gray300","fontSizeMedium","GrowLink","Link","WidgetEmptyStateWarning","StyledEmptyStateWarning","small","ListClose","StyledTooltip","StyledIconClose","setSelectListIndex","Tooltip","IconClose","gray200","EmptyStateWarning","border"],"sourceRoot":""}