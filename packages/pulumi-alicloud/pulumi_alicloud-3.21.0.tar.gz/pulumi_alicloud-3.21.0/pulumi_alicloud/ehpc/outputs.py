# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetJobTemplatesTemplateResult',
]

@pulumi.output_type
class GetJobTemplatesTemplateResult(dict):
    def __init__(__self__, *,
                 array_request: str,
                 clock_time: str,
                 command_line: str,
                 gpu: int,
                 id: str,
                 job_template_id: str,
                 job_template_name: str,
                 mem: str,
                 node: int,
                 package_path: str,
                 priority: int,
                 queue: str,
                 re_runable: bool,
                 runas_user: str,
                 stderr_redirect_path: str,
                 stdout_redirect_path: str,
                 task: int,
                 thread: int,
                 variables: str):
        """
        :param str array_request: Queue Jobs, Is of the Form: 1-10:2.
        :param str clock_time: Job Maximum Run Time.
        :param str command_line: Job Commands.
        :param int gpu: A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
        :param str id: The ID of the Job Template.
        :param str job_template_id: The first ID of the resource.
        :param str job_template_name: A Job Template Name.
        :param str mem: A Single Compute Node Maximum Memory.
        :param int node: Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
        :param str package_path: Job Commands the Directory.
        :param int priority: The Job Priority.Possible Values: 0~9.
        :param str queue: The Job Queue.
        :param bool re_runable: If the Job Is Support for the Re-Run.
        :param str runas_user: The name of the user who performed the job.
        :param str stderr_redirect_path: Error Output Path.
        :param str stdout_redirect_path: Standard Output Path and.
        :param int task: A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
        :param int thread: A Single Task and the Number of Required Threads.Possible Values: 1~20000.
        :param str variables: The Job of the Environment Variable.
        """
        pulumi.set(__self__, "array_request", array_request)
        pulumi.set(__self__, "clock_time", clock_time)
        pulumi.set(__self__, "command_line", command_line)
        pulumi.set(__self__, "gpu", gpu)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "job_template_id", job_template_id)
        pulumi.set(__self__, "job_template_name", job_template_name)
        pulumi.set(__self__, "mem", mem)
        pulumi.set(__self__, "node", node)
        pulumi.set(__self__, "package_path", package_path)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "queue", queue)
        pulumi.set(__self__, "re_runable", re_runable)
        pulumi.set(__self__, "runas_user", runas_user)
        pulumi.set(__self__, "stderr_redirect_path", stderr_redirect_path)
        pulumi.set(__self__, "stdout_redirect_path", stdout_redirect_path)
        pulumi.set(__self__, "task", task)
        pulumi.set(__self__, "thread", thread)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="arrayRequest")
    def array_request(self) -> str:
        """
        Queue Jobs, Is of the Form: 1-10:2.
        """
        return pulumi.get(self, "array_request")

    @property
    @pulumi.getter(name="clockTime")
    def clock_time(self) -> str:
        """
        Job Maximum Run Time.
        """
        return pulumi.get(self, "clock_time")

    @property
    @pulumi.getter(name="commandLine")
    def command_line(self) -> str:
        """
        Job Commands.
        """
        return pulumi.get(self, "command_line")

    @property
    @pulumi.getter
    def gpu(self) -> int:
        """
        A Single Compute Node Using the GPU Number.Possible Values: 1~20000.
        """
        return pulumi.get(self, "gpu")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Job Template.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobTemplateId")
    def job_template_id(self) -> str:
        """
        The first ID of the resource.
        """
        return pulumi.get(self, "job_template_id")

    @property
    @pulumi.getter(name="jobTemplateName")
    def job_template_name(self) -> str:
        """
        A Job Template Name.
        """
        return pulumi.get(self, "job_template_name")

    @property
    @pulumi.getter
    def mem(self) -> str:
        """
        A Single Compute Node Maximum Memory.
        """
        return pulumi.get(self, "mem")

    @property
    @pulumi.getter
    def node(self) -> int:
        """
        Submit a Task Is Required for Computing the Number of Data Nodes to Be. Possible Values: 1~5000 .
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter(name="packagePath")
    def package_path(self) -> str:
        """
        Job Commands the Directory.
        """
        return pulumi.get(self, "package_path")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The Job Priority.Possible Values: 0~9.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def queue(self) -> str:
        """
        The Job Queue.
        """
        return pulumi.get(self, "queue")

    @property
    @pulumi.getter(name="reRunable")
    def re_runable(self) -> bool:
        """
        If the Job Is Support for the Re-Run.
        """
        return pulumi.get(self, "re_runable")

    @property
    @pulumi.getter(name="runasUser")
    def runas_user(self) -> str:
        """
        The name of the user who performed the job.
        """
        return pulumi.get(self, "runas_user")

    @property
    @pulumi.getter(name="stderrRedirectPath")
    def stderr_redirect_path(self) -> str:
        """
        Error Output Path.
        """
        return pulumi.get(self, "stderr_redirect_path")

    @property
    @pulumi.getter(name="stdoutRedirectPath")
    def stdout_redirect_path(self) -> str:
        """
        Standard Output Path and.
        """
        return pulumi.get(self, "stdout_redirect_path")

    @property
    @pulumi.getter
    def task(self) -> int:
        """
        A Single Compute Node Required Number of Tasks. Possible Values: 1~20000 .
        """
        return pulumi.get(self, "task")

    @property
    @pulumi.getter
    def thread(self) -> int:
        """
        A Single Task and the Number of Required Threads.Possible Values: 1~20000.
        """
        return pulumi.get(self, "thread")

    @property
    @pulumi.getter
    def variables(self) -> str:
        """
        The Job of the Environment Variable.
        """
        return pulumi.get(self, "variables")


