program main
  use mesh_mod, only : mesh_type, plane
  use partition_mod, only : partition_type, partitioner_interface, partitioner_planar
  use global_mesh_base_mod, only : global_mesh_base_type
  use extrusion_mod, only : uniform_extrusion_type
  use field_mod, only : field_type
  use function_space_mod, only : function_space_type
  use fs_continuity_mod, only : w0, w3, wtheta
  use constants_mod, only : i_def, r_def
  use operator_mod, only : operator_type
  use tl_rhs_eos_kernel_mod, only : tl_rhs_eos_kernel_type
  use tl_rhs_eos_kernel_mod_adj, only : tl_rhs_eos_kernel_type_adj
  use quadrature_xyoz_mod, only : quadrature_xyoz_type
  use quadrature_rule_gaussian_mod, only : quadrature_rule_gaussian_type
  integer, parameter :: element_order = 1
  real(kind=r_def), parameter :: overall_tolerance = 1500.0_r_def
  type(partition_type) :: partition
  TYPE(mesh_type), TARGET :: mesh
  TYPE(global_mesh_base_type), TARGET :: global_mesh
  CLASS(global_mesh_base_type), POINTER :: global_mesh_ptr
  TYPE(uniform_extrusion_type), TARGET :: extrusion
  TYPE(uniform_extrusion_type), POINTER :: extrusion_ptr
  PROCEDURE(partitioner_interface), POINTER :: partitioner_ptr
  integer :: ndata_sz
  TYPE(function_space_type), TARGET :: vector_space_w0
  TYPE(function_space_type), POINTER :: vector_space_w0_ptr
  TYPE(function_space_type), TARGET :: vector_space_w3
  TYPE(function_space_type), POINTER :: vector_space_w3_ptr
  TYPE(function_space_type), TARGET :: vector_space_wtheta
  TYPE(function_space_type), POINTER :: vector_space_wtheta_ptr
  type(field_type) :: field_1
  type(field_type) :: field_2
  type(field_type) :: field_3
  type(field_type) :: field_4
  type(field_type) :: field_5
  type(field_type) :: field_6
  type(field_type) :: field_7
  type(field_type) :: field_8
  type(field_type) :: field_9
  type(field_type), dimension(3) :: field_10
  type(field_type) :: field_11
  real(kind=r_def) :: rscalar_12
  real(kind=r_def) :: rscalar_13
  real(kind=r_def) :: rscalar_14
  type(quadrature_xyoz_type) :: qr_xyoz
  type(quadrature_rule_gaussian_type) :: quadrature_rule
  type(field_type) :: field_1_input
  type(field_type) :: field_2_input
  type(field_type) :: field_3_input
  type(field_type) :: field_4_input
  type(field_type) :: field_5_input
  type(field_type) :: field_6_input
  type(field_type) :: field_7_input
  type(field_type) :: field_8_input
  type(field_type) :: field_9_input
  type(field_type), dimension(3) :: field_10_input
  type(field_type) :: field_11_input
  real(kind=r_def) :: rscalar_12_input
  real(kind=r_def) :: rscalar_13_input
  real(kind=r_def) :: rscalar_14_input
  type(quadrature_xyoz_type) :: qr_xyoz_input
  real(kind=r_def) :: field_1_inner_prod
  real(kind=r_def) :: field_2_inner_prod
  real(kind=r_def) :: field_3_inner_prod
  real(kind=r_def) :: field_4_inner_prod
  real(kind=r_def) :: field_5_inner_prod
  real(kind=r_def) :: field_6_inner_prod
  real(kind=r_def) :: field_7_inner_prod
  real(kind=r_def) :: field_8_inner_prod
  real(kind=r_def) :: field_9_inner_prod
  real(kind=r_def), dimension(3) :: field_10_inner_prod
  real(kind=r_def) :: field_11_inner_prod
  real(kind=r_def) :: inner1
  real(kind=r_def) :: inner2
  real(kind=r_def) :: MachineTol
  real(kind=r_def) :: relative_diff

  global_mesh = global_mesh_base_type()
  global_mesh_ptr => global_mesh
  partitioner_ptr => partitioner_planar
  partition = partition_type(global_mesh_ptr,partitioner_ptr,1,1,0,0,1)
  extrusion = uniform_extrusion_type(0.0_r_def, 100.0_r_def, 100)
  extrusion_ptr => extrusion
  mesh = mesh_type(global_mesh_ptr,partition,extrusion_ptr)
  WRITE(*, *) "Mesh has", mesh % get_nlayers(), "layers."
  ndata_sz = 1
  vector_space_w0 = function_space_type(mesh,element_order,w0,ndata_sz)
  vector_space_w0_ptr => vector_space_w0
  vector_space_w3 = function_space_type(mesh,element_order,w3,ndata_sz)
  vector_space_w3_ptr => vector_space_w3
  vector_space_wtheta = function_space_type(mesh,element_order,wtheta,ndata_sz)
  vector_space_wtheta_ptr => vector_space_wtheta
  call field_1 % initialise(vector_space=vector_space_w3_ptr, name='field_1')
  call field_2 % initialise(vector_space=vector_space_w3_ptr, name='field_2')
  call field_3 % initialise(vector_space=vector_space_w3_ptr, name='field_3')
  call field_4 % initialise(vector_space=vector_space_wtheta_ptr, name='field_4')
  call field_5 % initialise(vector_space=vector_space_wtheta_ptr, name='field_5')
  call field_6 % initialise(vector_space=vector_space_w3_ptr, name='field_6')
  call field_7 % initialise(vector_space=vector_space_w3_ptr, name='field_7')
  call field_8 % initialise(vector_space=vector_space_wtheta_ptr, name='field_8')
  call field_9 % initialise(vector_space=vector_space_wtheta_ptr, name='field_9')
  call field_10(1) % initialise(vector_space=vector_space_w0_ptr, name='field_10')
  call field_10(2) % initialise(vector_space=vector_space_w0_ptr, name='field_10')
  call field_10(3) % initialise(vector_space=vector_space_w0_ptr, name='field_10')
  call field_11 % initialise(vector_space=vector_space_w3_ptr, name='field_11')
  qr_xyoz = quadrature_xyoz_type(element_order + 3,quadrature_rule)
  call random_number(rscalar_12)
  rscalar_12_input = rscalar_12
  call random_number(rscalar_13)
  rscalar_13_input = rscalar_13
  call random_number(rscalar_14)
  rscalar_14_input = rscalar_14
  call field_1_input % initialise(vector_space=vector_space_w3_ptr, name='field_1_input')
  call field_2_input % initialise(vector_space=vector_space_w3_ptr, name='field_2_input')
  call field_3_input % initialise(vector_space=vector_space_w3_ptr, name='field_3_input')
  call field_4_input % initialise(vector_space=vector_space_wtheta_ptr, name='field_4_input')
  call field_5_input % initialise(vector_space=vector_space_wtheta_ptr, name='field_5_input')
  call field_6_input % initialise(vector_space=vector_space_w3_ptr, name='field_6_input')
  call field_7_input % initialise(vector_space=vector_space_w3_ptr, name='field_7_input')
  call field_8_input % initialise(vector_space=vector_space_wtheta_ptr, name='field_8_input')
  call field_9_input % initialise(vector_space=vector_space_wtheta_ptr, name='field_9_input')
  call field_10_input(1) % initialise(vector_space=vector_space_w0_ptr, name='field_10_input')
  call field_10_input(2) % initialise(vector_space=vector_space_w0_ptr, name='field_10_input')
  call field_10_input(3) % initialise(vector_space=vector_space_w0_ptr, name='field_10_input')
  call field_11_input % initialise(vector_space=vector_space_w3_ptr, name='field_11_input')
  field_1_inner_prod = 0.0_r_def
  field_2_inner_prod = 0.0_r_def
  field_3_inner_prod = 0.0_r_def
  field_4_inner_prod = 0.0_r_def
  field_5_inner_prod = 0.0_r_def
  field_6_inner_prod = 0.0_r_def
  field_7_inner_prod = 0.0_r_def
  field_8_inner_prod = 0.0_r_def
  field_9_inner_prod = 0.0_r_def
  field_10_inner_prod(1) = 0.0_r_def
  field_10_inner_prod(2) = 0.0_r_def
  field_10_inner_prod(3) = 0.0_r_def
  field_11_inner_prod = 0.0_r_def
  call invoke(setval_random(field_1), setval_x(field_1_input, field_1), setval_random(field_2), setval_x(field_2_input, field_2), setval_random(field_3), setval_x(field_3_input, field_3), setval_random(field_4), setval_x(field_4_input, field_4), setval_random(field_5), setval_x(field_5_input, field_5), setval_random(field_6), setval_x(field_6_input, field_6), setval_random(field_7), setval_x(field_7_input, field_7), setval_random(field_8), setval_x(field_8_input, field_8), setval_random(field_9), setval_x(field_9_input, field_9), setval_random(field_10(1)), setval_x(field_10_input(1), field_10(1)), setval_random(field_10(2)), setval_x(field_10_input(2), field_10(2)), setval_random(field_10(3)), setval_x(field_10_input(3), field_10(3)), setval_random(field_11), setval_x(field_11_input, field_11), tl_rhs_eos_kernel_type(field_1, field_2, field_3, field_4, field_5, field_6, field_7, field_8, field_9, field_10, field_11, rscalar_12, rscalar_13, rscalar_14, qr_xyoz), x_innerproduct_x(field_1_inner_prod, field_1), x_innerproduct_x(field_2_inner_prod, field_2), x_innerproduct_x(field_3_inner_prod, field_3), x_innerproduct_x(field_4_inner_prod, field_4), x_innerproduct_x(field_5_inner_prod, field_5), x_innerproduct_x(field_6_inner_prod, field_6), x_innerproduct_x(field_7_inner_prod, field_7), x_innerproduct_x(field_8_inner_prod, field_8), x_innerproduct_x(field_9_inner_prod, field_9), x_innerproduct_x(field_10_inner_prod(1), field_10(1)), x_innerproduct_x(field_10_inner_prod(2), field_10(2)), x_innerproduct_x(field_10_inner_prod(3), field_10(3)), x_innerproduct_x(field_11_inner_prod, field_11))
  inner1 = 0.0_r_def
  inner1 = inner1 + rscalar_12 * rscalar_12
  inner1 = inner1 + rscalar_13 * rscalar_13
  inner1 = inner1 + rscalar_14 * rscalar_14
  inner1 = inner1 + field_1_inner_prod
  inner1 = inner1 + field_2_inner_prod
  inner1 = inner1 + field_3_inner_prod
  inner1 = inner1 + field_4_inner_prod
  inner1 = inner1 + field_5_inner_prod
  inner1 = inner1 + field_6_inner_prod
  inner1 = inner1 + field_7_inner_prod
  inner1 = inner1 + field_8_inner_prod
  inner1 = inner1 + field_9_inner_prod
  inner1 = inner1 + field_10_inner_prod(1)
  inner1 = inner1 + field_10_inner_prod(2)
  inner1 = inner1 + field_10_inner_prod(3)
  inner1 = inner1 + field_11_inner_prod
  field_1_inner_prod = 0.0_r_def
  field_2_inner_prod = 0.0_r_def
  field_3_inner_prod = 0.0_r_def
  field_4_inner_prod = 0.0_r_def
  field_5_inner_prod = 0.0_r_def
  field_6_inner_prod = 0.0_r_def
  field_7_inner_prod = 0.0_r_def
  field_8_inner_prod = 0.0_r_def
  field_9_inner_prod = 0.0_r_def
  field_10_inner_prod(1) = 0.0_r_def
  field_10_inner_prod(2) = 0.0_r_def
  field_10_inner_prod(3) = 0.0_r_def
  field_11_inner_prod = 0.0_r_def
  call invoke(tl_rhs_eos_kernel_type_adj(field_1, field_2, field_3, field_4, field_5, field_6, field_7, field_8, field_9, field_10, field_11, rscalar_12, rscalar_13, rscalar_14, qr_xyoz), x_innerproduct_y(field_1_inner_prod, field_1, field_1_input), x_innerproduct_y(field_2_inner_prod, field_2, field_2_input), x_innerproduct_y(field_3_inner_prod, field_3, field_3_input), x_innerproduct_y(field_4_inner_prod, field_4, field_4_input), x_innerproduct_y(field_5_inner_prod, field_5, field_5_input), x_innerproduct_y(field_6_inner_prod, field_6, field_6_input), x_innerproduct_y(field_7_inner_prod, field_7, field_7_input), x_innerproduct_y(field_8_inner_prod, field_8, field_8_input), x_innerproduct_y(field_9_inner_prod, field_9, field_9_input), x_innerproduct_y(field_10_inner_prod(1), field_10(1), field_10_input(1)), x_innerproduct_y(field_10_inner_prod(2), field_10(2), field_10_input(2)), x_innerproduct_y(field_10_inner_prod(3), field_10(3), field_10_input(3)), x_innerproduct_y(field_11_inner_prod, field_11, field_11_input))
  inner2 = 0.0_r_def
  inner2 = inner2 + rscalar_12 * rscalar_12_input
  inner2 = inner2 + rscalar_13 * rscalar_13_input
  inner2 = inner2 + rscalar_14 * rscalar_14_input
  inner2 = inner2 + field_1_inner_prod
  inner2 = inner2 + field_2_inner_prod
  inner2 = inner2 + field_3_inner_prod
  inner2 = inner2 + field_4_inner_prod
  inner2 = inner2 + field_5_inner_prod
  inner2 = inner2 + field_6_inner_prod
  inner2 = inner2 + field_7_inner_prod
  inner2 = inner2 + field_8_inner_prod
  inner2 = inner2 + field_9_inner_prod
  inner2 = inner2 + field_10_inner_prod(1)
  inner2 = inner2 + field_10_inner_prod(2)
  inner2 = inner2 + field_10_inner_prod(3)
  inner2 = inner2 + field_11_inner_prod
  ! Test the inner-product values for equality, allowing for the precision of the active variables
  MachineTol = SPACING(MAX(ABS(inner1), ABS(inner2)))
  relative_diff = ABS(inner1 - inner2) / MachineTol
  if (relative_diff < overall_tolerance) then
    WRITE(*, *) 'Test of adjoint of ''tl_rhs_eos_kernel_type'' PASSED: ', inner1, inner2, relative_diff
  else
    WRITE(*, *) 'Test of adjoint of ''tl_rhs_eos_kernel_type'' FAILED: ', inner1, inner2, relative_diff
  end if

end program main
