"""camera calibration"""
from __future__ import annotations
import phase.pyphase.calib
import typing
import numpy
import phase.pyphase.types
_Shape = typing.Tuple[int, ...]

__all__ = [
    "CalibrationFileType",
    "CameraCalibration",
    "INVALID",
    "OPENCV_YAML",
    "ROS_YAML",
    "StereoCameraCalibration"
]


class CalibrationFileType():
    """
    Members:

      ROS_YAML

      OPENCV_YAML

      INVALID
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    INVALID: phase.pyphase.calib.CalibrationFileType # value = <CalibrationFileType.INVALID: 2>
    OPENCV_YAML: phase.pyphase.calib.CalibrationFileType # value = <CalibrationFileType.OPENCV_YAML: 1>
    ROS_YAML: phase.pyphase.calib.CalibrationFileType # value = <CalibrationFileType.ROS_YAML: 0>
    __members__: dict # value = {'ROS_YAML': <CalibrationFileType.ROS_YAML: 0>, 'OPENCV_YAML': <CalibrationFileType.OPENCV_YAML: 1>, 'INVALID': <CalibrationFileType.INVALID: 2>}
    pass
class CameraCalibration():
    @typing.overload
    def __init__(self, arg0: int, arg1: int, arg2: numpy.ndarray, arg3: numpy.ndarray, arg4: numpy.ndarray, arg5: numpy.ndarray) -> None: ...
    @typing.overload
    def __init__(self, arg0: str) -> None: ...
    @staticmethod
    def calibrationFromIdeal(arg0: int, arg1: int, arg2: float, arg3: float, arg4: float, arg5: float) -> CameraCalibration: ...
    def getCameraCX(self) -> float: ...
    def getCameraCY(self) -> float: ...
    def getCameraFX(self) -> float: ...
    def getCameraFY(self) -> float: ...
    def getCameraMatrix(self) -> numpy.ndarray: ...
    def getDistortionCoefficients(self) -> numpy.ndarray: ...
    def getDownsampleFactor(self) -> float: ...
    def getImageHeight(self) -> int: ...
    def getImageWidth(self) -> int: ...
    def getProjectionCX(self) -> float: ...
    def getProjectionCY(self) -> float: ...
    def getProjectionFX(self) -> float: ...
    def getProjectionFY(self) -> float: ...
    def getProjectionMatrix(self) -> numpy.ndarray: ...
    def getProjectionTX(self) -> float: ...
    def getRectificationMatrix(self) -> numpy.ndarray: ...
    def isValid(self) -> bool: ...
    def remapPoint(self, arg0: phase.pyphase.types.Point2i) -> phase.pyphase.types.Point2i: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    pass
class StereoCameraCalibration():
    def __init__(self, arg0: CameraCalibration, arg1: CameraCalibration) -> None: ...
    @staticmethod
    def calibrationFromIdeal(arg0: int, arg1: int, arg2: float, arg3: float, arg4: float) -> StereoCameraCalibration: ...
    @staticmethod
    def calibrationFromYAML(arg0: str, arg1: str) -> StereoCameraCalibration: ...
    def getBaseline(self) -> float: ...
    def getDownsampleFactor(self) -> float: ...
    def getHFOV(self) -> float: ...
    def getQ(self) -> numpy.ndarray: ...
    def isValid(self) -> bool: ...
    def isValidSize(self, arg0: int, arg1: int) -> bool: ...
    def rectify(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> phase.pyphase.types.StereoImagePair: ...
    def remapPoint(self, arg0: phase.pyphase.types.Point2i, arg1: phase.pyphase.types.LeftOrRight) -> phase.pyphase.types.Point2i: ...
    def saveToYAML(self, arg0: str, arg1: str, arg2: CalibrationFileType) -> bool: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    @property
    def left_calibration(self) -> CameraCalibration:
        """
        :type: CameraCalibration
        """
    @left_calibration.setter
    def left_calibration(self, arg0: CameraCalibration) -> None:
        pass
    @property
    def right_calibration(self) -> CameraCalibration:
        """
        :type: CameraCalibration
        """
    @right_calibration.setter
    def right_calibration(self, arg0: CameraCalibration) -> None:
        pass
    pass
INVALID: phase.pyphase.calib.CalibrationFileType # value = <CalibrationFileType.INVALID: 2>
OPENCV_YAML: phase.pyphase.calib.CalibrationFileType # value = <CalibrationFileType.OPENCV_YAML: 1>
ROS_YAML: phase.pyphase.calib.CalibrationFileType # value = <CalibrationFileType.ROS_YAML: 0>
