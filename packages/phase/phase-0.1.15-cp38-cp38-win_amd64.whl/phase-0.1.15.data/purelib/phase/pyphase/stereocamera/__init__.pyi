"""stereo camera"""
from __future__ import annotations
import phase.pyphase.stereocamera
import typing
import phase.pyphase.types

__all__ = [
    "AbstractStereoCamera",
    "DeimosStereoCamera",
    "PhobosStereoCamera",
    "PylonStereoCamera",
    "TitaniaStereoCamera",
    "UVCStereoCamera",
    "createStereoCamera"
]


class AbstractStereoCamera():
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableDataCapture(self, arg0: bool) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getCaptureCount(self) -> int: ...
    def getDownsampleFactor(self) -> float: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> phase.pyphase.types.CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isContinousReadThreadRunning(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> phase.pyphase.types.CameraReadResult: ...
    def resetCaptureCount(self) -> None: ...
    def setDataCapturePath(self, arg0: str) -> None: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setLeftFlipX(self, arg0: bool) -> None: ...
    def setLeftFlipY(self, arg0: bool) -> None: ...
    def setReadThreadCallback(self, arg0: typing.Callable[[phase.pyphase.types.CameraReadResult], None]) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightFlipX(self, arg0: bool) -> None: ...
    def setRightFlipY(self, arg0: bool) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startContinousReadThread(self, timeout: int = 1000) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> bool: ...
    def stopCapture(self) -> None: ...
    def stopContinousReadThread(self) -> None: ...
    pass
class DeimosStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableDataCapture(self, arg0: bool) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getCaptureCount(self) -> int: ...
    def getDownsampleFactor(self) -> float: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> phase.pyphase.types.CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isContinousReadThreadRunning(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> phase.pyphase.types.CameraReadResult: ...
    def resetCaptureCount(self) -> None: ...
    def setDataCapturePath(self, arg0: str) -> None: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setLeftFlipX(self, arg0: bool) -> None: ...
    def setLeftFlipY(self, arg0: bool) -> None: ...
    def setReadThreadCallback(self, arg0: typing.Callable[[phase.pyphase.types.CameraReadResult], None]) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightFlipX(self, arg0: bool) -> None: ...
    def setRightFlipY(self, arg0: bool) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startContinousReadThread(self, timeout: int = 1000) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> bool: ...
    def stopCapture(self) -> None: ...
    def stopContinousReadThread(self) -> None: ...
    pass
class PhobosStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableDataCapture(self, arg0: bool) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getCaptureCount(self) -> int: ...
    def getDownsampleFactor(self) -> float: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> phase.pyphase.types.CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isContinousReadThreadRunning(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> phase.pyphase.types.CameraReadResult: ...
    def resetCaptureCount(self) -> None: ...
    def setDataCapturePath(self, arg0: str) -> None: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setLeftFlipX(self, arg0: bool) -> None: ...
    def setLeftFlipY(self, arg0: bool) -> None: ...
    def setReadThreadCallback(self, arg0: typing.Callable[[phase.pyphase.types.CameraReadResult], None]) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightFlipX(self, arg0: bool) -> None: ...
    def setRightFlipY(self, arg0: bool) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startContinousReadThread(self, timeout: int = 1000) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> bool: ...
    def stopCapture(self) -> None: ...
    def stopContinousReadThread(self) -> None: ...
    pass
class PylonStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableDataCapture(self, arg0: bool) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getCaptureCount(self) -> int: ...
    def getDownsampleFactor(self) -> float: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> phase.pyphase.types.CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isContinousReadThreadRunning(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> phase.pyphase.types.CameraReadResult: ...
    def resetCaptureCount(self) -> None: ...
    def setDataCapturePath(self, arg0: str) -> None: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setLeftFlipX(self, arg0: bool) -> None: ...
    def setLeftFlipY(self, arg0: bool) -> None: ...
    def setReadThreadCallback(self, arg0: typing.Callable[[phase.pyphase.types.CameraReadResult], None]) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightFlipX(self, arg0: bool) -> None: ...
    def setRightFlipY(self, arg0: bool) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startContinousReadThread(self, timeout: int = 1000) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> bool: ...
    def stopCapture(self) -> None: ...
    def stopContinousReadThread(self) -> None: ...
    pass
class TitaniaStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableDataCapture(self, arg0: bool) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getCaptureCount(self) -> int: ...
    def getDownsampleFactor(self) -> float: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> phase.pyphase.types.CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isContinousReadThreadRunning(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> phase.pyphase.types.CameraReadResult: ...
    def resetCaptureCount(self) -> None: ...
    def setDataCapturePath(self, arg0: str) -> None: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setLeftFlipX(self, arg0: bool) -> None: ...
    def setLeftFlipY(self, arg0: bool) -> None: ...
    def setReadThreadCallback(self, arg0: typing.Callable[[phase.pyphase.types.CameraReadResult], None]) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightFlipX(self, arg0: bool) -> None: ...
    def setRightFlipY(self, arg0: bool) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startContinousReadThread(self, timeout: int = 1000) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> bool: ...
    def stopCapture(self) -> None: ...
    def stopContinousReadThread(self) -> None: ...
    pass
class UVCStereoCamera():
    def __init__(self, arg0: phase.pyphase.types.CameraDeviceInfo) -> None: ...
    def connect(self) -> bool: ...
    def disconnect(self) -> None: ...
    def enableDataCapture(self, arg0: bool) -> None: ...
    def enableHardwareTrigger(self, arg0: bool) -> None: ...
    def getCaptureCount(self) -> int: ...
    def getDownsampleFactor(self) -> float: ...
    def getFrameRate(self) -> float: ...
    def getHeight(self) -> int: ...
    def getReadThreadResult(self) -> phase.pyphase.types.CameraReadResult: ...
    def getWidth(self) -> int: ...
    def isCapturing(self) -> bool: ...
    def isConnected(self) -> bool: ...
    def isContinousReadThreadRunning(self) -> bool: ...
    def isReadThreadRunning(self) -> bool: ...
    def read(self, timeout: int = 1000) -> phase.pyphase.types.CameraReadResult: ...
    def resetCaptureCount(self) -> None: ...
    def setDataCapturePath(self, arg0: str) -> None: ...
    def setDownsampleFactor(self, arg0: float) -> None: ...
    def setExposure(self, arg0: int) -> None: ...
    def setFrameRate(self, arg0: float) -> None: ...
    def setLeftAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setLeftFlipX(self, arg0: bool) -> None: ...
    def setLeftFlipY(self, arg0: bool) -> None: ...
    def setReadThreadCallback(self, arg0: typing.Callable[[phase.pyphase.types.CameraReadResult], None]) -> None: ...
    def setRightAOI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def setRightFlipX(self, arg0: bool) -> None: ...
    def setRightFlipY(self, arg0: bool) -> None: ...
    def setTestImagePaths(self, arg0: str, arg1: str) -> None: ...
    def startCapture(self) -> bool: ...
    def startContinousReadThread(self, timeout: int = 1000) -> bool: ...
    def startReadThread(self, timeout: int = 1000) -> bool: ...
    def stopCapture(self) -> None: ...
    def stopContinousReadThread(self) -> None: ...
    pass
def createStereoCamera(arg0: phase.pyphase.types.CameraDeviceInfo) -> AbstractStereoCamera:
    pass
