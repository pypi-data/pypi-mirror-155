# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pc4g.api_client import ApiClient


class AlphaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_customer_card(self, customer_id, **kwargs):  # noqa: E501
        """add_customer_card  # noqa: E501

        Add customer Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_customer_card(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_customer_card_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_customer_card_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def add_customer_card_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """add_customer_card  # noqa: E501

        Add customer Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_customer_card_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_customer_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `add_customer_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customer/{customer_id}/cards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_host_to_server_pool(self, customer_id, cloudspace_id, serverpool_id, address, **kwargs):  # noqa: E501
        """add_host_to_server_pool  # noqa: E501

        Add host to server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_host_to_server_pool(customer_id, cloudspace_id, serverpool_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str address: IPv4 address, IPv6 address or domain name of the host (required)
        :param str x_fields: An optional fields mask
        :return: ServerPoolHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_host_to_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, address, **kwargs)  # noqa: E501
        else:
            (data) = self.add_host_to_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, address, **kwargs)  # noqa: E501
            return data

    def add_host_to_server_pool_with_http_info(self, customer_id, cloudspace_id, serverpool_id, address, **kwargs):  # noqa: E501
        """add_host_to_server_pool  # noqa: E501

        Add host to server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_host_to_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str address: IPv4 address, IPv6 address or domain name of the host (required)
        :param str x_fields: An optional fields mask
        :return: ServerPoolHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'serverpool_id', 'address', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_host_to_server_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `add_host_to_server_pool`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `add_host_to_server_pool`")  # noqa: E501
        # verify the required parameter 'serverpool_id' is set
        if self.api_client.client_side_validation and ('serverpool_id' not in params or
                                                       params['serverpool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serverpool_id` when calling `add_host_to_server_pool`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `add_host_to_server_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'serverpool_id' in params:
            path_params['serverpool_id'] = params['serverpool_id']  # noqa: E501

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/server-pools/{serverpool_id}/hosts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServerPoolHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cloudspaces_server_pool(self, customer_id, cloudspace_id, name, **kwargs):  # noqa: E501
        """create_cloudspaces_server_pool  # noqa: E501

        create new server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cloudspaces_server_pool(customer_id, cloudspace_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str name: Name of the server pool (required)
        :param str description: Description of the server pool
        :param str x_fields: An optional fields mask
        :return: IDModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cloudspaces_server_pool_with_http_info(customer_id, cloudspace_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cloudspaces_server_pool_with_http_info(customer_id, cloudspace_id, name, **kwargs)  # noqa: E501
            return data

    def create_cloudspaces_server_pool_with_http_info(self, customer_id, cloudspace_id, name, **kwargs):  # noqa: E501
        """create_cloudspaces_server_pool  # noqa: E501

        create new server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cloudspaces_server_pool_with_http_info(customer_id, cloudspace_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str name: Name of the server pool (required)
        :param str description: Description of the server pool
        :param str x_fields: An optional fields mask
        :return: IDModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'name', 'description', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cloudspaces_server_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `create_cloudspaces_server_pool`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `create_cloudspaces_server_pool`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `create_cloudspaces_server_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/server-pools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IDModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_load_balancer(self, customer_id, cloudspace_id, payload, **kwargs):  # noqa: E501
        """create_load_balancer  # noqa: E501

        create new load balancer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_load_balancer(customer_id, cloudspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param CreateLoadBalancerFull payload: (required)
        :param str x_fields: An optional fields mask
        :return: IDModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_load_balancer_with_http_info(customer_id, cloudspace_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.create_load_balancer_with_http_info(customer_id, cloudspace_id, payload, **kwargs)  # noqa: E501
            return data

    def create_load_balancer_with_http_info(self, customer_id, cloudspace_id, payload, **kwargs):  # noqa: E501
        """create_load_balancer  # noqa: E501

        create new load balancer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_load_balancer_with_http_info(customer_id, cloudspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param CreateLoadBalancerFull payload: (required)
        :param str x_fields: An optional fields mask
        :return: IDModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_load_balancer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `create_load_balancer`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `create_load_balancer`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `create_load_balancer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/load-balancers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IDModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_reverse_proxy(self, customer_id, cloudspace_id, payload, **kwargs):  # noqa: E501
        """create_reverse_proxy  # noqa: E501

        create new reverse proxy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_reverse_proxy(customer_id, cloudspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param CreateReverseProxyFull payload: (required)
        :param str x_fields: An optional fields mask
        :return: IDModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_reverse_proxy_with_http_info(customer_id, cloudspace_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.create_reverse_proxy_with_http_info(customer_id, cloudspace_id, payload, **kwargs)  # noqa: E501
            return data

    def create_reverse_proxy_with_http_info(self, customer_id, cloudspace_id, payload, **kwargs):  # noqa: E501
        """create_reverse_proxy  # noqa: E501

        create new reverse proxy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_reverse_proxy_with_http_info(customer_id, cloudspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param CreateReverseProxyFull payload: (required)
        :param str x_fields: An optional fields mask
        :return: IDModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_reverse_proxy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `create_reverse_proxy`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `create_reverse_proxy`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `create_reverse_proxy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/reverse-proxies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IDModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_customer_card(self, customer_id, card_id, **kwargs):  # noqa: E501
        """delete_customer_card  # noqa: E501

        Delete customer Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_card(customer_id, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str card_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_customer_card_with_http_info(customer_id, card_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_customer_card_with_http_info(customer_id, card_id, **kwargs)  # noqa: E501
            return data

    def delete_customer_card_with_http_info(self, customer_id, card_id, **kwargs):  # noqa: E501
        """delete_customer_card  # noqa: E501

        Delete customer Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_card_with_http_info(customer_id, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str card_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'card_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customer_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_customer_card`")  # noqa: E501
        # verify the required parameter 'card_id' is set
        if self.api_client.client_side_validation and ('card_id' not in params or
                                                       params['card_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `card_id` when calling `delete_customer_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'card_id' in params:
            path_params['card_id'] = params['card_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customer/{customer_id}/cards/{card_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_load_balancer(self, customer_id, cloudspace_id, loadbalancer_id, **kwargs):  # noqa: E501
        """delete_load_balancer  # noqa: E501

        Delete load balancer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_load_balancer(customer_id, cloudspace_id, loadbalancer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str loadbalancer_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_load_balancer_with_http_info(customer_id, cloudspace_id, loadbalancer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_load_balancer_with_http_info(customer_id, cloudspace_id, loadbalancer_id, **kwargs)  # noqa: E501
            return data

    def delete_load_balancer_with_http_info(self, customer_id, cloudspace_id, loadbalancer_id, **kwargs):  # noqa: E501
        """delete_load_balancer  # noqa: E501

        Delete load balancer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_load_balancer_with_http_info(customer_id, cloudspace_id, loadbalancer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str loadbalancer_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'loadbalancer_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_load_balancer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_load_balancer`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `delete_load_balancer`")  # noqa: E501
        # verify the required parameter 'loadbalancer_id' is set
        if self.api_client.client_side_validation and ('loadbalancer_id' not in params or
                                                       params['loadbalancer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `loadbalancer_id` when calling `delete_load_balancer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'loadbalancer_id' in params:
            path_params['loadbalancer_id'] = params['loadbalancer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/load-balancers/{loadbalancer_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_reverse_proxy(self, customer_id, cloudspace_id, reverseproxy_id, **kwargs):  # noqa: E501
        """delete_reverse_proxy  # noqa: E501

        Delete reverse proxy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_reverse_proxy(customer_id, cloudspace_id, reverseproxy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str reverseproxy_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_reverse_proxy_with_http_info(customer_id, cloudspace_id, reverseproxy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_reverse_proxy_with_http_info(customer_id, cloudspace_id, reverseproxy_id, **kwargs)  # noqa: E501
            return data

    def delete_reverse_proxy_with_http_info(self, customer_id, cloudspace_id, reverseproxy_id, **kwargs):  # noqa: E501
        """delete_reverse_proxy  # noqa: E501

        Delete reverse proxy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_reverse_proxy_with_http_info(customer_id, cloudspace_id, reverseproxy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str reverseproxy_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'reverseproxy_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reverse_proxy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_reverse_proxy`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `delete_reverse_proxy`")  # noqa: E501
        # verify the required parameter 'reverseproxy_id' is set
        if self.api_client.client_side_validation and ('reverseproxy_id' not in params or
                                                       params['reverseproxy_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reverseproxy_id` when calling `delete_reverse_proxy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'reverseproxy_id' in params:
            path_params['reverseproxy_id'] = params['reverseproxy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/reverse-proxies/{reverseproxy_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_server_pool(self, customer_id, cloudspace_id, serverpool_id, **kwargs):  # noqa: E501
        """delete_server_pool  # noqa: E501

        Delete server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_server_pool(customer_id, cloudspace_id, serverpool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, **kwargs)  # noqa: E501
            return data

    def delete_server_pool_with_http_info(self, customer_id, cloudspace_id, serverpool_id, **kwargs):  # noqa: E501
        """delete_server_pool  # noqa: E501

        Delete server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'serverpool_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_server_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_server_pool`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `delete_server_pool`")  # noqa: E501
        # verify the required parameter 'serverpool_id' is set
        if self.api_client.client_side_validation and ('serverpool_id' not in params or
                                                       params['serverpool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serverpool_id` when calling `delete_server_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'serverpool_id' in params:
            path_params['serverpool_id'] = params['serverpool_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/server-pools/{serverpool_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_traefik_config(self, customer_id, cloudspace_id, **kwargs):  # noqa: E501
        """generate_traefik_config  # noqa: E501

        Inspect configured traefik config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_traefik_config(customer_id, cloudspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_traefik_config_with_http_info(customer_id, cloudspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_traefik_config_with_http_info(customer_id, cloudspace_id, **kwargs)  # noqa: E501
            return data

    def generate_traefik_config_with_http_info(self, customer_id, cloudspace_id, **kwargs):  # noqa: E501
        """generate_traefik_config  # noqa: E501

        Inspect configured traefik config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_traefik_config_with_http_info(customer_id, cloudspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_traefik_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `generate_traefik_config`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `generate_traefik_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/traefik', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer_card(self, customer_id, card_id, **kwargs):  # noqa: E501
        """get_customer_card  # noqa: E501

        Get customer Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_card(customer_id, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str card_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_card_with_http_info(customer_id, card_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_card_with_http_info(customer_id, card_id, **kwargs)  # noqa: E501
            return data

    def get_customer_card_with_http_info(self, customer_id, card_id, **kwargs):  # noqa: E501
        """get_customer_card  # noqa: E501

        Get customer Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_card_with_http_info(customer_id, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str card_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'card_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `get_customer_card`")  # noqa: E501
        # verify the required parameter 'card_id' is set
        if self.api_client.client_side_validation and ('card_id' not in params or
                                                       params['card_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `card_id` when calling `get_customer_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'card_id' in params:
            path_params['card_id'] = params['card_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customer/{customer_id}/cards/{card_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reverse_proxy_info(self, customer_id, cloudspace_id, reverseproxy_id, **kwargs):  # noqa: E501
        """get_reverse_proxy_info  # noqa: E501

        Show reverse proxy information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reverse_proxy_info(customer_id, cloudspace_id, reverseproxy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str reverseproxy_id: (required)
        :param str x_fields: An optional fields mask
        :return: ShowReverseProxyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reverse_proxy_info_with_http_info(customer_id, cloudspace_id, reverseproxy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reverse_proxy_info_with_http_info(customer_id, cloudspace_id, reverseproxy_id, **kwargs)  # noqa: E501
            return data

    def get_reverse_proxy_info_with_http_info(self, customer_id, cloudspace_id, reverseproxy_id, **kwargs):  # noqa: E501
        """get_reverse_proxy_info  # noqa: E501

        Show reverse proxy information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reverse_proxy_info_with_http_info(customer_id, cloudspace_id, reverseproxy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str reverseproxy_id: (required)
        :param str x_fields: An optional fields mask
        :return: ShowReverseProxyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'reverseproxy_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reverse_proxy_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `get_reverse_proxy_info`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `get_reverse_proxy_info`")  # noqa: E501
        # verify the required parameter 'reverseproxy_id' is set
        if self.api_client.client_side_validation and ('reverseproxy_id' not in params or
                                                       params['reverseproxy_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reverseproxy_id` when calling `get_reverse_proxy_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'reverseproxy_id' in params:
            path_params['reverseproxy_id'] = params['reverseproxy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/reverse-proxies/{reverseproxy_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShowReverseProxyFull',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_pool_info(self, customer_id, cloudspace_id, serverpool_id, **kwargs):  # noqa: E501
        """get_server_pool_info  # noqa: E501

        Show server pool information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_server_pool_info(customer_id, cloudspace_id, serverpool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str x_fields: An optional fields mask
        :return: ServerPool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_server_pool_info_with_http_info(customer_id, cloudspace_id, serverpool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_pool_info_with_http_info(customer_id, cloudspace_id, serverpool_id, **kwargs)  # noqa: E501
            return data

    def get_server_pool_info_with_http_info(self, customer_id, cloudspace_id, serverpool_id, **kwargs):  # noqa: E501
        """get_server_pool_info  # noqa: E501

        Show server pool information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_server_pool_info_with_http_info(customer_id, cloudspace_id, serverpool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str x_fields: An optional fields mask
        :return: ServerPool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'serverpool_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_pool_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `get_server_pool_info`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `get_server_pool_info`")  # noqa: E501
        # verify the required parameter 'serverpool_id' is set
        if self.api_client.client_side_validation and ('serverpool_id' not in params or
                                                       params['serverpool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serverpool_id` when calling `get_server_pool_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'serverpool_id' in params:
            path_params['serverpool_id'] = params['serverpool_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/server-pools/{serverpool_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServerPool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cloudspaces_reverse_proxies(self, customer_id, cloudspace_id, **kwargs):  # noqa: E501
        """list_cloudspaces_reverse_proxies  # noqa: E501

        list cloudspace's reverse proxies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cloudspaces_reverse_proxies(customer_id, cloudspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str x_fields: An optional fields mask
        :return: ReverseProxyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_cloudspaces_reverse_proxies_with_http_info(customer_id, cloudspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_cloudspaces_reverse_proxies_with_http_info(customer_id, cloudspace_id, **kwargs)  # noqa: E501
            return data

    def list_cloudspaces_reverse_proxies_with_http_info(self, customer_id, cloudspace_id, **kwargs):  # noqa: E501
        """list_cloudspaces_reverse_proxies  # noqa: E501

        list cloudspace's reverse proxies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cloudspaces_reverse_proxies_with_http_info(customer_id, cloudspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str x_fields: An optional fields mask
        :return: ReverseProxyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cloudspaces_reverse_proxies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `list_cloudspaces_reverse_proxies`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `list_cloudspaces_reverse_proxies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/reverse-proxies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReverseProxyList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cloudspaces_server_pools(self, customer_id, cloudspace_id, **kwargs):  # noqa: E501
        """list_cloudspaces_server_pools  # noqa: E501

        list cloudspace's server pools  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cloudspaces_server_pools(customer_id, cloudspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str x_fields: An optional fields mask
        :return: ServerPoolList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_cloudspaces_server_pools_with_http_info(customer_id, cloudspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_cloudspaces_server_pools_with_http_info(customer_id, cloudspace_id, **kwargs)  # noqa: E501
            return data

    def list_cloudspaces_server_pools_with_http_info(self, customer_id, cloudspace_id, **kwargs):  # noqa: E501
        """list_cloudspaces_server_pools  # noqa: E501

        list cloudspace's server pools  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cloudspaces_server_pools_with_http_info(customer_id, cloudspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str x_fields: An optional fields mask
        :return: ServerPoolList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cloudspaces_server_pools" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `list_cloudspaces_server_pools`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `list_cloudspaces_server_pools`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/server-pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServerPoolList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_customer_cards(self, customer_id, **kwargs):  # noqa: E501
        """list_customer_cards  # noqa: E501

        List customer Cards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_customer_cards(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_customer_cards_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_customer_cards_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def list_customer_cards_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """list_customer_cards  # noqa: E501

        List customer Cards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_customer_cards_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_customer_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `list_customer_cards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customer/{customer_id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_load_balancers(self, customer_id, cloudspace_id, **kwargs):  # noqa: E501
        """list_load_balancers  # noqa: E501

        list cloudspace's load balancers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_load_balancers(customer_id, cloudspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str x_fields: An optional fields mask
        :return: LoadBalancerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_load_balancers_with_http_info(customer_id, cloudspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_load_balancers_with_http_info(customer_id, cloudspace_id, **kwargs)  # noqa: E501
            return data

    def list_load_balancers_with_http_info(self, customer_id, cloudspace_id, **kwargs):  # noqa: E501
        """list_load_balancers  # noqa: E501

        list cloudspace's load balancers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_load_balancers_with_http_info(customer_id, cloudspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str x_fields: An optional fields mask
        :return: LoadBalancerList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_load_balancers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `list_load_balancers`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `list_load_balancers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/load-balancers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoadBalancerList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_server_pool_hosts(self, customer_id, cloudspace_id, serverpool_id, **kwargs):  # noqa: E501
        """list_server_pool_hosts  # noqa: E501

        List hosts inside server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_server_pool_hosts(customer_id, cloudspace_id, serverpool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str x_fields: An optional fields mask
        :return: ServerPoolHosts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_server_pool_hosts_with_http_info(customer_id, cloudspace_id, serverpool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_server_pool_hosts_with_http_info(customer_id, cloudspace_id, serverpool_id, **kwargs)  # noqa: E501
            return data

    def list_server_pool_hosts_with_http_info(self, customer_id, cloudspace_id, serverpool_id, **kwargs):  # noqa: E501
        """list_server_pool_hosts  # noqa: E501

        List hosts inside server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_server_pool_hosts_with_http_info(customer_id, cloudspace_id, serverpool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str x_fields: An optional fields mask
        :return: ServerPoolHosts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'serverpool_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_server_pool_hosts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `list_server_pool_hosts`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `list_server_pool_hosts`")  # noqa: E501
        # verify the required parameter 'serverpool_id' is set
        if self.api_client.client_side_validation and ('serverpool_id' not in params or
                                                       params['serverpool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serverpool_id` when calling `list_server_pool_hosts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'serverpool_id' in params:
            path_params['serverpool_id'] = params['serverpool_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/server-pools/{serverpool_id}/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServerPoolHosts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_host_from_server_pool(self, customer_id, cloudspace_id, serverpool_id, host_id, **kwargs):  # noqa: E501
        """remove_host_from_server_pool  # noqa: E501

        Remove Host from server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_host_from_server_pool(customer_id, cloudspace_id, serverpool_id, host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str host_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_host_from_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, host_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_host_from_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, host_id, **kwargs)  # noqa: E501
            return data

    def remove_host_from_server_pool_with_http_info(self, customer_id, cloudspace_id, serverpool_id, host_id, **kwargs):  # noqa: E501
        """remove_host_from_server_pool  # noqa: E501

        Remove Host from server pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_host_from_server_pool_with_http_info(customer_id, cloudspace_id, serverpool_id, host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str host_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'serverpool_id', 'host_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_host_from_server_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `remove_host_from_server_pool`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `remove_host_from_server_pool`")  # noqa: E501
        # verify the required parameter 'serverpool_id' is set
        if self.api_client.client_side_validation and ('serverpool_id' not in params or
                                                       params['serverpool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serverpool_id` when calling `remove_host_from_server_pool`")  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and ('host_id' not in params or
                                                       params['host_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `host_id` when calling `remove_host_from_server_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'serverpool_id' in params:
            path_params['serverpool_id'] = params['serverpool_id']  # noqa: E501
        if 'host_id' in params:
            path_params['host_id'] = params['host_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/server-pools/{serverpool_id}/hosts/{host_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def renew_certificate(self, customer_id, cloudspace_id, reverseproxy_id, **kwargs):  # noqa: E501
        """renew_certificate  # noqa: E501

        Renew acme certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_certificate(customer_id, cloudspace_id, reverseproxy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str reverseproxy_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.renew_certificate_with_http_info(customer_id, cloudspace_id, reverseproxy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.renew_certificate_with_http_info(customer_id, cloudspace_id, reverseproxy_id, **kwargs)  # noqa: E501
            return data

    def renew_certificate_with_http_info(self, customer_id, cloudspace_id, reverseproxy_id, **kwargs):  # noqa: E501
        """renew_certificate  # noqa: E501

        Renew acme certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.renew_certificate_with_http_info(customer_id, cloudspace_id, reverseproxy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str reverseproxy_id: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'reverseproxy_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method renew_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `renew_certificate`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `renew_certificate`")  # noqa: E501
        # verify the required parameter 'reverseproxy_id' is set
        if self.api_client.client_side_validation and ('reverseproxy_id' not in params or
                                                       params['reverseproxy_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reverseproxy_id` when calling `renew_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'reverseproxy_id' in params:
            path_params['reverseproxy_id'] = params['reverseproxy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/reverse-proxies/{reverseproxy_id}/renew-certificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_customer_card_as_default(self, customer_id, card_id, **kwargs):  # noqa: E501
        """set_customer_card_as_default  # noqa: E501

        Set customer Card as Default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_customer_card_as_default(customer_id, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str card_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_customer_card_as_default_with_http_info(customer_id, card_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_customer_card_as_default_with_http_info(customer_id, card_id, **kwargs)  # noqa: E501
            return data

    def set_customer_card_as_default_with_http_info(self, customer_id, card_id, **kwargs):  # noqa: E501
        """set_customer_card_as_default  # noqa: E501

        Set customer Card as Default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_customer_card_as_default_with_http_info(customer_id, card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str card_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'card_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_customer_card_as_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `set_customer_card_as_default`")  # noqa: E501
        # verify the required parameter 'card_id' is set
        if self.api_client.client_side_validation and ('card_id' not in params or
                                                       params['card_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `card_id` when calling `set_customer_card_as_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'card_id' in params:
            path_params['card_id'] = params['card_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customer/{customer_id}/cards/{card_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_load_balancer_info(self, customer_id, cloudspace_id, loadbalancer_id, **kwargs):  # noqa: E501
        """show_load_balancer_info  # noqa: E501

        Show load balancer information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_load_balancer_info(customer_id, cloudspace_id, loadbalancer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str loadbalancer_id: (required)
        :param str x_fields: An optional fields mask
        :return: ShowLoadBalancerFull
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_load_balancer_info_with_http_info(customer_id, cloudspace_id, loadbalancer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_load_balancer_info_with_http_info(customer_id, cloudspace_id, loadbalancer_id, **kwargs)  # noqa: E501
            return data

    def show_load_balancer_info_with_http_info(self, customer_id, cloudspace_id, loadbalancer_id, **kwargs):  # noqa: E501
        """show_load_balancer_info  # noqa: E501

        Show load balancer information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_load_balancer_info_with_http_info(customer_id, cloudspace_id, loadbalancer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str loadbalancer_id: (required)
        :param str x_fields: An optional fields mask
        :return: ShowLoadBalancerFull
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'loadbalancer_id', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_load_balancer_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `show_load_balancer_info`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `show_load_balancer_info`")  # noqa: E501
        # verify the required parameter 'loadbalancer_id' is set
        if self.api_client.client_side_validation and ('loadbalancer_id' not in params or
                                                       params['loadbalancer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `loadbalancer_id` when calling `show_load_balancer_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'loadbalancer_id' in params:
            path_params['loadbalancer_id'] = params['loadbalancer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/load-balancers/{loadbalancer_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShowLoadBalancerFull',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_load_balancer_info(self, customer_id, cloudspace_id, loadbalancer_id, payload, **kwargs):  # noqa: E501
        """update_load_balancer_info  # noqa: E501

        Update load balancer information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_load_balancer_info(customer_id, cloudspace_id, loadbalancer_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str loadbalancer_id: (required)
        :param CreateLoadBalancerFull payload: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_load_balancer_info_with_http_info(customer_id, cloudspace_id, loadbalancer_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.update_load_balancer_info_with_http_info(customer_id, cloudspace_id, loadbalancer_id, payload, **kwargs)  # noqa: E501
            return data

    def update_load_balancer_info_with_http_info(self, customer_id, cloudspace_id, loadbalancer_id, payload, **kwargs):  # noqa: E501
        """update_load_balancer_info  # noqa: E501

        Update load balancer information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_load_balancer_info_with_http_info(customer_id, cloudspace_id, loadbalancer_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str loadbalancer_id: (required)
        :param CreateLoadBalancerFull payload: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'loadbalancer_id', 'payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_load_balancer_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `update_load_balancer_info`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `update_load_balancer_info`")  # noqa: E501
        # verify the required parameter 'loadbalancer_id' is set
        if self.api_client.client_side_validation and ('loadbalancer_id' not in params or
                                                       params['loadbalancer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `loadbalancer_id` when calling `update_load_balancer_info`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `update_load_balancer_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'loadbalancer_id' in params:
            path_params['loadbalancer_id'] = params['loadbalancer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/load-balancers/{loadbalancer_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_reverse_proxy_info(self, customer_id, cloudspace_id, reverseproxy_id, payload, **kwargs):  # noqa: E501
        """update_reverse_proxy_info  # noqa: E501

        Update reverse proxy information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_reverse_proxy_info(customer_id, cloudspace_id, reverseproxy_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str reverseproxy_id: (required)
        :param CreateReverseProxyFull payload: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_reverse_proxy_info_with_http_info(customer_id, cloudspace_id, reverseproxy_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.update_reverse_proxy_info_with_http_info(customer_id, cloudspace_id, reverseproxy_id, payload, **kwargs)  # noqa: E501
            return data

    def update_reverse_proxy_info_with_http_info(self, customer_id, cloudspace_id, reverseproxy_id, payload, **kwargs):  # noqa: E501
        """update_reverse_proxy_info  # noqa: E501

        Update reverse proxy information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_reverse_proxy_info_with_http_info(customer_id, cloudspace_id, reverseproxy_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str reverseproxy_id: (required)
        :param CreateReverseProxyFull payload: (required)
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'reverseproxy_id', 'payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_reverse_proxy_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `update_reverse_proxy_info`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `update_reverse_proxy_info`")  # noqa: E501
        # verify the required parameter 'reverseproxy_id' is set
        if self.api_client.client_side_validation and ('reverseproxy_id' not in params or
                                                       params['reverseproxy_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reverseproxy_id` when calling `update_reverse_proxy_info`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `update_reverse_proxy_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'reverseproxy_id' in params:
            path_params['reverseproxy_id'] = params['reverseproxy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/reverse-proxies/{reverseproxy_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_server_pool_info(self, customer_id, cloudspace_id, serverpool_id, **kwargs):  # noqa: E501
        """update_server_pool_info  # noqa: E501

        Update server pool information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_server_pool_info(customer_id, cloudspace_id, serverpool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str name: Name of the server pool
        :param str description: Description of the server pool
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_server_pool_info_with_http_info(customer_id, cloudspace_id, serverpool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_server_pool_info_with_http_info(customer_id, cloudspace_id, serverpool_id, **kwargs)  # noqa: E501
            return data

    def update_server_pool_info_with_http_info(self, customer_id, cloudspace_id, serverpool_id, **kwargs):  # noqa: E501
        """update_server_pool_info  # noqa: E501

        Update server pool information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_server_pool_info_with_http_info(customer_id, cloudspace_id, serverpool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param str serverpool_id: (required)
        :param str name: Name of the server pool
        :param str description: Description of the server pool
        :param str x_fields: An optional fields mask
        :return: SuccessModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'serverpool_id', 'name', 'description', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_server_pool_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `update_server_pool_info`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `update_server_pool_info`")  # noqa: E501
        # verify the required parameter 'serverpool_id' is set
        if self.api_client.client_side_validation and ('serverpool_id' not in params or
                                                       params['serverpool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serverpool_id` when calling `update_server_pool_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501
        if 'serverpool_id' in params:
            path_params['serverpool_id'] = params['serverpool_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/server-pools/{serverpool_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_traefik_config(self, customer_id, cloudspace_id, payload, **kwargs):  # noqa: E501
        """update_traefik_config  # noqa: E501

        Update traefik config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_traefik_config(customer_id, cloudspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param IngressConfig payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_traefik_config_with_http_info(customer_id, cloudspace_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.update_traefik_config_with_http_info(customer_id, cloudspace_id, payload, **kwargs)  # noqa: E501
            return data

    def update_traefik_config_with_http_info(self, customer_id, cloudspace_id, payload, **kwargs):  # noqa: E501
        """update_traefik_config  # noqa: E501

        Update traefik config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_traefik_config_with_http_info(customer_id, cloudspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: (required)
        :param str cloudspace_id: (required)
        :param IngressConfig payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'cloudspace_id', 'payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_traefik_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `update_traefik_config`")  # noqa: E501
        # verify the required parameter 'cloudspace_id' is set
        if self.api_client.client_side_validation and ('cloudspace_id' not in params or
                                                       params['cloudspace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloudspace_id` when calling `update_traefik_config`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `update_traefik_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501
        if 'cloudspace_id' in params:
            path_params['cloudspace_id'] = params['cloudspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/alpha/customers/{customer_id}/cloudspaces/{cloudspace_id}/ingress/traefik', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
