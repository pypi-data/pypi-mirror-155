# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class LegalDocumentVersions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'privacy_policy': 'LegalDocumentVersion',
        'cookie_policy': 'LegalDocumentVersion',
        'acceptable_use_policy': 'LegalDocumentVersion',
        'terms_and_conditions': 'LegalDocumentVersion'
    }

    attribute_map = {
        'privacy_policy': 'privacy_policy',
        'cookie_policy': 'cookie_policy',
        'acceptable_use_policy': 'acceptable_use_policy',
        'terms_and_conditions': 'terms_and_conditions'
    }

    def __init__(self, privacy_policy=None, cookie_policy=None, acceptable_use_policy=None, terms_and_conditions=None, _configuration=None):  # noqa: E501
        """LegalDocumentVersions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._privacy_policy = None
        self._cookie_policy = None
        self._acceptable_use_policy = None
        self._terms_and_conditions = None
        self.discriminator = None

        if privacy_policy is not None:
            self.privacy_policy = privacy_policy
        if cookie_policy is not None:
            self.cookie_policy = cookie_policy
        if acceptable_use_policy is not None:
            self.acceptable_use_policy = acceptable_use_policy
        if terms_and_conditions is not None:
            self.terms_and_conditions = terms_and_conditions

    @property
    def privacy_policy(self):
        """Gets the privacy_policy of this LegalDocumentVersions.  # noqa: E501


        :return: The privacy_policy of this LegalDocumentVersions.  # noqa: E501
        :rtype: LegalDocumentVersion
        """
        return self._privacy_policy

    @privacy_policy.setter
    def privacy_policy(self, privacy_policy):
        """Sets the privacy_policy of this LegalDocumentVersions.


        :param privacy_policy: The privacy_policy of this LegalDocumentVersions.  # noqa: E501
        :type: LegalDocumentVersion
        """

        self._privacy_policy = privacy_policy

    @property
    def cookie_policy(self):
        """Gets the cookie_policy of this LegalDocumentVersions.  # noqa: E501


        :return: The cookie_policy of this LegalDocumentVersions.  # noqa: E501
        :rtype: LegalDocumentVersion
        """
        return self._cookie_policy

    @cookie_policy.setter
    def cookie_policy(self, cookie_policy):
        """Sets the cookie_policy of this LegalDocumentVersions.


        :param cookie_policy: The cookie_policy of this LegalDocumentVersions.  # noqa: E501
        :type: LegalDocumentVersion
        """

        self._cookie_policy = cookie_policy

    @property
    def acceptable_use_policy(self):
        """Gets the acceptable_use_policy of this LegalDocumentVersions.  # noqa: E501


        :return: The acceptable_use_policy of this LegalDocumentVersions.  # noqa: E501
        :rtype: LegalDocumentVersion
        """
        return self._acceptable_use_policy

    @acceptable_use_policy.setter
    def acceptable_use_policy(self, acceptable_use_policy):
        """Sets the acceptable_use_policy of this LegalDocumentVersions.


        :param acceptable_use_policy: The acceptable_use_policy of this LegalDocumentVersions.  # noqa: E501
        :type: LegalDocumentVersion
        """

        self._acceptable_use_policy = acceptable_use_policy

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this LegalDocumentVersions.  # noqa: E501


        :return: The terms_and_conditions of this LegalDocumentVersions.  # noqa: E501
        :rtype: LegalDocumentVersion
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this LegalDocumentVersions.


        :param terms_and_conditions: The terms_and_conditions of this LegalDocumentVersions.  # noqa: E501
        :type: LegalDocumentVersion
        """

        self._terms_and_conditions = terms_and_conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegalDocumentVersions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalDocumentVersions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegalDocumentVersions):
            return True

        return self.to_dict() != other.to_dict()
