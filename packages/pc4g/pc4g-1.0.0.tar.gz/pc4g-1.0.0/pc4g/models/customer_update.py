# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class CustomerUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billable': 'bool',
        'company_information': 'object',
        'discount': 'float',
        'external_customer_id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'billable': 'billable',
        'company_information': 'company_information',
        'discount': 'discount',
        'external_customer_id': 'external_customer_id',
        'status': 'status'
    }

    def __init__(self, billable=None, company_information=None, discount=None, external_customer_id=None, status=None, _configuration=None):  # noqa: E501
        """CustomerUpdate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable = None
        self._company_information = None
        self._discount = None
        self._external_customer_id = None
        self._status = None
        self.discriminator = None

        if billable is not None:
            self.billable = billable
        if company_information is not None:
            self.company_information = company_information
        if discount is not None:
            self.discount = discount
        if external_customer_id is not None:
            self.external_customer_id = external_customer_id
        if status is not None:
            self.status = status

    @property
    def billable(self):
        """Gets the billable of this CustomerUpdate.  # noqa: E501

        Customer is billable  # noqa: E501

        :return: The billable of this CustomerUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this CustomerUpdate.

        Customer is billable  # noqa: E501

        :param billable: The billable of this CustomerUpdate.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def company_information(self):
        """Gets the company_information of this CustomerUpdate.  # noqa: E501

        Company Information  # noqa: E501

        :return: The company_information of this CustomerUpdate.  # noqa: E501
        :rtype: object
        """
        return self._company_information

    @company_information.setter
    def company_information(self, company_information):
        """Sets the company_information of this CustomerUpdate.

        Company Information  # noqa: E501

        :param company_information: The company_information of this CustomerUpdate.  # noqa: E501
        :type: object
        """

        self._company_information = company_information

    @property
    def discount(self):
        """Gets the discount of this CustomerUpdate.  # noqa: E501

        Discount for this customer defined by VCO in percentage  # noqa: E501

        :return: The discount of this CustomerUpdate.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this CustomerUpdate.

        Discount for this customer defined by VCO in percentage  # noqa: E501

        :param discount: The discount of this CustomerUpdate.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def external_customer_id(self):
        """Gets the external_customer_id of this CustomerUpdate.  # noqa: E501

        Reference to this customer in an external system  # noqa: E501

        :return: The external_customer_id of this CustomerUpdate.  # noqa: E501
        :rtype: str
        """
        return self._external_customer_id

    @external_customer_id.setter
    def external_customer_id(self, external_customer_id):
        """Sets the external_customer_id of this CustomerUpdate.

        Reference to this customer in an external system  # noqa: E501

        :param external_customer_id: The external_customer_id of this CustomerUpdate.  # noqa: E501
        :type: str
        """

        self._external_customer_id = external_customer_id

    @property
    def status(self):
        """Gets the status of this CustomerUpdate.  # noqa: E501

        Customer status  # noqa: E501

        :return: The status of this CustomerUpdate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomerUpdate.

        Customer status  # noqa: E501

        :param status: The status of this CustomerUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING_CARD", "PENDING_APPROVAL", "ACTIVE", "DISABLED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerUpdate):
            return True

        return self.to_dict() != other.to_dict()
