# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class AccountConsumptionTsModelCloudspaces(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_id': 'str',
        'name': 'str',
        'mode': 'str',
        'consumption': 'list[AccountConsumptionTsModelCloudspacesConsumption]',
        'vms': 'list[AccountConsumptionTsModelCloudspacesVms]'
    }

    attribute_map = {
        'cloudspace_id': 'cloudspace_id',
        'name': 'name',
        'mode': 'mode',
        'consumption': 'consumption',
        'vms': 'vms'
    }

    def __init__(self, cloudspace_id=None, name=None, mode=None, consumption=None, vms=None, _configuration=None):  # noqa: E501
        """AccountConsumptionTsModelCloudspaces - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cloudspace_id = None
        self._name = None
        self._mode = None
        self._consumption = None
        self._vms = None
        self.discriminator = None

        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if name is not None:
            self.name = name
        if mode is not None:
            self.mode = mode
        if consumption is not None:
            self.consumption = consumption
        if vms is not None:
            self.vms = vms

    @property
    def cloudspace_id(self):
        """Gets the cloudspace_id of this AccountConsumptionTsModelCloudspaces.  # noqa: E501


        :return: The cloudspace_id of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id):
        """Sets the cloudspace_id of this AccountConsumptionTsModelCloudspaces.


        :param cloudspace_id: The cloudspace_id of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def name(self):
        """Gets the name of this AccountConsumptionTsModelCloudspaces.  # noqa: E501


        :return: The name of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountConsumptionTsModelCloudspaces.


        :param name: The name of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mode(self):
        """Gets the mode of this AccountConsumptionTsModelCloudspaces.  # noqa: E501


        :return: The mode of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AccountConsumptionTsModelCloudspaces.


        :param mode: The mode of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def consumption(self):
        """Gets the consumption of this AccountConsumptionTsModelCloudspaces.  # noqa: E501


        :return: The consumption of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :rtype: list[AccountConsumptionTsModelCloudspacesConsumption]
        """
        return self._consumption

    @consumption.setter
    def consumption(self, consumption):
        """Sets the consumption of this AccountConsumptionTsModelCloudspaces.


        :param consumption: The consumption of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :type: list[AccountConsumptionTsModelCloudspacesConsumption]
        """

        self._consumption = consumption

    @property
    def vms(self):
        """Gets the vms of this AccountConsumptionTsModelCloudspaces.  # noqa: E501


        :return: The vms of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :rtype: list[AccountConsumptionTsModelCloudspacesVms]
        """
        return self._vms

    @vms.setter
    def vms(self, vms):
        """Sets the vms of this AccountConsumptionTsModelCloudspaces.


        :param vms: The vms of this AccountConsumptionTsModelCloudspaces.  # noqa: E501
        :type: list[AccountConsumptionTsModelCloudspacesVms]
        """

        self._vms = vms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountConsumptionTsModelCloudspaces, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountConsumptionTsModelCloudspaces):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountConsumptionTsModelCloudspaces):
            return True

        return self.to_dict() != other.to_dict()
