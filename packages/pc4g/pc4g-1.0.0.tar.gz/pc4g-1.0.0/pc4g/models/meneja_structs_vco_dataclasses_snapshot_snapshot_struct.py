# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class MenejaStructsVcoDataclassesSnapshotSnapshotStruct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snapshot_name': 'str',
        'snapshot_id': 'str',
        'creation_time': 'int',
        'is_automatic': 'bool'
    }

    attribute_map = {
        'snapshot_name': 'snapshot_name',
        'snapshot_id': 'snapshot_id',
        'creation_time': 'creation_time',
        'is_automatic': 'is_automatic'
    }

    def __init__(self, snapshot_name=None, snapshot_id=None, creation_time=None, is_automatic=None, _configuration=None):  # noqa: E501
        """MenejaStructsVcoDataclassesSnapshotSnapshotStruct - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._snapshot_name = None
        self._snapshot_id = None
        self._creation_time = None
        self._is_automatic = None
        self.discriminator = None

        self.snapshot_name = snapshot_name
        self.snapshot_id = snapshot_id
        self.creation_time = creation_time
        self.is_automatic = is_automatic

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501

        Snapshot name  # noqa: E501

        :return: The snapshot_name of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.

        Snapshot name  # noqa: E501

        :param snapshot_name: The snapshot_name of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and snapshot_name is None:
            raise ValueError("Invalid value for `snapshot_name`, must not be `None`")  # noqa: E501

        self._snapshot_name = snapshot_name

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501

        Snapshot id  # noqa: E501

        :return: The snapshot_id of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.

        Snapshot id  # noqa: E501

        :param snapshot_id: The snapshot_id of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and snapshot_id is None:
            raise ValueError("Invalid value for `snapshot_id`, must not be `None`")  # noqa: E501

        self._snapshot_id = snapshot_id

    @property
    def creation_time(self):
        """Gets the creation_time of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501

        Creation time of snapshot  # noqa: E501

        :return: The creation_time of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.

        Creation time of snapshot  # noqa: E501

        :param creation_time: The creation_time of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def is_automatic(self):
        """Gets the is_automatic of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501

        Include automatic snapshots  # noqa: E501

        :return: The is_automatic of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501
        :rtype: bool
        """
        return self._is_automatic

    @is_automatic.setter
    def is_automatic(self, is_automatic):
        """Sets the is_automatic of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.

        Include automatic snapshots  # noqa: E501

        :param is_automatic: The is_automatic of this MenejaStructsVcoDataclassesSnapshotSnapshotStruct.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_automatic is None:
            raise ValueError("Invalid value for `is_automatic`, must not be `None`")  # noqa: E501

        self._is_automatic = is_automatic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MenejaStructsVcoDataclassesSnapshotSnapshotStruct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MenejaStructsVcoDataclassesSnapshotSnapshotStruct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MenejaStructsVcoDataclassesSnapshotSnapshotStruct):
            return True

        return self.to_dict() != other.to_dict()
