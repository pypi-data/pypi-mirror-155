# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class CustomerSelfCreateBillingInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'contact_name': 'str',
        'email': 'str',
        'phone': 'str',
        'vat': 'str',
        'coordinates': 'object'
    }

    attribute_map = {
        'address': 'address',
        'contact_name': 'contact_name',
        'email': 'email',
        'phone': 'phone',
        'vat': 'vat',
        'coordinates': 'coordinates'
    }

    def __init__(self, address=None, contact_name=None, email=None, phone=None, vat=None, coordinates=None, _configuration=None):  # noqa: E501
        """CustomerSelfCreateBillingInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._contact_name = None
        self._email = None
        self._phone = None
        self._vat = None
        self._coordinates = None
        self.discriminator = None

        self.address = address
        self.contact_name = contact_name
        self.email = email
        self.phone = phone
        self.vat = vat
        if coordinates is not None:
            self.coordinates = coordinates

    @property
    def address(self):
        """Gets the address of this CustomerSelfCreateBillingInformation.  # noqa: E501

        Billing address  # noqa: E501

        :return: The address of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CustomerSelfCreateBillingInformation.

        Billing address  # noqa: E501

        :param address: The address of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def contact_name(self):
        """Gets the contact_name of this CustomerSelfCreateBillingInformation.  # noqa: E501

        Billing contact person  # noqa: E501

        :return: The contact_name of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this CustomerSelfCreateBillingInformation.

        Billing contact person  # noqa: E501

        :param contact_name: The contact_name of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contact_name is None:
            raise ValueError("Invalid value for `contact_name`, must not be `None`")  # noqa: E501

        self._contact_name = contact_name

    @property
    def email(self):
        """Gets the email of this CustomerSelfCreateBillingInformation.  # noqa: E501

        Email address for billing messages  # noqa: E501

        :return: The email of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerSelfCreateBillingInformation.

        Email address for billing messages  # noqa: E501

        :param email: The email of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this CustomerSelfCreateBillingInformation.  # noqa: E501

        Billing phone  # noqa: E501

        :return: The phone of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerSelfCreateBillingInformation.

        Billing phone  # noqa: E501

        :param phone: The phone of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def vat(self):
        """Gets the vat of this CustomerSelfCreateBillingInformation.  # noqa: E501

        VAT number  # noqa: E501

        :return: The vat of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this CustomerSelfCreateBillingInformation.

        VAT number  # noqa: E501

        :param vat: The vat of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and vat is None:
            raise ValueError("Invalid value for `vat`, must not be `None`")  # noqa: E501

        self._vat = vat

    @property
    def coordinates(self):
        """Gets the coordinates of this CustomerSelfCreateBillingInformation.  # noqa: E501

        Company Coordinates  # noqa: E501

        :return: The coordinates of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :rtype: object
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this CustomerSelfCreateBillingInformation.

        Company Coordinates  # noqa: E501

        :param coordinates: The coordinates of this CustomerSelfCreateBillingInformation.  # noqa: E501
        :type: object
        """

        self._coordinates = coordinates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerSelfCreateBillingInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerSelfCreateBillingInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerSelfCreateBillingInformation):
            return True

        return self.to_dict() != other.to_dict()
