# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class ExposeDiskModelEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'psk': 'str',
        'user': 'str',
        'port': 'int',
        'name': 'str',
        'address': 'str',
        'private_port': 'int',
        'private_address': 'str'
    }

    attribute_map = {
        'psk': 'psk',
        'user': 'user',
        'port': 'port',
        'name': 'name',
        'address': 'address',
        'private_port': 'private_port',
        'private_address': 'private_address'
    }

    def __init__(self, psk=None, user=None, port=None, name=None, address=None, private_port=None, private_address=None, _configuration=None):  # noqa: E501
        """ExposeDiskModelEndpoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._psk = None
        self._user = None
        self._port = None
        self._name = None
        self._address = None
        self._private_port = None
        self._private_address = None
        self.discriminator = None

        if psk is not None:
            self.psk = psk
        if user is not None:
            self.user = user
        if port is not None:
            self.port = port
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if private_port is not None:
            self.private_port = private_port
        if private_address is not None:
            self.private_address = private_address

    @property
    def psk(self):
        """Gets the psk of this ExposeDiskModelEndpoint.  # noqa: E501


        :return: The psk of this ExposeDiskModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._psk

    @psk.setter
    def psk(self, psk):
        """Sets the psk of this ExposeDiskModelEndpoint.


        :param psk: The psk of this ExposeDiskModelEndpoint.  # noqa: E501
        :type: str
        """

        self._psk = psk

    @property
    def user(self):
        """Gets the user of this ExposeDiskModelEndpoint.  # noqa: E501


        :return: The user of this ExposeDiskModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ExposeDiskModelEndpoint.


        :param user: The user of this ExposeDiskModelEndpoint.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def port(self):
        """Gets the port of this ExposeDiskModelEndpoint.  # noqa: E501


        :return: The port of this ExposeDiskModelEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ExposeDiskModelEndpoint.


        :param port: The port of this ExposeDiskModelEndpoint.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def name(self):
        """Gets the name of this ExposeDiskModelEndpoint.  # noqa: E501


        :return: The name of this ExposeDiskModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExposeDiskModelEndpoint.


        :param name: The name of this ExposeDiskModelEndpoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this ExposeDiskModelEndpoint.  # noqa: E501


        :return: The address of this ExposeDiskModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ExposeDiskModelEndpoint.


        :param address: The address of this ExposeDiskModelEndpoint.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def private_port(self):
        """Gets the private_port of this ExposeDiskModelEndpoint.  # noqa: E501


        :return: The private_port of this ExposeDiskModelEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._private_port

    @private_port.setter
    def private_port(self, private_port):
        """Sets the private_port of this ExposeDiskModelEndpoint.


        :param private_port: The private_port of this ExposeDiskModelEndpoint.  # noqa: E501
        :type: int
        """

        self._private_port = private_port

    @property
    def private_address(self):
        """Gets the private_address of this ExposeDiskModelEndpoint.  # noqa: E501


        :return: The private_address of this ExposeDiskModelEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._private_address

    @private_address.setter
    def private_address(self, private_address):
        """Sets the private_address of this ExposeDiskModelEndpoint.


        :param private_address: The private_address of this ExposeDiskModelEndpoint.  # noqa: E501
        :type: str
        """

        self._private_address = private_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExposeDiskModelEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExposeDiskModelEndpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExposeDiskModelEndpoint):
            return True

        return self.to_dict() != other.to_dict()
