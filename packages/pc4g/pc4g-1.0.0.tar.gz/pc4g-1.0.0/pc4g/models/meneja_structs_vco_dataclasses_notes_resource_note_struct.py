# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class MenejaStructsVcoDataclassesNotesResourceNoteStruct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'content': 'str',
        'creation_time': 'float',
        'last_update_time': 'float',
        'created_by': 'str',
        'modified_by': 'str',
        'id': 'str'
    }

    attribute_map = {
        'title': 'title',
        'content': 'content',
        'creation_time': 'creation_time',
        'last_update_time': 'last_update_time',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'id': 'id'
    }

    def __init__(self, title=None, content=None, creation_time=None, last_update_time=None, created_by=None, modified_by=None, id=None, _configuration=None):  # noqa: E501
        """MenejaStructsVcoDataclassesNotesResourceNoteStruct - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._content = None
        self._creation_time = None
        self._last_update_time = None
        self._created_by = None
        self._modified_by = None
        self._id = None
        self.discriminator = None

        self.title = title
        self.content = content
        self.creation_time = creation_time
        self.last_update_time = last_update_time
        self.created_by = created_by
        self.modified_by = modified_by
        self.id = id

    @property
    def title(self):
        """Gets the title of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501

        Note title  # noqa: E501

        :return: The title of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.

        Note title  # noqa: E501

        :param title: The title of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501

        Note content  # noqa: E501

        :return: The content of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.

        Note content  # noqa: E501

        :param content: The content of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def creation_time(self):
        """Gets the creation_time of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501

        Creation time of note  # noqa: E501

        :return: The creation_time of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :rtype: float
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.

        Creation time of note  # noqa: E501

        :param creation_time: The creation_time of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501

        modification time of note  # noqa: E501

        :return: The last_update_time of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :rtype: float
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.

        modification time of note  # noqa: E501

        :param last_update_time: The last_update_time of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and last_update_time is None:
            raise ValueError("Invalid value for `last_update_time`, must not be `None`")  # noqa: E501

        self._last_update_time = last_update_time

    @property
    def created_by(self):
        """Gets the created_by of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501

        Note creator  # noqa: E501

        :return: The created_by of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.

        Note creator  # noqa: E501

        :param created_by: The created_by of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501

        Note modifier  # noqa: E501

        :return: The modified_by of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.

        Note modifier  # noqa: E501

        :param modified_by: The modified_by of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and modified_by is None:
            raise ValueError("Invalid value for `modified_by`, must not be `None`")  # noqa: E501

        self._modified_by = modified_by

    @property
    def id(self):
        """Gets the id of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501

        Note creator  # noqa: E501

        :return: The id of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.

        Note creator  # noqa: E501

        :param id: The id of this MenejaStructsVcoDataclassesNotesResourceNoteStruct.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MenejaStructsVcoDataclassesNotesResourceNoteStruct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MenejaStructsVcoDataclassesNotesResourceNoteStruct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MenejaStructsVcoDataclassesNotesResourceNoteStruct):
            return True

        return self.to_dict() != other.to_dict()
