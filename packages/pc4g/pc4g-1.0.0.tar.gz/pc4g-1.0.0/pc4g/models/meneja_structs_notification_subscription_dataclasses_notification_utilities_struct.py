# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statuses': 'list[MenejaStructsNotificationSubscriptionDataclassesMaintenanceStatusStruct]',
        'impacts': 'list[MenejaStructsNotificationSubscriptionDataclassesServiceImpactStruct]',
        'notification_types': 'object'
    }

    attribute_map = {
        'statuses': 'statuses',
        'impacts': 'impacts',
        'notification_types': 'notification_types'
    }

    def __init__(self, statuses=None, impacts=None, notification_types=None, _configuration=None):  # noqa: E501
        """MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._statuses = None
        self._impacts = None
        self._notification_types = None
        self.discriminator = None

        self.statuses = statuses
        self.impacts = impacts
        self.notification_types = notification_types

    @property
    def statuses(self):
        """Gets the statuses of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501

        maintenance statuses  # noqa: E501

        :return: The statuses of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501
        :rtype: list[MenejaStructsNotificationSubscriptionDataclassesMaintenanceStatusStruct]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.

        maintenance statuses  # noqa: E501

        :param statuses: The statuses of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501
        :type: list[MenejaStructsNotificationSubscriptionDataclassesMaintenanceStatusStruct]
        """
        if self._configuration.client_side_validation and statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")  # noqa: E501

        self._statuses = statuses

    @property
    def impacts(self):
        """Gets the impacts of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501

        service impacts  # noqa: E501

        :return: The impacts of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501
        :rtype: list[MenejaStructsNotificationSubscriptionDataclassesServiceImpactStruct]
        """
        return self._impacts

    @impacts.setter
    def impacts(self, impacts):
        """Sets the impacts of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.

        service impacts  # noqa: E501

        :param impacts: The impacts of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501
        :type: list[MenejaStructsNotificationSubscriptionDataclassesServiceImpactStruct]
        """
        if self._configuration.client_side_validation and impacts is None:
            raise ValueError("Invalid value for `impacts`, must not be `None`")  # noqa: E501

        self._impacts = impacts

    @property
    def notification_types(self):
        """Gets the notification_types of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501

        notification types  # noqa: E501

        :return: The notification_types of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501
        :rtype: object
        """
        return self._notification_types

    @notification_types.setter
    def notification_types(self, notification_types):
        """Sets the notification_types of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.

        notification types  # noqa: E501

        :param notification_types: The notification_types of this MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and notification_types is None:
            raise ValueError("Invalid value for `notification_types`, must not be `None`")  # noqa: E501

        self._notification_types = notification_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MenejaStructsNotificationSubscriptionDataclassesNotificationUtilitiesStruct):
            return True

        return self.to_dict() != other.to_dict()
