# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class VmStatsModelSeries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'list[float]',
        'memory': 'list[int]',
        'vm_capacity': 'list[float]',
        'vm_latency': 'list[float]',
        'vm_iops': 'list[float]',
        'vm_bandwidth': 'list[float]',
        'vdisk_latency': 'list[VmStatsModelSeriesVdiskLatency]',
        'vdisk_capacity': 'list[VmStatsModelSeriesVdiskCapacity]',
        'vdisk_iops': 'list[VmStatsModelSeriesVdiskIops]',
        'vdisk_bandwidth': 'list[VmStatsModelSeriesVdiskBandwidth]',
        'network': 'list[VmStatsModelSeriesNetwork]'
    }

    attribute_map = {
        'cpu': 'cpu',
        'memory': 'memory',
        'vm_capacity': 'vm_capacity',
        'vm_latency': 'vm_latency',
        'vm_iops': 'vm_iops',
        'vm_bandwidth': 'vm_bandwidth',
        'vdisk_latency': 'vdisk_latency',
        'vdisk_capacity': 'vdisk_capacity',
        'vdisk_iops': 'vdisk_iops',
        'vdisk_bandwidth': 'vdisk_bandwidth',
        'network': 'network'
    }

    def __init__(self, cpu=None, memory=None, vm_capacity=None, vm_latency=None, vm_iops=None, vm_bandwidth=None, vdisk_latency=None, vdisk_capacity=None, vdisk_iops=None, vdisk_bandwidth=None, network=None, _configuration=None):  # noqa: E501
        """VmStatsModelSeries - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu = None
        self._memory = None
        self._vm_capacity = None
        self._vm_latency = None
        self._vm_iops = None
        self._vm_bandwidth = None
        self._vdisk_latency = None
        self._vdisk_capacity = None
        self._vdisk_iops = None
        self._vdisk_bandwidth = None
        self._network = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if memory is not None:
            self.memory = memory
        if vm_capacity is not None:
            self.vm_capacity = vm_capacity
        if vm_latency is not None:
            self.vm_latency = vm_latency
        if vm_iops is not None:
            self.vm_iops = vm_iops
        if vm_bandwidth is not None:
            self.vm_bandwidth = vm_bandwidth
        if vdisk_latency is not None:
            self.vdisk_latency = vdisk_latency
        if vdisk_capacity is not None:
            self.vdisk_capacity = vdisk_capacity
        if vdisk_iops is not None:
            self.vdisk_iops = vdisk_iops
        if vdisk_bandwidth is not None:
            self.vdisk_bandwidth = vdisk_bandwidth
        if network is not None:
            self.network = network

    @property
    def cpu(self):
        """Gets the cpu of this VmStatsModelSeries.  # noqa: E501


        :return: The cpu of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[float]
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this VmStatsModelSeries.


        :param cpu: The cpu of this VmStatsModelSeries.  # noqa: E501
        :type: list[float]
        """

        self._cpu = cpu

    @property
    def memory(self):
        """Gets the memory of this VmStatsModelSeries.  # noqa: E501


        :return: The memory of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[int]
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this VmStatsModelSeries.


        :param memory: The memory of this VmStatsModelSeries.  # noqa: E501
        :type: list[int]
        """

        self._memory = memory

    @property
    def vm_capacity(self):
        """Gets the vm_capacity of this VmStatsModelSeries.  # noqa: E501


        :return: The vm_capacity of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[float]
        """
        return self._vm_capacity

    @vm_capacity.setter
    def vm_capacity(self, vm_capacity):
        """Sets the vm_capacity of this VmStatsModelSeries.


        :param vm_capacity: The vm_capacity of this VmStatsModelSeries.  # noqa: E501
        :type: list[float]
        """

        self._vm_capacity = vm_capacity

    @property
    def vm_latency(self):
        """Gets the vm_latency of this VmStatsModelSeries.  # noqa: E501


        :return: The vm_latency of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[float]
        """
        return self._vm_latency

    @vm_latency.setter
    def vm_latency(self, vm_latency):
        """Sets the vm_latency of this VmStatsModelSeries.


        :param vm_latency: The vm_latency of this VmStatsModelSeries.  # noqa: E501
        :type: list[float]
        """

        self._vm_latency = vm_latency

    @property
    def vm_iops(self):
        """Gets the vm_iops of this VmStatsModelSeries.  # noqa: E501


        :return: The vm_iops of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[float]
        """
        return self._vm_iops

    @vm_iops.setter
    def vm_iops(self, vm_iops):
        """Sets the vm_iops of this VmStatsModelSeries.


        :param vm_iops: The vm_iops of this VmStatsModelSeries.  # noqa: E501
        :type: list[float]
        """

        self._vm_iops = vm_iops

    @property
    def vm_bandwidth(self):
        """Gets the vm_bandwidth of this VmStatsModelSeries.  # noqa: E501


        :return: The vm_bandwidth of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[float]
        """
        return self._vm_bandwidth

    @vm_bandwidth.setter
    def vm_bandwidth(self, vm_bandwidth):
        """Sets the vm_bandwidth of this VmStatsModelSeries.


        :param vm_bandwidth: The vm_bandwidth of this VmStatsModelSeries.  # noqa: E501
        :type: list[float]
        """

        self._vm_bandwidth = vm_bandwidth

    @property
    def vdisk_latency(self):
        """Gets the vdisk_latency of this VmStatsModelSeries.  # noqa: E501


        :return: The vdisk_latency of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[VmStatsModelSeriesVdiskLatency]
        """
        return self._vdisk_latency

    @vdisk_latency.setter
    def vdisk_latency(self, vdisk_latency):
        """Sets the vdisk_latency of this VmStatsModelSeries.


        :param vdisk_latency: The vdisk_latency of this VmStatsModelSeries.  # noqa: E501
        :type: list[VmStatsModelSeriesVdiskLatency]
        """

        self._vdisk_latency = vdisk_latency

    @property
    def vdisk_capacity(self):
        """Gets the vdisk_capacity of this VmStatsModelSeries.  # noqa: E501


        :return: The vdisk_capacity of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[VmStatsModelSeriesVdiskCapacity]
        """
        return self._vdisk_capacity

    @vdisk_capacity.setter
    def vdisk_capacity(self, vdisk_capacity):
        """Sets the vdisk_capacity of this VmStatsModelSeries.


        :param vdisk_capacity: The vdisk_capacity of this VmStatsModelSeries.  # noqa: E501
        :type: list[VmStatsModelSeriesVdiskCapacity]
        """

        self._vdisk_capacity = vdisk_capacity

    @property
    def vdisk_iops(self):
        """Gets the vdisk_iops of this VmStatsModelSeries.  # noqa: E501


        :return: The vdisk_iops of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[VmStatsModelSeriesVdiskIops]
        """
        return self._vdisk_iops

    @vdisk_iops.setter
    def vdisk_iops(self, vdisk_iops):
        """Sets the vdisk_iops of this VmStatsModelSeries.


        :param vdisk_iops: The vdisk_iops of this VmStatsModelSeries.  # noqa: E501
        :type: list[VmStatsModelSeriesVdiskIops]
        """

        self._vdisk_iops = vdisk_iops

    @property
    def vdisk_bandwidth(self):
        """Gets the vdisk_bandwidth of this VmStatsModelSeries.  # noqa: E501


        :return: The vdisk_bandwidth of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[VmStatsModelSeriesVdiskBandwidth]
        """
        return self._vdisk_bandwidth

    @vdisk_bandwidth.setter
    def vdisk_bandwidth(self, vdisk_bandwidth):
        """Sets the vdisk_bandwidth of this VmStatsModelSeries.


        :param vdisk_bandwidth: The vdisk_bandwidth of this VmStatsModelSeries.  # noqa: E501
        :type: list[VmStatsModelSeriesVdiskBandwidth]
        """

        self._vdisk_bandwidth = vdisk_bandwidth

    @property
    def network(self):
        """Gets the network of this VmStatsModelSeries.  # noqa: E501


        :return: The network of this VmStatsModelSeries.  # noqa: E501
        :rtype: list[VmStatsModelSeriesNetwork]
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VmStatsModelSeries.


        :param network: The network of this VmStatsModelSeries.  # noqa: E501
        :type: list[VmStatsModelSeriesNetwork]
        """

        self._network = network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VmStatsModelSeries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmStatsModelSeries):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VmStatsModelSeries):
            return True

        return self.to_dict() != other.to_dict()
