# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class VCOSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'self_registration': 'bool',
        'self_registration_approval_required': 'bool',
        'self_registration_card_required': 'bool'
    }

    attribute_map = {
        'self_registration': 'self_registration',
        'self_registration_approval_required': 'self_registration_approval_required',
        'self_registration_card_required': 'self_registration_card_required'
    }

    def __init__(self, self_registration=None, self_registration_approval_required=None, self_registration_card_required=None, _configuration=None):  # noqa: E501
        """VCOSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._self_registration = None
        self._self_registration_approval_required = None
        self._self_registration_card_required = None
        self.discriminator = None

        if self_registration is not None:
            self.self_registration = self_registration
        if self_registration_approval_required is not None:
            self.self_registration_approval_required = self_registration_approval_required
        if self_registration_card_required is not None:
            self.self_registration_card_required = self_registration_card_required

    @property
    def self_registration(self):
        """Gets the self_registration of this VCOSettings.  # noqa: E501

        Self registration is enabled for this VCO portal  # noqa: E501

        :return: The self_registration of this VCOSettings.  # noqa: E501
        :rtype: bool
        """
        return self._self_registration

    @self_registration.setter
    def self_registration(self, self_registration):
        """Sets the self_registration of this VCOSettings.

        Self registration is enabled for this VCO portal  # noqa: E501

        :param self_registration: The self_registration of this VCOSettings.  # noqa: E501
        :type: bool
        """

        self._self_registration = self_registration

    @property
    def self_registration_approval_required(self):
        """Gets the self_registration_approval_required of this VCOSettings.  # noqa: E501

        Self registered customers need approval from VCO admin  # noqa: E501

        :return: The self_registration_approval_required of this VCOSettings.  # noqa: E501
        :rtype: bool
        """
        return self._self_registration_approval_required

    @self_registration_approval_required.setter
    def self_registration_approval_required(self, self_registration_approval_required):
        """Sets the self_registration_approval_required of this VCOSettings.

        Self registered customers need approval from VCO admin  # noqa: E501

        :param self_registration_approval_required: The self_registration_approval_required of this VCOSettings.  # noqa: E501
        :type: bool
        """

        self._self_registration_approval_required = self_registration_approval_required

    @property
    def self_registration_card_required(self):
        """Gets the self_registration_card_required of this VCOSettings.  # noqa: E501

        Payment is required for Self registration for this VCO portal  # noqa: E501

        :return: The self_registration_card_required of this VCOSettings.  # noqa: E501
        :rtype: bool
        """
        return self._self_registration_card_required

    @self_registration_card_required.setter
    def self_registration_card_required(self, self_registration_card_required):
        """Sets the self_registration_card_required of this VCOSettings.

        Payment is required for Self registration for this VCO portal  # noqa: E501

        :param self_registration_card_required: The self_registration_card_required of this VCOSettings.  # noqa: E501
        :type: bool
        """

        self._self_registration_card_required = self_registration_card_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VCOSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VCOSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VCOSettings):
            return True

        return self.to_dict() != other.to_dict()
