# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class PortforwardsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portforward_id': 'str',
        'protocol': 'str',
        'local_port': 'int',
        'public_port': 'int',
        'public_ip': 'str',
        'vm_id': 'int'
    }

    attribute_map = {
        'portforward_id': 'portforward_id',
        'protocol': 'protocol',
        'local_port': 'local_port',
        'public_port': 'public_port',
        'public_ip': 'public_ip',
        'vm_id': 'vm_id'
    }

    def __init__(self, portforward_id=None, protocol=None, local_port=None, public_port=None, public_ip=None, vm_id=None, _configuration=None):  # noqa: E501
        """PortforwardsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._portforward_id = None
        self._protocol = None
        self._local_port = None
        self._public_port = None
        self._public_ip = None
        self._vm_id = None
        self.discriminator = None

        if portforward_id is not None:
            self.portforward_id = portforward_id
        if protocol is not None:
            self.protocol = protocol
        if local_port is not None:
            self.local_port = local_port
        if public_port is not None:
            self.public_port = public_port
        if public_ip is not None:
            self.public_ip = public_ip
        if vm_id is not None:
            self.vm_id = vm_id

    @property
    def portforward_id(self):
        """Gets the portforward_id of this PortforwardsModel.  # noqa: E501


        :return: The portforward_id of this PortforwardsModel.  # noqa: E501
        :rtype: str
        """
        return self._portforward_id

    @portforward_id.setter
    def portforward_id(self, portforward_id):
        """Sets the portforward_id of this PortforwardsModel.


        :param portforward_id: The portforward_id of this PortforwardsModel.  # noqa: E501
        :type: str
        """

        self._portforward_id = portforward_id

    @property
    def protocol(self):
        """Gets the protocol of this PortforwardsModel.  # noqa: E501


        :return: The protocol of this PortforwardsModel.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PortforwardsModel.


        :param protocol: The protocol of this PortforwardsModel.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def local_port(self):
        """Gets the local_port of this PortforwardsModel.  # noqa: E501


        :return: The local_port of this PortforwardsModel.  # noqa: E501
        :rtype: int
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this PortforwardsModel.


        :param local_port: The local_port of this PortforwardsModel.  # noqa: E501
        :type: int
        """

        self._local_port = local_port

    @property
    def public_port(self):
        """Gets the public_port of this PortforwardsModel.  # noqa: E501


        :return: The public_port of this PortforwardsModel.  # noqa: E501
        :rtype: int
        """
        return self._public_port

    @public_port.setter
    def public_port(self, public_port):
        """Sets the public_port of this PortforwardsModel.


        :param public_port: The public_port of this PortforwardsModel.  # noqa: E501
        :type: int
        """

        self._public_port = public_port

    @property
    def public_ip(self):
        """Gets the public_ip of this PortforwardsModel.  # noqa: E501


        :return: The public_ip of this PortforwardsModel.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this PortforwardsModel.


        :param public_ip: The public_ip of this PortforwardsModel.  # noqa: E501
        :type: str
        """

        self._public_ip = public_ip

    @property
    def vm_id(self):
        """Gets the vm_id of this PortforwardsModel.  # noqa: E501


        :return: The vm_id of this PortforwardsModel.  # noqa: E501
        :rtype: int
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this PortforwardsModel.


        :param vm_id: The vm_id of this PortforwardsModel.  # noqa: E501
        :type: int
        """

        self._vm_id = vm_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortforwardsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortforwardsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortforwardsModel):
            return True

        return self.to_dict() != other.to_dict()
