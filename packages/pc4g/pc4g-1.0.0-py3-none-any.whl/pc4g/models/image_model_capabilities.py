# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class ImageModelCapabilities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_memory': 'bool',
        'add_vcpu': 'bool',
        'remove_vcpu': 'bool',
        'add_disk': 'bool',
        'remove_disk': 'bool',
        'add_nic': 'bool',
        'remove_nic': 'bool'
    }

    attribute_map = {
        'add_memory': 'add_memory',
        'add_vcpu': 'add_vcpu',
        'remove_vcpu': 'remove_vcpu',
        'add_disk': 'add_disk',
        'remove_disk': 'remove_disk',
        'add_nic': 'add_nic',
        'remove_nic': 'remove_nic'
    }

    def __init__(self, add_memory=None, add_vcpu=None, remove_vcpu=None, add_disk=None, remove_disk=None, add_nic=None, remove_nic=None, _configuration=None):  # noqa: E501
        """ImageModelCapabilities - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._add_memory = None
        self._add_vcpu = None
        self._remove_vcpu = None
        self._add_disk = None
        self._remove_disk = None
        self._add_nic = None
        self._remove_nic = None
        self.discriminator = None

        if add_memory is not None:
            self.add_memory = add_memory
        if add_vcpu is not None:
            self.add_vcpu = add_vcpu
        if remove_vcpu is not None:
            self.remove_vcpu = remove_vcpu
        if add_disk is not None:
            self.add_disk = add_disk
        if remove_disk is not None:
            self.remove_disk = remove_disk
        if add_nic is not None:
            self.add_nic = add_nic
        if remove_nic is not None:
            self.remove_nic = remove_nic

    @property
    def add_memory(self):
        """Gets the add_memory of this ImageModelCapabilities.  # noqa: E501


        :return: The add_memory of this ImageModelCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._add_memory

    @add_memory.setter
    def add_memory(self, add_memory):
        """Sets the add_memory of this ImageModelCapabilities.


        :param add_memory: The add_memory of this ImageModelCapabilities.  # noqa: E501
        :type: bool
        """

        self._add_memory = add_memory

    @property
    def add_vcpu(self):
        """Gets the add_vcpu of this ImageModelCapabilities.  # noqa: E501


        :return: The add_vcpu of this ImageModelCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._add_vcpu

    @add_vcpu.setter
    def add_vcpu(self, add_vcpu):
        """Sets the add_vcpu of this ImageModelCapabilities.


        :param add_vcpu: The add_vcpu of this ImageModelCapabilities.  # noqa: E501
        :type: bool
        """

        self._add_vcpu = add_vcpu

    @property
    def remove_vcpu(self):
        """Gets the remove_vcpu of this ImageModelCapabilities.  # noqa: E501


        :return: The remove_vcpu of this ImageModelCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._remove_vcpu

    @remove_vcpu.setter
    def remove_vcpu(self, remove_vcpu):
        """Sets the remove_vcpu of this ImageModelCapabilities.


        :param remove_vcpu: The remove_vcpu of this ImageModelCapabilities.  # noqa: E501
        :type: bool
        """

        self._remove_vcpu = remove_vcpu

    @property
    def add_disk(self):
        """Gets the add_disk of this ImageModelCapabilities.  # noqa: E501


        :return: The add_disk of this ImageModelCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._add_disk

    @add_disk.setter
    def add_disk(self, add_disk):
        """Sets the add_disk of this ImageModelCapabilities.


        :param add_disk: The add_disk of this ImageModelCapabilities.  # noqa: E501
        :type: bool
        """

        self._add_disk = add_disk

    @property
    def remove_disk(self):
        """Gets the remove_disk of this ImageModelCapabilities.  # noqa: E501


        :return: The remove_disk of this ImageModelCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._remove_disk

    @remove_disk.setter
    def remove_disk(self, remove_disk):
        """Sets the remove_disk of this ImageModelCapabilities.


        :param remove_disk: The remove_disk of this ImageModelCapabilities.  # noqa: E501
        :type: bool
        """

        self._remove_disk = remove_disk

    @property
    def add_nic(self):
        """Gets the add_nic of this ImageModelCapabilities.  # noqa: E501


        :return: The add_nic of this ImageModelCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._add_nic

    @add_nic.setter
    def add_nic(self, add_nic):
        """Sets the add_nic of this ImageModelCapabilities.


        :param add_nic: The add_nic of this ImageModelCapabilities.  # noqa: E501
        :type: bool
        """

        self._add_nic = add_nic

    @property
    def remove_nic(self):
        """Gets the remove_nic of this ImageModelCapabilities.  # noqa: E501


        :return: The remove_nic of this ImageModelCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._remove_nic

    @remove_nic.setter
    def remove_nic(self, remove_nic):
        """Sets the remove_nic of this ImageModelCapabilities.


        :param remove_nic: The remove_nic of this ImageModelCapabilities.  # noqa: E501
        :type: bool
        """

        self._remove_nic = remove_nic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageModelCapabilities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageModelCapabilities):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageModelCapabilities):
            return True

        return self.to_dict() != other.to_dict()
