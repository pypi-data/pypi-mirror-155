# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class ColorScheme(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accent': 'str',
        'error': 'str',
        'info': 'str',
        'primary': 'str',
        'secondary': 'str',
        'success': 'str',
        'warning': 'str'
    }

    attribute_map = {
        'accent': 'accent',
        'error': 'error',
        'info': 'info',
        'primary': 'primary',
        'secondary': 'secondary',
        'success': 'success',
        'warning': 'warning'
    }

    def __init__(self, accent=None, error=None, info=None, primary=None, secondary=None, success=None, warning=None, _configuration=None):  # noqa: E501
        """ColorScheme - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._accent = None
        self._error = None
        self._info = None
        self._primary = None
        self._secondary = None
        self._success = None
        self._warning = None
        self.discriminator = None

        if accent is not None:
            self.accent = accent
        if error is not None:
            self.error = error
        if info is not None:
            self.info = info
        if primary is not None:
            self.primary = primary
        if secondary is not None:
            self.secondary = secondary
        if success is not None:
            self.success = success
        if warning is not None:
            self.warning = warning

    @property
    def accent(self):
        """Gets the accent of this ColorScheme.  # noqa: E501

        Accent color  # noqa: E501

        :return: The accent of this ColorScheme.  # noqa: E501
        :rtype: str
        """
        return self._accent

    @accent.setter
    def accent(self, accent):
        """Sets the accent of this ColorScheme.

        Accent color  # noqa: E501

        :param accent: The accent of this ColorScheme.  # noqa: E501
        :type: str
        """

        self._accent = accent

    @property
    def error(self):
        """Gets the error of this ColorScheme.  # noqa: E501

        Error color  # noqa: E501

        :return: The error of this ColorScheme.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ColorScheme.

        Error color  # noqa: E501

        :param error: The error of this ColorScheme.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def info(self):
        """Gets the info of this ColorScheme.  # noqa: E501

        Info color  # noqa: E501

        :return: The info of this ColorScheme.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ColorScheme.

        Info color  # noqa: E501

        :param info: The info of this ColorScheme.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def primary(self):
        """Gets the primary of this ColorScheme.  # noqa: E501

        Primary color  # noqa: E501

        :return: The primary of this ColorScheme.  # noqa: E501
        :rtype: str
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this ColorScheme.

        Primary color  # noqa: E501

        :param primary: The primary of this ColorScheme.  # noqa: E501
        :type: str
        """

        self._primary = primary

    @property
    def secondary(self):
        """Gets the secondary of this ColorScheme.  # noqa: E501

        Secondary color  # noqa: E501

        :return: The secondary of this ColorScheme.  # noqa: E501
        :rtype: str
        """
        return self._secondary

    @secondary.setter
    def secondary(self, secondary):
        """Sets the secondary of this ColorScheme.

        Secondary color  # noqa: E501

        :param secondary: The secondary of this ColorScheme.  # noqa: E501
        :type: str
        """

        self._secondary = secondary

    @property
    def success(self):
        """Gets the success of this ColorScheme.  # noqa: E501

        Success color  # noqa: E501

        :return: The success of this ColorScheme.  # noqa: E501
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ColorScheme.

        Success color  # noqa: E501

        :param success: The success of this ColorScheme.  # noqa: E501
        :type: str
        """

        self._success = success

    @property
    def warning(self):
        """Gets the warning of this ColorScheme.  # noqa: E501

        Warning color  # noqa: E501

        :return: The warning of this ColorScheme.  # noqa: E501
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this ColorScheme.

        Warning color  # noqa: E501

        :param warning: The warning of this ColorScheme.  # noqa: E501
        :type: str
        """

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ColorScheme, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColorScheme):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ColorScheme):
            return True

        return self.to_dict() != other.to_dict()
