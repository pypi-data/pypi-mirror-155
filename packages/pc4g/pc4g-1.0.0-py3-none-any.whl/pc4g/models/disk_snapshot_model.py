# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class DiskSnapshotModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snapshot_name': 'str',
        'creation_time': 'str',
        'snapshot_id': 'str',
        'disks': 'list[SnapshotDisks]'
    }

    attribute_map = {
        'snapshot_name': 'snapshot_name',
        'creation_time': 'creation_time',
        'snapshot_id': 'snapshot_id',
        'disks': 'disks'
    }

    def __init__(self, snapshot_name=None, creation_time=None, snapshot_id=None, disks=None, _configuration=None):  # noqa: E501
        """DiskSnapshotModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._snapshot_name = None
        self._creation_time = None
        self._snapshot_id = None
        self._disks = None
        self.discriminator = None

        if snapshot_name is not None:
            self.snapshot_name = snapshot_name
        if creation_time is not None:
            self.creation_time = creation_time
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id
        if disks is not None:
            self.disks = disks

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this DiskSnapshotModel.  # noqa: E501


        :return: The snapshot_name of this DiskSnapshotModel.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this DiskSnapshotModel.


        :param snapshot_name: The snapshot_name of this DiskSnapshotModel.  # noqa: E501
        :type: str
        """

        self._snapshot_name = snapshot_name

    @property
    def creation_time(self):
        """Gets the creation_time of this DiskSnapshotModel.  # noqa: E501


        :return: The creation_time of this DiskSnapshotModel.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DiskSnapshotModel.


        :param creation_time: The creation_time of this DiskSnapshotModel.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this DiskSnapshotModel.  # noqa: E501


        :return: The snapshot_id of this DiskSnapshotModel.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this DiskSnapshotModel.


        :param snapshot_id: The snapshot_id of this DiskSnapshotModel.  # noqa: E501
        :type: str
        """

        self._snapshot_id = snapshot_id

    @property
    def disks(self):
        """Gets the disks of this DiskSnapshotModel.  # noqa: E501


        :return: The disks of this DiskSnapshotModel.  # noqa: E501
        :rtype: list[SnapshotDisks]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this DiskSnapshotModel.


        :param disks: The disks of this DiskSnapshotModel.  # noqa: E501
        :type: list[SnapshotDisks]
        """

        self._disks = disks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiskSnapshotModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskSnapshotModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiskSnapshotModel):
            return True

        return self.to_dict() != other.to_dict()
