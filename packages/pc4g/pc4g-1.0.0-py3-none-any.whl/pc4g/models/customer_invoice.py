# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class CustomerInvoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_id': 'str',
        'number': 'str',
        'month': 'int',
        'payment_status': 'str',
        'currency': 'str',
        'total_incl': 'float'
    }

    attribute_map = {
        'invoice_id': 'invoice_id',
        'number': 'number',
        'month': 'month',
        'payment_status': 'payment_status',
        'currency': 'currency',
        'total_incl': 'total_incl'
    }

    def __init__(self, invoice_id=None, number=None, month=None, payment_status=None, currency=None, total_incl=None, _configuration=None):  # noqa: E501
        """CustomerInvoice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._invoice_id = None
        self._number = None
        self._month = None
        self._payment_status = None
        self._currency = None
        self._total_incl = None
        self.discriminator = None

        if invoice_id is not None:
            self.invoice_id = invoice_id
        if number is not None:
            self.number = number
        if month is not None:
            self.month = month
        if payment_status is not None:
            self.payment_status = payment_status
        if currency is not None:
            self.currency = currency
        if total_incl is not None:
            self.total_incl = total_incl

    @property
    def invoice_id(self):
        """Gets the invoice_id of this CustomerInvoice.  # noqa: E501

        Invoice ID  # noqa: E501

        :return: The invoice_id of this CustomerInvoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this CustomerInvoice.

        Invoice ID  # noqa: E501

        :param invoice_id: The invoice_id of this CustomerInvoice.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def number(self):
        """Gets the number of this CustomerInvoice.  # noqa: E501

        Invoice Number  # noqa: E501

        :return: The number of this CustomerInvoice.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CustomerInvoice.

        Invoice Number  # noqa: E501

        :param number: The number of this CustomerInvoice.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def month(self):
        """Gets the month of this CustomerInvoice.  # noqa: E501

        Invoice month timestamp  # noqa: E501

        :return: The month of this CustomerInvoice.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this CustomerInvoice.

        Invoice month timestamp  # noqa: E501

        :param month: The month of this CustomerInvoice.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def payment_status(self):
        """Gets the payment_status of this CustomerInvoice.  # noqa: E501

        Invoice number  # noqa: E501

        :return: The payment_status of this CustomerInvoice.  # noqa: E501
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this CustomerInvoice.

        Invoice number  # noqa: E501

        :param payment_status: The payment_status of this CustomerInvoice.  # noqa: E501
        :type: str
        """

        self._payment_status = payment_status

    @property
    def currency(self):
        """Gets the currency of this CustomerInvoice.  # noqa: E501

        Invoice currency  # noqa: E501

        :return: The currency of this CustomerInvoice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CustomerInvoice.

        Invoice currency  # noqa: E501

        :param currency: The currency of this CustomerInvoice.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def total_incl(self):
        """Gets the total_incl of this CustomerInvoice.  # noqa: E501

        Total Invoice amount after VAT  # noqa: E501

        :return: The total_incl of this CustomerInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_incl

    @total_incl.setter
    def total_incl(self, total_incl):
        """Sets the total_incl of this CustomerInvoice.

        Total Invoice amount after VAT  # noqa: E501

        :param total_incl: The total_incl of this CustomerInvoice.  # noqa: E501
        :type: float
        """

        self._total_incl = total_incl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerInvoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerInvoice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerInvoice):
            return True

        return self.to_dict() != other.to_dict()
