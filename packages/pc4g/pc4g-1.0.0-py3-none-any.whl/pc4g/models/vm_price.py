# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class VMPrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'price': 'float',
        'unit_prices': 'object'
    }

    attribute_map = {
        'currency': 'currency',
        'price': 'price',
        'unit_prices': 'unit_prices'
    }

    def __init__(self, currency=None, price=None, unit_prices=None, _configuration=None):  # noqa: E501
        """VMPrice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency = None
        self._price = None
        self._unit_prices = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if price is not None:
            self.price = price
        if unit_prices is not None:
            self.unit_prices = unit_prices

    @property
    def currency(self):
        """Gets the currency of this VMPrice.  # noqa: E501

        Curency  # noqa: E501

        :return: The currency of this VMPrice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this VMPrice.

        Curency  # noqa: E501

        :param currency: The currency of this VMPrice.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def price(self):
        """Gets the price of this VMPrice.  # noqa: E501

        Price per month  # noqa: E501

        :return: The price of this VMPrice.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this VMPrice.

        Price per month  # noqa: E501

        :param price: The price of this VMPrice.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def unit_prices(self):
        """Gets the unit_prices of this VMPrice.  # noqa: E501

        Unit price per month  # noqa: E501

        :return: The unit_prices of this VMPrice.  # noqa: E501
        :rtype: object
        """
        return self._unit_prices

    @unit_prices.setter
    def unit_prices(self, unit_prices):
        """Sets the unit_prices of this VMPrice.

        Unit price per month  # noqa: E501

        :param unit_prices: The unit_prices of this VMPrice.  # noqa: E501
        :type: object
        """

        self._unit_prices = unit_prices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VMPrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VMPrice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VMPrice):
            return True

        return self.to_dict() != other.to_dict()
