# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class DeletedImage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_id': 'int',
        'status': 'str',
        'image_name': 'str',
        'description': 'str',
        'os_type': 'str',
        'boot_disk_size': 'int',
        'size': 'int',
        'memory': 'int',
        'tags': 'str',
        'location': 'str'
    }

    attribute_map = {
        'image_id': 'image_id',
        'status': 'status',
        'image_name': 'image_name',
        'description': 'description',
        'os_type': 'os_type',
        'boot_disk_size': 'boot_disk_size',
        'size': 'size',
        'memory': 'memory',
        'tags': 'tags',
        'location': 'location'
    }

    def __init__(self, image_id=None, status=None, image_name=None, description=None, os_type=None, boot_disk_size=None, size=None, memory=None, tags=None, location=None, _configuration=None):  # noqa: E501
        """DeletedImage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._image_id = None
        self._status = None
        self._image_name = None
        self._description = None
        self._os_type = None
        self._boot_disk_size = None
        self._size = None
        self._memory = None
        self._tags = None
        self._location = None
        self.discriminator = None

        if image_id is not None:
            self.image_id = image_id
        if status is not None:
            self.status = status
        if image_name is not None:
            self.image_name = image_name
        if description is not None:
            self.description = description
        if os_type is not None:
            self.os_type = os_type
        if boot_disk_size is not None:
            self.boot_disk_size = boot_disk_size
        if size is not None:
            self.size = size
        if memory is not None:
            self.memory = memory
        if tags is not None:
            self.tags = tags
        if location is not None:
            self.location = location

    @property
    def image_id(self):
        """Gets the image_id of this DeletedImage.  # noqa: E501

        Image id  # noqa: E501

        :return: The image_id of this DeletedImage.  # noqa: E501
        :rtype: int
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this DeletedImage.

        Image id  # noqa: E501

        :param image_id: The image_id of this DeletedImage.  # noqa: E501
        :type: int
        """

        self._image_id = image_id

    @property
    def status(self):
        """Gets the status of this DeletedImage.  # noqa: E501

        Status of the image  # noqa: E501

        :return: The status of this DeletedImage.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeletedImage.

        Status of the image  # noqa: E501

        :param status: The status of this DeletedImage.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def image_name(self):
        """Gets the image_name of this DeletedImage.  # noqa: E501

        Image name  # noqa: E501

        :return: The image_name of this DeletedImage.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this DeletedImage.

        Image name  # noqa: E501

        :param image_name: The image_name of this DeletedImage.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def description(self):
        """Gets the description of this DeletedImage.  # noqa: E501

        Description of the image  # noqa: E501

        :return: The description of this DeletedImage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeletedImage.

        Description of the image  # noqa: E501

        :param description: The description of this DeletedImage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def os_type(self):
        """Gets the os_type of this DeletedImage.  # noqa: E501

        OS type of the image  # noqa: E501

        :return: The os_type of this DeletedImage.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this DeletedImage.

        OS type of the image  # noqa: E501

        :param os_type: The os_type of this DeletedImage.  # noqa: E501
        :type: str
        """

        self._os_type = os_type

    @property
    def boot_disk_size(self):
        """Gets the boot_disk_size of this DeletedImage.  # noqa: E501

        The size of the boot disk  # noqa: E501

        :return: The boot_disk_size of this DeletedImage.  # noqa: E501
        :rtype: int
        """
        return self._boot_disk_size

    @boot_disk_size.setter
    def boot_disk_size(self, boot_disk_size):
        """Sets the boot_disk_size of this DeletedImage.

        The size of the boot disk  # noqa: E501

        :param boot_disk_size: The boot_disk_size of this DeletedImage.  # noqa: E501
        :type: int
        """

        self._boot_disk_size = boot_disk_size

    @property
    def size(self):
        """Gets the size of this DeletedImage.  # noqa: E501

        The size of the image  # noqa: E501

        :return: The size of this DeletedImage.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DeletedImage.

        The size of the image  # noqa: E501

        :param size: The size of this DeletedImage.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def memory(self):
        """Gets the memory of this DeletedImage.  # noqa: E501

        The size of the memory  # noqa: E501

        :return: The memory of this DeletedImage.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this DeletedImage.

        The size of the memory  # noqa: E501

        :param memory: The memory of this DeletedImage.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def tags(self):
        """Gets the tags of this DeletedImage.  # noqa: E501

        Tags of the image  # noqa: E501

        :return: The tags of this DeletedImage.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeletedImage.

        Tags of the image  # noqa: E501

        :param tags: The tags of this DeletedImage.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def location(self):
        """Gets the location of this DeletedImage.  # noqa: E501

        Location of the image  # noqa: E501

        :return: The location of this DeletedImage.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DeletedImage.

        Location of the image  # noqa: E501

        :param location: The location of this DeletedImage.  # noqa: E501
        :type: str
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeletedImage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeletedImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeletedImage):
            return True

        return self.to_dict() != other.to_dict()
