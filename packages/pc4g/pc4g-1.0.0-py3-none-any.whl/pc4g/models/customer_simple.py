# coding: utf-8

"""
    Python client for GIG based clouds (pc4g)

    RESTful api client to a GIG based cloud.  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pc4g.configuration import Configuration


class CustomerSimple(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'name': 'str',
        'contact_name': 'str',
        'email': 'str',
        'billable': 'bool',
        'status': 'str'
    }

    attribute_map = {
        'customer_id': 'customer_id',
        'name': 'name',
        'contact_name': 'contact_name',
        'email': 'email',
        'billable': 'billable',
        'status': 'status'
    }

    def __init__(self, customer_id=None, name=None, contact_name=None, email=None, billable=None, status=None, _configuration=None):  # noqa: E501
        """CustomerSimple - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._customer_id = None
        self._name = None
        self._contact_name = None
        self._email = None
        self._billable = None
        self._status = None
        self.discriminator = None

        self.customer_id = customer_id
        self.name = name
        if contact_name is not None:
            self.contact_name = contact_name
        if email is not None:
            self.email = email
        if billable is not None:
            self.billable = billable
        if status is not None:
            self.status = status

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerSimple.  # noqa: E501

        Customer ID  # noqa: E501

        :return: The customer_id of this CustomerSimple.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerSimple.

        Customer ID  # noqa: E501

        :param customer_id: The customer_id of this CustomerSimple.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def name(self):
        """Gets the name of this CustomerSimple.  # noqa: E501

        Customer company name  # noqa: E501

        :return: The name of this CustomerSimple.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerSimple.

        Customer company name  # noqa: E501

        :param name: The name of this CustomerSimple.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contact_name(self):
        """Gets the contact_name of this CustomerSimple.  # noqa: E501

        Customer contact name  # noqa: E501

        :return: The contact_name of this CustomerSimple.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this CustomerSimple.

        Customer contact name  # noqa: E501

        :param contact_name: The contact_name of this CustomerSimple.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def email(self):
        """Gets the email of this CustomerSimple.  # noqa: E501

        Customer email  # noqa: E501

        :return: The email of this CustomerSimple.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerSimple.

        Customer email  # noqa: E501

        :param email: The email of this CustomerSimple.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def billable(self):
        """Gets the billable of this CustomerSimple.  # noqa: E501

        Customer is billable  # noqa: E501

        :return: The billable of this CustomerSimple.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this CustomerSimple.

        Customer is billable  # noqa: E501

        :param billable: The billable of this CustomerSimple.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def status(self):
        """Gets the status of this CustomerSimple.  # noqa: E501

        Customer status  # noqa: E501

        :return: The status of this CustomerSimple.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomerSimple.

        Customer status  # noqa: E501

        :param status: The status of this CustomerSimple.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerSimple, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerSimple):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerSimple):
            return True

        return self.to_dict() != other.to_dict()
