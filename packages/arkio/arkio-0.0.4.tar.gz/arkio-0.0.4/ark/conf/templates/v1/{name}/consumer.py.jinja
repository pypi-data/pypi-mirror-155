import time
import logging

from typing import Dict, Any
from ark.exc import BizExc
from confluent_kafka import Message

logger = logging.getLogger(__name__)


def handle_kafka(payload: Dict[str, Any], msg: Message):
    try:
        logger.info('kafka handle, payload:{} msg:{}'.format(payload, [msg.topic(), msg.partition(), msg.offset()]))
        # 幂等、失败重试、全部成功后再ack
    except BizExc as exc:
        # 业务异常不重试(如:并发锁)
        logger.error('handle_message, exc:{}'.format(repr(exc)))


def handle_amqp(payload, msg):
    try:
        logger.info('amqp handle, payload:{} msg:{}'.format(payload, msg))
        # 幂等、失败重试、全部成功后再ack
    except BizExc as exc:
        # 业务异常不重试(如:并发锁)
        logger.error('handle_message, exc:{}'.format(repr(exc)))
        msg.ack()
    except Exception as exc:
        logger.error('handle_message, exc:{}'.format(repr(exc)))
        msg.requeue()
        time.sleep(1)
    except:  # noqa
        logger.error('handle_message, exc:unknown')
        msg.requeue()
        time.sleep(1)
    else:
        msg.ack()
