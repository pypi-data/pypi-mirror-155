# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['ahasura']
install_requires = \
['httpx>=0,<1']

setup_kwargs = {
    'name': 'ahasura',
    'version': '1.4.2',
    'description': 'Async and sync Hasura client',
    'long_description': '# ahasura\n\nAsync and sync [Hasura](https://hasura.io/) client.\n\n## Install\n\nahasura is available on PyPi:\n\n```\npip install ahasura\n# Or\npoetry add ahasura\n```\n\n## Quick example\n\n```\nfrom ahasura import ADMIN, Hasura\nhasura = Hasura("http://localhost:8080", admin_secret="fake secret")\n\ndata = hasura(\n    """\n    query($id: uuid!) {\n        item_by_pk(id: $id) {\n            name\n        }\n    }\n    """,\n    auth=ADMIN,\n    id="00000000-0000-0000-0000-000000000001",\n)\n\nitem = data["item_by_pk"]\nassert item["name"] == "Some name"\n```\n\n## Create client\n\n* `hasura = Hasura(...)`\n* Args:\n    * `endpoint: str` - `HASURA_GRAPHQL_ENDPOINT`, without trailing `/` or `/v1/graphql`\n    * `admin_secret: Optional[str]` - `HASURA_GRAPHQL_ADMIN_SECRET`, required for `auth=ADMIN` only\n    * `timeout: Optional[float] = 10` - Seconds of network inactivity allowed. `None` disables the timeout\n* `hasura` client just keeps the configuration above, so you can reuse global client(s)\n* Shortcuts:\n    * `hasura(...)` is a shortcut for sync GraphQL client: `hasura.gql(...)`\n    * You can define a shortcut for Async GraphQL client: `ahasura = hasura.agql`\n\n## Execute GraphQL query\n\n* With shortcuts:\n    * Sync: `data = hasura(...)`\n    * Async: `data = await ahasura(...)`\n* Without shortcuts:\n    * Sync: `data = hasura.gql(...)`\n    * Async: `data = await hasura.agql(...)`\n* Args:\n    * `query: str` - GraphQL query, e.g. `query { item { id }}`\n    * `auth: str` - Either `ADMIN` or value of `Authorization` header, e.g. `Bearer {JWT}`\n    * `headers: Optional[Dict[str, str]]` - Custom headers, if any\n    * `**variables` - Variables used in `query`, if any\n* Returns: GraphQL response data, e.g. `{"item": [{"id": "..."}]}`\n* Raises: `HasuraError` - If JSON response from Hasura contains `errors` key\n\n## Execute SQL query\n\n* Sync: `rows = hasura.sql(...)`\n* Async: `rows = await hasura.asql(...)`\n* Args:\n    * `query: str` - SQL query, e.g. `SELECT "id" FROM "item"`\n    * `headers: Optional[Dict[str, str]]` - Custom headers, if any\n* Returns:\n    * Rows selected by `SELECT` query, e.g. `[{"id": "..."}]`\n    * Or `[{"ok": True}]` for non-`SELECT` query\n* Raises: `HasuraError` - If JSON response from Hasura contains `error` key\n\n## Auth\n\n* SQL queries are [admin-only](https://hasura.io/docs/latest/graphql/core/api-reference/schema-api/run-sql.html#run-sql)\n* GraphQL queries can use both admin and non-admin `auth`\n* `auth=ADMIN` is not default, because:\n    * `sudo` is not default\n    * It\'s easy to forget to propagate `Authorization` header of the user to Hasura\n    * Declarative Hasura permissions are better than checking permissions in Python\n    * When we set Hasura permissions, we should test them for each role supported\n\n## How to test\n\n### `test_item.py`\n\n```\nfrom typing import Any, Dict\n\nfrom ahasura import Hasura, HasuraError\nimport pytest\n\n\ndef test_reader_reads_item_ok(\n    hasura: Hasura,\n    reader_auth: str,\n    ok_item: Dict[str, Any],\n) -> None:\n    data = hasura(\n        """\n        query($id: uuid!) {\n            item_by_pk(id: $id) {\n                name\n            }\n        }\n        """,\n        auth=reader_auth,\n        id=ok_item["id"],\n    )\n\n    item = data["item_by_pk"]\n    assert item["name"] == "Some name"\n\n\ndef test_error(hasura: Hasura, reader_auth: str) -> None:\n    with pytest.raises(HasuraError) as error:\n        hasura("bad query", auth=reader_auth)\n\n    assert error.value.response == {"errors": [...]}\n```\n\n### `conftest.py`\n\n```\nfrom typing import Any, Dict, Generator, List\n\nfrom ahasura import ADMIN, Hasura\nimport jwt\nimport pytest\n\n_TABLE_NAMES = ["item"]\n\n\n@pytest.fixture(scope="session")\ndef hasura() -> Hasura:\n    return Hasura("http://localhost:8080", admin_secret="fake secret")\n\n\n@pytest.fixture(scope="session")\ndef reader_auth() -> str:\n    decoded_token = ...\n    encoded_token = jwt.encode(decoded_token, "")\n    return f"Bearer {encoded_token}"\n\n\n@pytest.fixture(scope="session")\ndef test_row_ids() -> List[str]:\n    """\n    When a test function creates a row in any table,\n    it should append this `row["id"]` to `test_row_ids`\n\n    UUIDs are unique across all tables with enough probability\n    """\n    return []\n\n\n@pytest.fixture(scope="function")\ndef ok_item(hasura: Hasura, test_row_ids: List[str]) -> Dict[str, Any]:\n    data = hasura(\n        """\n        mutation($item: item_insert_input!) {\n            insert_item_one(object: $item) {\n                id\n                name\n            }\n        }\n        """,\n        auth=ADMIN,\n        name="Some name",\n    )\n    item: Dict[str, Any] = data["insert_item_one"]\n    test_row_ids.append(item["id"])\n    return item\n\n\n@pytest.fixture(scope="function", autouse=True)\ndef cleanup(hasura: Hasura, test_row_ids: List[str]) -> Generator[None, None, None]:\n    """\n    When the test function ends,\n    this autouse fixture deletes all test rows from all tables\n    """\n    yield\n\n    if test_row_ids:\n        for table_name in _TABLE_NAMES:\n            hasura(\n                """\n                mutation($ids: [uuid!]!) {\n                    delete_{table_name}(where: {id: {_in: $ids}}) {\n                        affected_rows\n                    }\n                }\n                """.replace(\n                    "{table_name}", table_name\n                ),\n                auth=ADMIN,\n                ids=test_row_ids,\n            )\n        test_row_ids.clear()\n```\n',
    'author': 'Denis Ryzhkov',
    'author_email': 'denis.ryzhkov@cmrsurgical.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/cmr-surgical/ahasura',
    'py_modules': modules,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
