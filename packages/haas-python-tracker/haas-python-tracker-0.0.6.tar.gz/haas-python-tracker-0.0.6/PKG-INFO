Metadata-Version: 2.1
Name: haas-python-tracker
Version: 0.0.6
Summary: This is tracker driver for HaaS Python. HaaS Python is forked from micropython.
Home-page: https://haas.iot.aliyun.com/?from=corp
Author: HaaS Python
Author-email: yinsuo.mys@alibaba-inc.com
License: Apache License, Version 2.0
Project-URL: Source Code, https://github.com/alibaba/AliOS-Things
Project-URL: Bug Tracker, https://github.com/alibaba/AliOS-Things/issues
Project-URL: Documentation, https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.81b460b1lzwYKw#/?from=corp
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: Implementation :: MicroPython
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE


## HaaS Python介绍
HaaS Python是阿里云IoT团队最新研发的一套低代码编程框架，兼容MicroPython编程规范，依托HaaS平台软硬件积木提供AI、支付、蓝牙配网、云连接、UI等物联网场景常用的能力，从而解决了物联网应用开发难的问题。有了Python轻应用框架，物联网编程不再局限于专业软件开发人员，一般的技术员也可以快速实现复杂的物联网需求。
更多HaaS Python介绍和开发资料见[HaaS Python官网](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.595660b1dZDX71#/?from=corp),[创意案例](https://haas.iot.aliyun.com/solution?from=crop), [硬件积木](https://haas.iot.aliyun.com/solution/hardware?from=corp)

HaaS Python is a set of low-code programming frameworks newly developed by Alibaba Cloud IoT team. It is compatible with MicroPython programming specifications. It relies on the hardware and software building blocks of the HaaS platform to provide capabilities commonly used in IoT scenarios such as AI, payment, Bluetooth network configuration, cloud connection, and UI. Solve the difficult problem of IoT application development. With the Python light application framework, IoT programming is no longer limited to professional software developers, and general technicians can quickly implement complex IoT requirements.
For more HaaS Python introduction and development materials, see [HaaS Python official website](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.595660b1dZDX71#/?from=corp), [Creative Case](https://haas.iot.aliyun.com/solution?from=crop), [Hardware Building Blocks](https://haas.iot.aliyun.com/solution/hardware?from=corp)

## 安装方法
* 在[HaaS Python官网](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b50127119.0.0.4e1260b1ebMIf1#/)下载开发板对应的固件，并完成固件烧录

Download the firmware corresponding to the development board at [HaaS Python website](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b50127119.0.0.4e1260b1ebMIf1#/) and complete the firmware burning

* 在开发板上运行以下命令完成安装和使用,如果您在使用过程中遇到问题，欢迎在[github上向我们提交issue](https://github.com/alibaba/AliOS-Things/issues)，我们的工程师会及时解答

Run the following commands on the development board to complete the installation and use. If you encounter problems during use, please submit an issue to us on [github](https://github.com/alibaba/AliOS-Things/issues), Our engineers will answer in time
```
import upip
upip.install("haas-python-tracker")
import haas-python-tracker
```
# 黑白循迹传感器

## 一、产品简介
&emsp;&emsp;
黑白循迹传感器具有一对红外线发射与接收管，发射管不断发射出红外线，当发射出的红外线没有被反射回来或给反射回来强度不大时，红外接收管一直处于关断状态，此时模块的输出端为低电平；当发射出的红外线被检测物阻挡发射回来强度足够大的时候，红外接收管达到饱和状态，模块输出高电平。黑白循迹传感器可以广泛应用于机器人避障、避障小车、流水线计数及黑白线循迹等众多场合。
<br>

<div align="center">
<img src=./../../docs/images/tracker.png  width=35%/>
</div>

引脚定义
* VCC：3.3V<br>
* GND：地<br>
* OUT：输出信号
<br>

## 二、技术参数
* 工作电压：3.3V-5V<br>
* 有效检测距离：1mm-25mm<br>
* 输出电平：TTL<br>
* 工作温度：-20°C~85°C<br>
* 电路板尺寸：35mm*10mm<br>

## 三、软件接口

黑白循迹传感器HaaS Python驱动：[下载地址](https://github.com/alibaba/AliOS-Things/tree/master/haas_lib_bundles/python/libraries/tracker)
<br>

### TRACKER(gpioObj) - 创建黑白循迹传感器对象
<br>

* 函数原型

> trackerDev = TRACKER(gpioObj)

* 参数说明

参数|类型|必选参数？|说明|
|:-:|:-:|:-:|:-|
|gpioObj|GPIO|是|调用此函数前需确保gpioObj对象已经处于open状态|

* 返回值

> TRACKER对象成功，返回TRACKER对象；TRACKER对象创建失败，抛出Exception

* 示例代码
```python
from driver import GPIO     # 驱动库
import tracker

gpioObj = GPIO()
gpioObj.open("tracker")    # 按照board.json中名为"tracker"的设备节点的配置参数
print("GPIO inited!")

trackerDev= tracker.TRACKER(gpioObj)
```

* 输出
```log
GPIO inited!
```
</br>

### objectDetection() - 获取黑白循迹传感器的状态
<br>

* 函数功能：

> 获取黑白循迹传感器的状态

* 函数原型：

> TRACKER.getTrackerStatus()

* 参数说明：
> 无

* 返回值：
> 成功返回黑白循迹传感器的状态，0 - 白线 1 - 黑线；失败抛出Exception

* 示例：

```python
from driver import GPIO     # 驱动库
import tracker

gpioObj = GPIO()
gpioObj.open("tracker")    # 按照board.json中名为"tracker"的设备节点的配置参数
print("GPIO inited!")

trackerDev= tracker.TRACKER(gpioObj)
status = trackerDev.getTrackerStatus()
print("Tracker status is :%d level"%(status))
```

* 输出
```log
GPIO inited!
Tracker status is :0 level
```

</br>

## 四、接口案例

此使用实例在board.json中定义了名为TRACKER的GPIO类型的对象。在Python脚本中获取黑白循迹传感器的状态值并打印在日志中。

* 案例代码
```python
{
  "name": "board-name",
  "version": "1.0.0",
  "io": {
   "tracker":{
        "type": "GPIO",
        "port": 0,
        "dir": "input",
        "pull": "opendrain"
    }
  }
}
```

```python
from driver import GPIO     # 驱动库
import tracker
import utime

gpioObj = GPIO()
gpioObj.open("tracker")    # 按照board.json中名为"tracker"的设备节点的配置参数
print("GPIO inited!")

trackerDev= tracker.TRACKER(gpioObj)
while True:
    status = trackerDev.getTrackerStatus()
    print("Tracker status is :%d level"%(status))
    utime.sleep(1)
```

* 输出
```python
GPIO inited!
Tracker status is :0 level
Tracker status is :0 level
Tracker status is :1 level
Tracker status is :1 level
Tracker status is :1 level
Tracker status is :1 level
Tracker status is :0 level
Tracker status is :0 level
Tracker status is :0 level
```

<br>

## 参考文献及购买链接
[1] [购买链接](https://detail.tmall.com/item.htm?spm=a230r.1.14.16.781f457bZ2c4W3&id=40700980557&ns=1&abbucket=6)
