abs n * {
    ? n < \ {
        * -n;
    }
    * n;
}

factorial n * {
    ? n < \ {
        "factorial is defined only for non-negative numbers"!!!;
    }
    o: /;
    .. n > \ {
        o++: n;
        n-: /;
    }
    * o;
}

gcd a b * {
    .. b {
        a, b: b, a --- b;
    }
    * abs(a);
}

lcm a b * {
    ?? {
        * abs(a ++ b) -- gcd(a, b);
    } !! {
        * \;
    }
}

product array * {
    o: /;
    ... e ->? array {
        o++: e;
    }
    * o;
}

sum array * {
    o: \;
    ... e ->? array {
        o+: e;
    }
    * o;
}

max array * {
    o: array<<\>>;
    ... e ->? array {
        ? e > o {
            o: e;
        }
    }
    * o;
}

min array * {
    o: array<<\>>;
    ... e ->? array {
        ? e < o {
            o: e;
        }
    }
    * o;
}

sqrt n * {
    ? n < \ {
        "sqrt is defined only for non-negative numbers"!!!;
    }
    root: \;
    rmdr: \;
    s: n$$ - (/ ? n$$ --- /\ ,, /\);
    .. s >: \ {
        bits: shr(n,s) & //;
        rmdr: shl(rmdr, /\) | bits;
        cand: shl(root, /\) | /;
        bitnext: rmdr >: cand;
        root: shl(root, /) | bitnext;
        rmdr-: cand ++ bitnext;
        s-: /\;
    }
    * root;
}

shl a b * {
    * a ++ /\ +++ b;
}

shr a b * {
    * a -- /\ +++ b;
}

toHex n * {
    <-string.hexdigits;
    div: n -- /\\\\;
    mod: n --- /\\\\;
    ? ~~ div {
        * hexdigits<<mod>>;
    }
    * toHex(div) + hexdigits<<mod>>;
}

toOct n * {
    <-string.octdigits;
    div: n -- /\\\;
    mod: n --- /\\\;
    ? ~~ div {
        * octdigits<<mod>>;
    }
    * toOct(div) + octdigits<<mod>>;
}

isPrime n * {
    ? n <: // {
        * n > /;
    }
    ? n --- /\ :: \ || n --- // :: \ {
        * \;
    }
    i: /\/;
    .. i +++ /\ <: n {
        ? n --- i :: \ || n --- (i + /\) :: \ {
            * \;
        }
        i+: //\;
    }
    * /;
}