# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, IO, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._serialization import Serializer
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, List, Optional, TypeVar
    if sys.version_info >= (3, 9):
        from collections.abc import MutableMapping
    else:
        from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
    JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_list_assets_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    external_idprefix = kwargs.pop('external_idprefix', _params.pop('externalIdprefix', None))  # type: Optional[str]
    name = kwargs.pop('name', _params.pop('name', None))  # type: Optional[str]
    source = kwargs.pop('source', _params.pop('source', None))  # type: Optional[str]
    limit = kwargs.pop('limit', _params.pop('limit', 100))  # type: int
    continuation_token_parameter = kwargs.pop('continuation_token_parameter', _params.pop('continuationToken', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/assets")

    # Construct parameters
    if external_idprefix is not None:
        _params['externalIdprefix'] = _SERIALIZER.query("external_idprefix", external_idprefix, 'str')
    if name is not None:
        _params['name'] = _SERIALIZER.query("name", name, 'str')
    if source is not None:
        _params['source'] = _SERIALIZER.query("source", source, 'str')
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if continuation_token_parameter is not None:
        _params['continuationToken'] = _SERIALIZER.query("continuation_token_parameter", continuation_token_parameter, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_create_asset_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/assets")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_search_assets_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    name = kwargs.pop('name', _params.pop('name', None))  # type: Optional[str]
    description = kwargs.pop('description', _params.pop('description', None))  # type: Optional[str]
    limit = kwargs.pop('limit', _params.pop('limit', 100))  # type: int
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/assets/search")

    # Construct parameters
    if name is not None:
        _params['name'] = _SERIALIZER.query("name", name, 'str')
    if description is not None:
        _params['description'] = _SERIALIZER.query("description", description, 'str')
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_get_asset_by_id_request(
    id,  # type: int
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/assets/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'int'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_asset_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/assets/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_asset_structure_by_id_request(
    id,  # type: int
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/assets/{id}/structure")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'int'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_machines_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/assets/machines")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )

# fmt: on
class AssetsOperations(object):
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.IgnosPortal`'s
        :attr:`assets` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def list_assets(
        self,
        external_idprefix=None,  # type: Optional[str]
        name=None,  # type: Optional[str]
        source=None,  # type: Optional[str]
        limit=100,  # type: int
        continuation_token_parameter=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.AssetDtoPagedResult
        """list_assets.

        :param external_idprefix: Default value is None.
        :type external_idprefix: str
        :param name: Default value is None.
        :type name: str
        :param source: Default value is None.
        :type source: str
        :param limit: Default value is 100.
        :type limit: int
        :param continuation_token_parameter: Default value is None.
        :type continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDtoPagedResult or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDtoPagedResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.AssetDtoPagedResult]

        
        request = build_list_assets_request(
            external_idprefix=external_idprefix,
            name=name,
            source=source,
            limit=limit,
            continuation_token_parameter=continuation_token_parameter,
            template_url=self.list_assets.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetDtoPagedResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_assets.metadata = {'url': "/assets"}  # type: ignore


    @overload
    def create_asset(
        self,
        body=None,  # type: Optional[_models.CreateAsset]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.AssetDto
        """create_asset.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateAsset
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_asset(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.AssetDto
        """create_asset.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_asset(
        self,
        body=None,  # type: Optional[Union[_models.CreateAsset, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.AssetDto
        """create_asset.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateAsset or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.AssetDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateAsset')
            else:
                _json = None

        request = build_create_asset_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_asset.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_asset.metadata = {'url': "/assets"}  # type: ignore


    @distributed_trace
    def search_assets(
        self,
        name=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        limit=100,  # type: int
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.AssetDto]
        """search_assets.

        :param name: Default value is None.
        :type name: str
        :param description: Default value is None.
        :type description: str
        :param limit: Default value is 100.
        :type limit: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of AssetDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.AssetDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.AssetDto]]

        
        request = build_search_assets_request(
            name=name,
            description=description,
            limit=limit,
            template_url=self.search_assets.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[AssetDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    search_assets.metadata = {'url': "/assets/search"}  # type: ignore


    @distributed_trace
    def get_asset_by_id(
        self,
        id,  # type: int
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.AssetDto
        """get_asset_by_id.

        :param id: Required.
        :type id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.AssetDto]

        
        request = build_get_asset_by_id_request(
            id=id,
            template_url=self.get_asset_by_id.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_asset_by_id.metadata = {'url': "/assets/{id}"}  # type: ignore


    @distributed_trace
    def update_asset(
        self,
        id,  # type: str
        body=None,  # type: Optional[JSON]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.AssetDto
        """update_asset.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: JSON
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.AssetDto]

        if body is not None:
            _json = self._serialize.body(body, 'object')
        else:
            _json = None

        request = build_update_asset_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.update_asset.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_asset.metadata = {'url': "/assets/{id}"}  # type: ignore


    @distributed_trace
    def get_asset_structure_by_id(
        self,
        id,  # type: int
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.AssetStructureDto
        """get_asset_structure_by_id.

        :param id: Required.
        :type id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetStructureDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetStructureDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.AssetStructureDto]

        
        request = build_get_asset_structure_by_id_request(
            id=id,
            template_url=self.get_asset_structure_by_id.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetStructureDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_asset_structure_by_id.metadata = {'url': "/assets/{id}/structure"}  # type: ignore


    @distributed_trace
    def list_machines(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MachineDto]
        """list_machines.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MachineDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MachineDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MachineDto]]

        
        request = build_list_machines_request(
            template_url=self.list_machines.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MachineDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_machines.metadata = {'url': "/assets/machines"}  # type: ignore

