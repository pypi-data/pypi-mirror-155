# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import IO, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._serialization import Serializer
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, List, Optional, TypeVar, Union
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_list_measuring_tools_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    page = kwargs.pop('page', _params.pop('page', None))  # type: Optional[int]
    page_size = kwargs.pop('page_size', _params.pop('pageSize', 100))  # type: int
    tool_id = kwargs.pop('tool_id', _params.pop('toolId', None))  # type: Optional[str]
    tool_name = kwargs.pop('tool_name', _params.pop('toolName', None))  # type: Optional[str]
    type_id = kwargs.pop('type_id', _params.pop('typeId', None))  # type: Optional[str]
    sub_type_id = kwargs.pop('sub_type_id', _params.pop('subTypeId', None))  # type: Optional[str]
    order_by = kwargs.pop('order_by', _params.pop('orderBy', None))  # type: Optional[str]
    sort_direction = kwargs.pop('sort_direction', _params.pop('sortDirection', None))  # type: Optional[str]
    include_deprecated = kwargs.pop('include_deprecated', _params.pop('includeDeprecated', False))  # type: bool
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools")

    # Construct parameters
    if page is not None:
        _params['page'] = _SERIALIZER.query("page", page, 'int')
    if page_size is not None:
        _params['pageSize'] = _SERIALIZER.query("page_size", page_size, 'int')
    if tool_id is not None:
        _params['toolId'] = _SERIALIZER.query("tool_id", tool_id, 'str')
    if tool_name is not None:
        _params['toolName'] = _SERIALIZER.query("tool_name", tool_name, 'str')
    if type_id is not None:
        _params['typeId'] = _SERIALIZER.query("type_id", type_id, 'str')
    if sub_type_id is not None:
        _params['subTypeId'] = _SERIALIZER.query("sub_type_id", sub_type_id, 'str')
    if order_by is not None:
        _params['orderBy'] = _SERIALIZER.query("order_by", order_by, 'str')
    if sort_direction is not None:
        _params['sortDirection'] = _SERIALIZER.query("sort_direction", sort_direction, 'str')
    if include_deprecated is not None:
        _params['includeDeprecated'] = _SERIALIZER.query("include_deprecated", include_deprecated, 'bool')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_create_measuring_tool_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_measuring_tool_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_measuring_tool_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_calibrations_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/{id}/calibrations")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_register_calibration_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/{id}/calibrations")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_attach_calibration_certificate_request(
    id,  # type: str
    calibration_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/{id}/calibrations/{calibrationId}/attachcertificate")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
        "calibrationId": _SERIALIZER.url("calibration_id", calibration_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_calibration_certificate_request(
    id,  # type: str
    calibration_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/{id}/calibrations/{calibrationId}/deletecertificate")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
        "calibrationId": _SERIALIZER.url("calibration_id", calibration_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_list_manufacturers_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/manufacturers")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_manufacturer_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/manufacturers")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_measuring_tool_types_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/types")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_measuring_tool_type_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/types")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_measuring_tool_type_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/types/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_measuring_tool_type_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/types/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_list_measuring_tool_sub_types_request(
    type_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/types/{typeId}/subtypes")
    path_format_arguments = {
        "typeId": _SERIALIZER.url("type_id", type_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_measuring_tool_sub_type_request(
    type_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/types/{typeId}/subtypes")
    path_format_arguments = {
        "typeId": _SERIALIZER.url("type_id", type_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_measuring_tool_sub_type_request(
    type_id,  # type: str
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/types/{typeId}/subtypes/{id}")
    path_format_arguments = {
        "typeId": _SERIALIZER.url("type_id", type_id, 'str'),
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_measuring_tool_sub_type_request(
    type_id,  # type: str
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/types/{typeId}/subtypes/{id}")
    path_format_arguments = {
        "typeId": _SERIALIZER.url("type_id", type_id, 'str'),
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_list_measuring_units_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/units")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_measuring_unit_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/units")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_measuring_unit_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/units/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_get_measuring_tool_whitelist_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    page = kwargs.pop('page', _params.pop('page', None))  # type: Optional[int]
    page_size = kwargs.pop('page_size', _params.pop('pageSize', 100))  # type: int
    filter = kwargs.pop('filter', _params.pop('filter', None))  # type: Optional[str]
    order_by = kwargs.pop('order_by', _params.pop('orderBy', None))  # type: Optional[str]
    sort_direction = kwargs.pop('sort_direction', _params.pop('sortDirection', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/whitelist")

    # Construct parameters
    if page is not None:
        _params['page'] = _SERIALIZER.query("page", page, 'int')
    if page_size is not None:
        _params['pageSize'] = _SERIALIZER.query("page_size", page_size, 'int')
    if filter is not None:
        _params['filter'] = _SERIALIZER.query("filter", filter, 'str')
    if order_by is not None:
        _params['orderBy'] = _SERIALIZER.query("order_by", order_by, 'str')
    if sort_direction is not None:
        _params['sortDirection'] = _SERIALIZER.query("sort_direction", sort_direction, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_whitelist_measuring_tool_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/whitelist")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_whitelisted_measuring_tool_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/whitelist/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_remove_measuring_tool_from_whitelist_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/whitelist/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_unregistered_tool_values_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/unregistered")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_deprecate_tool_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/deprecated/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_calibration_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    status = kwargs.pop('status', _params.pop('status', None))  # type: Optional[Union[str, "_models.CalibrationListStatus"]]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/calibrationlist")

    # Construct parameters
    if status is not None:
        _params['status'] = _SERIALIZER.query("status", status, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_import_measuring_tool_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measuringtools/importtool")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )

# fmt: on
class MeasuringToolsOperations(object):  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.IgnosPortal`'s
        :attr:`measuring_tools` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def list_measuring_tools(
        self,
        page=None,  # type: Optional[int]
        page_size=100,  # type: int
        tool_id=None,  # type: Optional[str]
        tool_name=None,  # type: Optional[str]
        type_id=None,  # type: Optional[str]
        sub_type_id=None,  # type: Optional[str]
        order_by=None,  # type: Optional[str]
        sort_direction=None,  # type: Optional[str]
        include_deprecated=False,  # type: bool
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDtoPagedData
        """list_measuring_tools.

        :param page: Default value is None.
        :type page: int
        :param page_size: Default value is 100.
        :type page_size: int
        :param tool_id: Default value is None.
        :type tool_id: str
        :param tool_name: Default value is None.
        :type tool_name: str
        :param type_id: Default value is None.
        :type type_id: str
        :param sub_type_id: Default value is None.
        :type sub_type_id: str
        :param order_by: Default value is None.
        :type order_by: str
        :param sort_direction: Default value is None.
        :type sort_direction: str
        :param include_deprecated: Default value is False.
        :type include_deprecated: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDtoPagedData or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDtoPagedData
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolDtoPagedData]

        
        request = build_list_measuring_tools_request(
            page=page,
            page_size=page_size,
            tool_id=tool_id,
            tool_name=tool_name,
            type_id=type_id,
            sub_type_id=sub_type_id,
            order_by=order_by,
            sort_direction=sort_direction,
            include_deprecated=include_deprecated,
            template_url=self.list_measuring_tools.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDtoPagedData', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measuring_tools.metadata = {'url': "/measuringtools"}  # type: ignore


    @overload
    def create_measuring_tool(
        self,
        body=None,  # type: Optional[_models.CreateMeasuringToolRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """create_measuring_tool.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringToolRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_measuring_tool(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """create_measuring_tool.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_measuring_tool(
        self,
        body=None,  # type: Optional[Union[_models.CreateMeasuringToolRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """create_measuring_tool.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringToolRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolDetailDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasuringToolRequest')
            else:
                _json = None

        request = build_create_measuring_tool_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_measuring_tool.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDetailDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measuring_tool.metadata = {'url': "/measuringtools"}  # type: ignore


    @overload
    def update_measuring_tool(
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.UpdateMeasuringToolRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """update_measuring_tool.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasuringToolRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_measuring_tool(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """update_measuring_tool.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def update_measuring_tool(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.UpdateMeasuringToolRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """update_measuring_tool.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasuringToolRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolDetailDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateMeasuringToolRequest')
            else:
                _json = None

        request = build_update_measuring_tool_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_measuring_tool.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDetailDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measuring_tool.metadata = {'url': "/measuringtools/{id}"}  # type: ignore


    @distributed_trace
    def get_measuring_tool(
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """get_measuring_tool.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolDetailDto]

        
        request = build_get_measuring_tool_request(
            id=id,
            template_url=self.get_measuring_tool.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDetailDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measuring_tool.metadata = {'url': "/measuringtools/{id}"}  # type: ignore


    @distributed_trace
    def list_calibrations(
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MeasuringToolCalibrationDto]
        """list_calibrations.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasuringToolCalibrationDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasuringToolCalibrationDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasuringToolCalibrationDto]]

        
        request = build_list_calibrations_request(
            id=id,
            template_url=self.list_calibrations.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasuringToolCalibrationDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_calibrations.metadata = {'url': "/measuringtools/{id}/calibrations"}  # type: ignore


    @overload
    def register_calibration(
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.RegisterMeasuringToolCalibrationRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolCalibrationDto
        """register_calibration.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.RegisterMeasuringToolCalibrationRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolCalibrationDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolCalibrationDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def register_calibration(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolCalibrationDto
        """register_calibration.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolCalibrationDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolCalibrationDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def register_calibration(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.RegisterMeasuringToolCalibrationRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolCalibrationDto
        """register_calibration.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.RegisterMeasuringToolCalibrationRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolCalibrationDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolCalibrationDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolCalibrationDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'RegisterMeasuringToolCalibrationRequest')
            else:
                _json = None

        request = build_register_calibration_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.register_calibration.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolCalibrationDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    register_calibration.metadata = {'url': "/measuringtools/{id}/calibrations"}  # type: ignore


    @overload
    def attach_calibration_certificate(
        self,
        id,  # type: str
        calibration_id,  # type: str
        body=None,  # type: Optional[_models.AttachCalibrationCertificateRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolCalibrationDto
        """attach_calibration_certificate.

        :param id: Required.
        :type id: str
        :param calibration_id: Required.
        :type calibration_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.AttachCalibrationCertificateRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolCalibrationDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolCalibrationDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def attach_calibration_certificate(
        self,
        id,  # type: str
        calibration_id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolCalibrationDto
        """attach_calibration_certificate.

        :param id: Required.
        :type id: str
        :param calibration_id: Required.
        :type calibration_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolCalibrationDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolCalibrationDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def attach_calibration_certificate(
        self,
        id,  # type: str
        calibration_id,  # type: str
        body=None,  # type: Optional[Union[_models.AttachCalibrationCertificateRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolCalibrationDto
        """attach_calibration_certificate.

        :param id: Required.
        :type id: str
        :param calibration_id: Required.
        :type calibration_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.AttachCalibrationCertificateRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolCalibrationDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolCalibrationDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolCalibrationDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'AttachCalibrationCertificateRequest')
            else:
                _json = None

        request = build_attach_calibration_certificate_request(
            id=id,
            calibration_id=calibration_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.attach_calibration_certificate.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolCalibrationDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    attach_calibration_certificate.metadata = {'url': "/measuringtools/{id}/calibrations/{calibrationId}/attachcertificate"}  # type: ignore


    @distributed_trace
    def delete_calibration_certificate(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        calibration_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_calibration_certificate.

        :param id: Required.
        :type id: str
        :param calibration_id: Required.
        :type calibration_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_calibration_certificate_request(
            id=id,
            calibration_id=calibration_id,
            template_url=self.delete_calibration_certificate.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_calibration_certificate.metadata = {'url': "/measuringtools/{id}/calibrations/{calibrationId}/deletecertificate"}  # type: ignore


    @distributed_trace
    def list_manufacturers(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.ManufacturerDto]
        """list_manufacturers.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of ManufacturerDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.ManufacturerDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.ManufacturerDto]]

        
        request = build_list_manufacturers_request(
            template_url=self.list_manufacturers.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[ManufacturerDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_manufacturers.metadata = {'url': "/measuringtools/manufacturers"}  # type: ignore


    @overload
    def create_manufacturer(
        self,
        body=None,  # type: Optional[_models.CreateMeasuringToolManufacturer]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.ManufacturerDto
        """create_manufacturer.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringToolManufacturer
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ManufacturerDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.ManufacturerDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_manufacturer(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.ManufacturerDto
        """create_manufacturer.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ManufacturerDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.ManufacturerDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_manufacturer(
        self,
        body=None,  # type: Optional[Union[_models.CreateMeasuringToolManufacturer, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.ManufacturerDto
        """create_manufacturer.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringToolManufacturer or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ManufacturerDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.ManufacturerDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.ManufacturerDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasuringToolManufacturer')
            else:
                _json = None

        request = build_create_manufacturer_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_manufacturer.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ManufacturerDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_manufacturer.metadata = {'url': "/measuringtools/manufacturers"}  # type: ignore


    @distributed_trace
    def list_measuring_tool_types(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MeasuringToolTypeDto]
        """list_measuring_tool_types.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasuringToolTypeDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasuringToolTypeDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasuringToolTypeDto]]

        
        request = build_list_measuring_tool_types_request(
            template_url=self.list_measuring_tool_types.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasuringToolTypeDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measuring_tool_types.metadata = {'url': "/measuringtools/types"}  # type: ignore


    @overload
    def create_measuring_tool_type(
        self,
        body=None,  # type: Optional[_models.CreateMeasuringToolType]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolTypeDto
        """create_measuring_tool_type.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringToolType
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_measuring_tool_type(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolTypeDto
        """create_measuring_tool_type.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_measuring_tool_type(
        self,
        body=None,  # type: Optional[Union[_models.CreateMeasuringToolType, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolTypeDto
        """create_measuring_tool_type.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringToolType or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolTypeDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasuringToolType')
            else:
                _json = None

        request = build_create_measuring_tool_type_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_measuring_tool_type.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolTypeDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measuring_tool_type.metadata = {'url': "/measuringtools/types"}  # type: ignore


    @overload
    def update_measuring_tool_type(
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.UpdateMeasuringToolTypeRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolTypeDto
        """update_measuring_tool_type.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasuringToolTypeRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_measuring_tool_type(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolTypeDto
        """update_measuring_tool_type.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def update_measuring_tool_type(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.UpdateMeasuringToolTypeRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolTypeDto
        """update_measuring_tool_type.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasuringToolTypeRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolTypeDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateMeasuringToolTypeRequest')
            else:
                _json = None

        request = build_update_measuring_tool_type_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_measuring_tool_type.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolTypeDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measuring_tool_type.metadata = {'url': "/measuringtools/types/{id}"}  # type: ignore


    @distributed_trace
    def delete_measuring_tool_type(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_measuring_tool_type.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_measuring_tool_type_request(
            id=id,
            template_url=self.delete_measuring_tool_type.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measuring_tool_type.metadata = {'url': "/measuringtools/types/{id}"}  # type: ignore


    @distributed_trace
    def list_measuring_tool_sub_types(
        self,
        type_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MeasuringToolSubTypeDto]
        """list_measuring_tool_sub_types.

        :param type_id: Required.
        :type type_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasuringToolSubTypeDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasuringToolSubTypeDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasuringToolSubTypeDto]]

        
        request = build_list_measuring_tool_sub_types_request(
            type_id=type_id,
            template_url=self.list_measuring_tool_sub_types.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasuringToolSubTypeDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measuring_tool_sub_types.metadata = {'url': "/measuringtools/types/{typeId}/subtypes"}  # type: ignore


    @overload
    def create_measuring_tool_sub_type(
        self,
        type_id,  # type: str
        body=None,  # type: Optional[_models.CreateMeasuringToolSubTypeRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolSubTypeDto
        """create_measuring_tool_sub_type.

        :param type_id: Required.
        :type type_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringToolSubTypeRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolSubTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_measuring_tool_sub_type(
        self,
        type_id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolSubTypeDto
        """create_measuring_tool_sub_type.

        :param type_id: Required.
        :type type_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolSubTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_measuring_tool_sub_type(
        self,
        type_id,  # type: str
        body=None,  # type: Optional[Union[_models.CreateMeasuringToolSubTypeRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolSubTypeDto
        """create_measuring_tool_sub_type.

        :param type_id: Required.
        :type type_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringToolSubTypeRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolSubTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolSubTypeDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasuringToolSubTypeRequest')
            else:
                _json = None

        request = build_create_measuring_tool_sub_type_request(
            type_id=type_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_measuring_tool_sub_type.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolSubTypeDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measuring_tool_sub_type.metadata = {'url': "/measuringtools/types/{typeId}/subtypes"}  # type: ignore


    @overload
    def update_measuring_tool_sub_type(
        self,
        type_id,  # type: str
        id,  # type: str
        body=None,  # type: Optional[_models.UpdateMeasuringToolSubTypeRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolSubTypeDto
        """update_measuring_tool_sub_type.

        :param type_id: Required.
        :type type_id: str
        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasuringToolSubTypeRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolSubTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_measuring_tool_sub_type(
        self,
        type_id,  # type: str
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolSubTypeDto
        """update_measuring_tool_sub_type.

        :param type_id: Required.
        :type type_id: str
        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolSubTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def update_measuring_tool_sub_type(
        self,
        type_id,  # type: str
        id,  # type: str
        body=None,  # type: Optional[Union[_models.UpdateMeasuringToolSubTypeRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolSubTypeDto
        """update_measuring_tool_sub_type.

        :param type_id: Required.
        :type type_id: str
        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasuringToolSubTypeRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolSubTypeDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolSubTypeDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateMeasuringToolSubTypeRequest')
            else:
                _json = None

        request = build_update_measuring_tool_sub_type_request(
            type_id=type_id,
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_measuring_tool_sub_type.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolSubTypeDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measuring_tool_sub_type.metadata = {'url': "/measuringtools/types/{typeId}/subtypes/{id}"}  # type: ignore


    @distributed_trace
    def delete_measuring_tool_sub_type(  # pylint: disable=inconsistent-return-statements
        self,
        type_id,  # type: str
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_measuring_tool_sub_type.

        :param type_id: Required.
        :type type_id: str
        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_measuring_tool_sub_type_request(
            type_id=type_id,
            id=id,
            template_url=self.delete_measuring_tool_sub_type.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measuring_tool_sub_type.metadata = {'url': "/measuringtools/types/{typeId}/subtypes/{id}"}  # type: ignore


    @distributed_trace
    def list_measuring_units(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MeasuringUnitDto]
        """list_measuring_units.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasuringUnitDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasuringUnitDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasuringUnitDto]]

        
        request = build_list_measuring_units_request(
            template_url=self.list_measuring_units.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasuringUnitDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measuring_units.metadata = {'url': "/measuringtools/units"}  # type: ignore


    @overload
    def create_measuring_unit(
        self,
        body=None,  # type: Optional[_models.CreateMeasuringUnit]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringUnitDto
        """create_measuring_unit.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringUnit
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringUnitDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringUnitDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_measuring_unit(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringUnitDto
        """create_measuring_unit.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringUnitDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringUnitDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_measuring_unit(
        self,
        body=None,  # type: Optional[Union[_models.CreateMeasuringUnit, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringUnitDto
        """create_measuring_unit.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasuringUnit or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringUnitDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringUnitDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringUnitDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasuringUnit')
            else:
                _json = None

        request = build_create_measuring_unit_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_measuring_unit.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringUnitDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measuring_unit.metadata = {'url': "/measuringtools/units"}  # type: ignore


    @distributed_trace
    def delete_measuring_unit(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_measuring_unit.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_measuring_unit_request(
            id=id,
            template_url=self.delete_measuring_unit.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measuring_unit.metadata = {'url': "/measuringtools/units/{id}"}  # type: ignore


    @distributed_trace
    def get_measuring_tool_whitelist(
        self,
        page=None,  # type: Optional[int]
        page_size=100,  # type: int
        filter=None,  # type: Optional[str]
        order_by=None,  # type: Optional[str]
        sort_direction=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolWhitelistDtoPagedData
        """get_measuring_tool_whitelist.

        :param page: Default value is None.
        :type page: int
        :param page_size: Default value is 100.
        :type page_size: int
        :param filter: Default value is None.
        :type filter: str
        :param order_by: Default value is None.
        :type order_by: str
        :param sort_direction: Default value is None.
        :type sort_direction: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolWhitelistDtoPagedData or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolWhitelistDtoPagedData
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolWhitelistDtoPagedData]

        
        request = build_get_measuring_tool_whitelist_request(
            page=page,
            page_size=page_size,
            filter=filter,
            order_by=order_by,
            sort_direction=sort_direction,
            template_url=self.get_measuring_tool_whitelist.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolWhitelistDtoPagedData', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measuring_tool_whitelist.metadata = {'url': "/measuringtools/whitelist"}  # type: ignore


    @overload
    def whitelist_measuring_tool(
        self,
        body=None,  # type: Optional[_models.WhitelistMeasuringTool]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolWhitelistDto
        """whitelist_measuring_tool.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.WhitelistMeasuringTool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolWhitelistDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolWhitelistDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def whitelist_measuring_tool(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolWhitelistDto
        """whitelist_measuring_tool.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolWhitelistDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolWhitelistDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def whitelist_measuring_tool(
        self,
        body=None,  # type: Optional[Union[_models.WhitelistMeasuringTool, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolWhitelistDto
        """whitelist_measuring_tool.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.WhitelistMeasuringTool or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolWhitelistDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolWhitelistDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolWhitelistDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'WhitelistMeasuringTool')
            else:
                _json = None

        request = build_whitelist_measuring_tool_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.whitelist_measuring_tool.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolWhitelistDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    whitelist_measuring_tool.metadata = {'url': "/measuringtools/whitelist"}  # type: ignore


    @overload
    def update_whitelisted_measuring_tool(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.UpdateWhitelistedMeasuringTool]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """update_whitelisted_measuring_tool.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateWhitelistedMeasuringTool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_whitelisted_measuring_tool(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """update_whitelisted_measuring_tool.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def update_whitelisted_measuring_tool(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.UpdateWhitelistedMeasuringTool, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """update_whitelisted_measuring_tool.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateWhitelistedMeasuringTool or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateWhitelistedMeasuringTool')
            else:
                _json = None

        request = build_update_whitelisted_measuring_tool_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_whitelisted_measuring_tool.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    update_whitelisted_measuring_tool.metadata = {'url': "/measuringtools/whitelist/{id}"}  # type: ignore


    @distributed_trace
    def remove_measuring_tool_from_whitelist(
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.ProblemDetails]
        """remove_measuring_tool_from_whitelist.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProblemDetails or None or the result of cls(response)
        :rtype: ~ignos.api.client.models.ProblemDetails or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.ProblemDetails]]

        
        request = build_remove_measuring_tool_from_whitelist_request(
            id=id,
            template_url=self.remove_measuring_tool_from_whitelist.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 404:
            deserialized = self._deserialize('ProblemDetails', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    remove_measuring_tool_from_whitelist.metadata = {'url': "/measuringtools/whitelist/{id}"}  # type: ignore


    @distributed_trace
    def list_unregistered_tool_values(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.UnregisteredToolValueDto]
        """list_unregistered_tool_values.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of UnregisteredToolValueDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.UnregisteredToolValueDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.UnregisteredToolValueDto]]

        
        request = build_list_unregistered_tool_values_request(
            template_url=self.list_unregistered_tool_values.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[UnregisteredToolValueDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_unregistered_tool_values.metadata = {'url': "/measuringtools/unregistered"}  # type: ignore


    @overload
    def deprecate_tool(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.DeprecateToolRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """deprecate_tool.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.DeprecateToolRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def deprecate_tool(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """deprecate_tool.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def deprecate_tool(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.DeprecateToolRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """deprecate_tool.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.DeprecateToolRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'DeprecateToolRequest')
            else:
                _json = None

        request = build_deprecate_tool_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.deprecate_tool.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    deprecate_tool.metadata = {'url': "/measuringtools/deprecated/{id}"}  # type: ignore


    @distributed_trace
    def get_calibration_list(
        self,
        status=None,  # type: Optional[Union[str, "_models.CalibrationListStatus"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.CalibrationListToolDto]
        """get_calibration_list.

        :param status: Known values are: "SoonDue" and "Expired". Default value is None.
        :type status: str or ~ignos.api.client.models.CalibrationListStatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of CalibrationListToolDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.CalibrationListToolDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.CalibrationListToolDto]]

        
        request = build_get_calibration_list_request(
            status=status,
            template_url=self.get_calibration_list.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[CalibrationListToolDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_calibration_list.metadata = {'url': "/measuringtools/calibrationlist"}  # type: ignore


    @overload
    def import_measuring_tool(
        self,
        body=None,  # type: Optional[_models.ImportMeasuringTool]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """import_measuring_tool.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.ImportMeasuringTool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def import_measuring_tool(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """import_measuring_tool.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def import_measuring_tool(
        self,
        body=None,  # type: Optional[Union[_models.ImportMeasuringTool, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasuringToolDetailDto
        """import_measuring_tool.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.ImportMeasuringTool or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasuringToolDetailDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'ImportMeasuringTool')
            else:
                _json = None

        request = build_import_measuring_tool_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.import_measuring_tool.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDetailDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    import_measuring_tool.metadata = {'url': "/measuringtools/importtool"}  # type: ignore

