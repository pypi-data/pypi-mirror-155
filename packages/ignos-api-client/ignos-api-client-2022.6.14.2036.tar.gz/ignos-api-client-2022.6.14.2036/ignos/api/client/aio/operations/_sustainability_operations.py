# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._sustainability_operations import build_create_customer_order_line_ghg_report_request, build_get_consumption_request, build_get_consumption_with_automatic_granularity_request, build_get_customer_order_consumption_request, build_get_power_request, build_get_product_consumption_request, build_get_work_order_consumption_request, build_test_request
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SustainabilityOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.aio.IgnosPortal`'s
        :attr:`sustainability` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace_async
    async def test(
        self,
        **kwargs: Any
    ) -> str:
        """test.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str or the result of cls(response)
        :rtype: str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[str]

        
        request = build_test_request(
            template_url=self.test.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    test.metadata = {'url': "/sustainability/test"}  # type: ignore


    @overload
    async def get_consumption(
        self,
        body: Optional[_models.GetConsumption] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ConsumptionDto:
        """get_consumption.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.GetConsumption
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ConsumptionDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.ConsumptionDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def get_consumption(
        self,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ConsumptionDto:
        """get_consumption.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ConsumptionDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.ConsumptionDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def get_consumption(
        self,
        body: Optional[Union[_models.GetConsumption, IO]] = None,
        **kwargs: Any
    ) -> _models.ConsumptionDto:
        """get_consumption.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.GetConsumption or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ConsumptionDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.ConsumptionDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.ConsumptionDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'GetConsumption')
            else:
                _json = None

        request = build_get_consumption_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.get_consumption.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ConsumptionDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_consumption.metadata = {'url': "/sustainability/consumption"}  # type: ignore


    @overload
    async def get_consumption_with_automatic_granularity(
        self,
        body: Optional[_models.GetConsumptionAutoGranularity] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GranluarConsumptionDto:
        """get_consumption_with_automatic_granularity.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.GetConsumptionAutoGranularity
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GranluarConsumptionDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.GranluarConsumptionDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def get_consumption_with_automatic_granularity(
        self,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GranluarConsumptionDto:
        """get_consumption_with_automatic_granularity.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GranluarConsumptionDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.GranluarConsumptionDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def get_consumption_with_automatic_granularity(
        self,
        body: Optional[Union[_models.GetConsumptionAutoGranularity, IO]] = None,
        **kwargs: Any
    ) -> _models.GranluarConsumptionDto:
        """get_consumption_with_automatic_granularity.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.GetConsumptionAutoGranularity or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GranluarConsumptionDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.GranluarConsumptionDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.GranluarConsumptionDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'GetConsumptionAutoGranularity')
            else:
                _json = None

        request = build_get_consumption_with_automatic_granularity_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.get_consumption_with_automatic_granularity.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('GranluarConsumptionDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_consumption_with_automatic_granularity.metadata = {'url': "/sustainability/consumption/autogranularity"}  # type: ignore


    @overload
    async def get_power(
        self,
        body: Optional[_models.GetPower] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.PowerDto:
        """get_power.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.GetPower
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PowerDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.PowerDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def get_power(
        self,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.PowerDto:
        """get_power.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PowerDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.PowerDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def get_power(
        self,
        body: Optional[Union[_models.GetPower, IO]] = None,
        **kwargs: Any
    ) -> _models.PowerDto:
        """get_power.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.GetPower or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PowerDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.PowerDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.PowerDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'GetPower')
            else:
                _json = None

        request = build_get_power_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.get_power.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('PowerDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_power.metadata = {'url': "/sustainability/power"}  # type: ignore


    @overload
    async def get_customer_order_consumption(
        self,
        external_id: str,
        body: Optional[_models.CustomerOrderConsumptionRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """get_customer_order_consumption.

        :param external_id: Required.
        :type external_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CustomerOrderConsumptionRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JSON or the result of cls(response)
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def get_customer_order_consumption(
        self,
        external_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """get_customer_order_consumption.

        :param external_id: Required.
        :type external_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JSON or the result of cls(response)
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def get_customer_order_consumption(
        self,
        external_id: str,
        body: Optional[Union[_models.CustomerOrderConsumptionRequest, IO]] = None,
        **kwargs: Any
    ) -> JSON:
        """get_customer_order_consumption.

        :param external_id: Required.
        :type external_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CustomerOrderConsumptionRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JSON or the result of cls(response)
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CustomerOrderConsumptionRequest')
            else:
                _json = None

        request = build_get_customer_order_consumption_request(
            external_id=external_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.get_customer_order_consumption.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_customer_order_consumption.metadata = {'url': "/sustainability/consumption/customerorders/{externalId}"}  # type: ignore


    @distributed_trace_async
    async def get_work_order_consumption(
        self,
        external_id: str,
        **kwargs: Any
    ) -> JSON:
        """get_work_order_consumption.

        :param external_id: Required.
        :type external_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JSON or the result of cls(response)
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_get_work_order_consumption_request(
            external_id=external_id,
            template_url=self.get_work_order_consumption.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_work_order_consumption.metadata = {'url': "/sustainability/consumption/workorders/{externalId}"}  # type: ignore


    @distributed_trace_async
    async def get_product_consumption(
        self,
        external_id: str,
        **kwargs: Any
    ) -> JSON:
        """get_product_consumption.

        :param external_id: Required.
        :type external_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JSON or the result of cls(response)
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_get_product_consumption_request(
            external_id=external_id,
            template_url=self.get_product_consumption.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_product_consumption.metadata = {'url': "/sustainability/consumption/product/{externalId}"}  # type: ignore


    @overload
    async def create_customer_order_line_ghg_report(
        self,
        body: Optional[_models.CreateCustomerOrderLineGhgReport] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DownloadDto:
        """create_customer_order_line_ghg_report.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateCustomerOrderLineGhgReport
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DownloadDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.DownloadDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_customer_order_line_ghg_report(
        self,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DownloadDto:
        """create_customer_order_line_ghg_report.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DownloadDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.DownloadDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def create_customer_order_line_ghg_report(
        self,
        body: Optional[Union[_models.CreateCustomerOrderLineGhgReport, IO]] = None,
        **kwargs: Any
    ) -> _models.DownloadDto:
        """create_customer_order_line_ghg_report.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateCustomerOrderLineGhgReport or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DownloadDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.DownloadDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.DownloadDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateCustomerOrderLineGhgReport')
            else:
                _json = None

        request = build_create_customer_order_line_ghg_report_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_customer_order_line_ghg_report.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('DownloadDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_customer_order_line_ghg_report.metadata = {'url': "/sustainability/consumption/customerorderlinereport"}  # type: ignore

