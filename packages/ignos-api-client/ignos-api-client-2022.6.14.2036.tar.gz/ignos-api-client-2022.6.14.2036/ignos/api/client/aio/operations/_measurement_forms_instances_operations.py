# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._measurement_forms_instances_operations import build_create_measurement_form_instance_request, build_get_audit_log_request, build_get_measurement_form_instance_request, build_get_measurement_form_instance_schema_request, build_get_validation_rules_request, build_get_workorder_measurement_form_progress_request, build_list_active_measurement_forms_request, build_list_supplier_measurement_form_instances_request, build_remove_cmm_element_request, build_remove_supplier_from_measurment_form_instance_request, build_save_comment_request, build_save_measurement_form_instance_schema_comment_request, build_save_tool_request, build_save_value_request, build_set_cmm_element_request, build_update_measurement_form_instance_request, build_upsert_supplier_to_measurment_form_instance_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class MeasurementFormsInstancesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.aio.IgnosPortal`'s
        :attr:`measurement_forms_instances` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace_async
    async def list_active_measurement_forms(
        self,
        page_size: int = 50,
        search: Optional[str] = None,
        continuation_token_parameter: Optional[str] = None,
        tenant_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceDtoPagedResult:
        """list_active_measurement_forms.

        :param page_size: Default value is 50.
        :type page_size: int
        :param search: Default value is None.
        :type search: str
        :param continuation_token_parameter: Default value is None.
        :type continuation_token_parameter: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceDtoPagedResult or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceDtoPagedResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormInstanceDtoPagedResult]

        
        request = build_list_active_measurement_forms_request(
            page_size=page_size,
            search=search,
            continuation_token_parameter=continuation_token_parameter,
            tenant_id=tenant_id,
            template_url=self.list_active_measurement_forms.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormInstanceDtoPagedResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_active_measurement_forms.metadata = {'url': "/measurementforms/instances"}  # type: ignore


    @distributed_trace_async
    async def get_measurement_form_instance(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceDto:
        """get_measurement_form_instance.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormInstanceDto]

        
        request = build_get_measurement_form_instance_request(
            id=id,
            tenant_id=tenant_id,
            template_url=self.get_measurement_form_instance.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormInstanceDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_instance.metadata = {'url': "/measurementforms/instances/{id}"}  # type: ignore


    @overload
    async def create_measurement_form_instance(
        self,
        id: str,
        body: Optional[_models.CreateMeasurementFormInstanceRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceDto:
        """create_measurement_form_instance.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormInstanceRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_measurement_form_instance(
        self,
        id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceDto:
        """create_measurement_form_instance.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def create_measurement_form_instance(
        self,
        id: str,
        body: Optional[Union[_models.CreateMeasurementFormInstanceRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceDto:
        """create_measurement_form_instance.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormInstanceRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormInstanceDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasurementFormInstanceRequest')
            else:
                _json = None

        request = build_create_measurement_form_instance_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_measurement_form_instance.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormInstanceDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measurement_form_instance.metadata = {'url': "/measurementforms/instances/{id}"}  # type: ignore


    @overload
    async def update_measurement_form_instance(
        self,
        id: str,
        body: Optional[_models.UpdateMeasurementFormInstanceRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceDto:
        """update_measurement_form_instance.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasurementFormInstanceRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_measurement_form_instance(
        self,
        id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceDto:
        """update_measurement_form_instance.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def update_measurement_form_instance(
        self,
        id: str,
        body: Optional[Union[_models.UpdateMeasurementFormInstanceRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceDto:
        """update_measurement_form_instance.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasurementFormInstanceRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormInstanceDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateMeasurementFormInstanceRequest')
            else:
                _json = None

        request = build_update_measurement_form_instance_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_measurement_form_instance.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormInstanceDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measurement_form_instance.metadata = {'url': "/measurementforms/instances/{id}"}  # type: ignore


    @distributed_trace_async
    async def get_measurement_form_instance_schema(
        self,
        id: str,
        schema_id: str,
        sequence: Optional[str] = None,
        tenant_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceSchemaDto:
        """get_measurement_form_instance_schema.

        :param id: Required.
        :type id: str
        :param schema_id: Required.
        :type schema_id: str
        :param sequence: Default value is None.
        :type sequence: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormInstanceSchemaDto]

        
        request = build_get_measurement_form_instance_schema_request(
            id=id,
            schema_id=schema_id,
            sequence=sequence,
            tenant_id=tenant_id,
            template_url=self.get_measurement_form_instance_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormInstanceSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_instance_schema.metadata = {'url': "/measurementforms/instances/{id}/schemas/{schemaId}"}  # type: ignore


    @distributed_trace_async
    async def get_workorder_measurement_form_progress(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.MeasurementFormInstanceProgressDto:
        """get_workorder_measurement_form_progress.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormInstanceProgressDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormInstanceProgressDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormInstanceProgressDto]

        
        request = build_get_workorder_measurement_form_progress_request(
            id=id,
            tenant_id=tenant_id,
            template_url=self.get_workorder_measurement_form_progress.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormInstanceProgressDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_workorder_measurement_form_progress.metadata = {'url': "/measurementforms/instances/{id}/progress"}  # type: ignore


    @distributed_trace_async
    async def get_audit_log(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        schema_id: Optional[str] = None,
        sequence: Optional[str] = None,
        element_id: Optional[str] = None,
        **kwargs: Any
    ) -> List[_models.MeasurementFormElementValueAuditDto]:
        """get_audit_log.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param schema_id: Default value is None.
        :type schema_id: str
        :param sequence: Default value is None.
        :type sequence: str
        :param element_id: Default value is None.
        :type element_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasurementFormElementValueAuditDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasurementFormElementValueAuditDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasurementFormElementValueAuditDto]]

        
        request = build_get_audit_log_request(
            id=id,
            tenant_id=tenant_id,
            schema_id=schema_id,
            sequence=sequence,
            element_id=element_id,
            template_url=self.get_audit_log.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasurementFormElementValueAuditDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_audit_log.metadata = {'url': "/measurementforms/instances/{id}/auditlog"}  # type: ignore


    @distributed_trace_async
    async def get_validation_rules(
        self,
        **kwargs: Any
    ) -> List[_models.ValidationRuleDto]:
        """get_validation_rules.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of ValidationRuleDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.ValidationRuleDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.ValidationRuleDto]]

        
        request = build_get_validation_rules_request(
            template_url=self.get_validation_rules.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[ValidationRuleDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_validation_rules.metadata = {'url': "/measurementforms/instances/validationrules"}  # type: ignore


    @distributed_trace_async
    async def set_cmm_element(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        schema_id: Optional[str] = None,
        element_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """set_cmm_element.

        :param id: Required.
        :type id: str
        :param schema_id: Default value is None.
        :type schema_id: str
        :param element_id: Default value is None.
        :type element_id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_set_cmm_element_request(
            id=id,
            schema_id=schema_id,
            element_id=element_id,
            tenant_id=tenant_id,
            template_url=self.set_cmm_element.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    set_cmm_element.metadata = {'url': "/measurementforms/instances/{id}/setcmm"}  # type: ignore


    @distributed_trace_async
    async def remove_cmm_element(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        schema_id: Optional[str] = None,
        element_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """remove_cmm_element.

        :param id: Required.
        :type id: str
        :param schema_id: Default value is None.
        :type schema_id: str
        :param element_id: Default value is None.
        :type element_id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_remove_cmm_element_request(
            id=id,
            schema_id=schema_id,
            element_id=element_id,
            tenant_id=tenant_id,
            template_url=self.remove_cmm_element.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    remove_cmm_element.metadata = {'url': "/measurementforms/instances/{id}/removecmm"}  # type: ignore


    @overload
    async def save_value(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[_models.SaveValueRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_value.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.SaveValueRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def save_value(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_value.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def save_value(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[Union[_models.SaveValueRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_value.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.SaveValueRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.SaveValueResponseDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'SaveValueRequest')
            else:
                _json = None

        request = build_save_value_request(
            id=id,
            tenant_id=tenant_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.save_value.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SaveValueResponseDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    save_value.metadata = {'url': "/measurementforms/instances/{id}/value"}  # type: ignore


    @overload
    async def save_tool(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[_models.SaveToolRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_tool.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.SaveToolRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def save_tool(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_tool.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def save_tool(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[Union[_models.SaveToolRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_tool.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.SaveToolRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.SaveValueResponseDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'SaveToolRequest')
            else:
                _json = None

        request = build_save_tool_request(
            id=id,
            tenant_id=tenant_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.save_tool.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SaveValueResponseDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    save_tool.metadata = {'url': "/measurementforms/instances/{id}/tool"}  # type: ignore


    @overload
    async def save_comment(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[_models.SaveCommentRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_comment.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.SaveCommentRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def save_comment(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_comment.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def save_comment(
        self,
        id: str,
        tenant_id: Optional[str] = None,
        body: Optional[Union[_models.SaveCommentRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.SaveValueResponseDto:
        """save_comment.

        :param id: Required.
        :type id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.SaveCommentRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SaveValueResponseDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.SaveValueResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.SaveValueResponseDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'SaveCommentRequest')
            else:
                _json = None

        request = build_save_comment_request(
            id=id,
            tenant_id=tenant_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.save_comment.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SaveValueResponseDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    save_comment.metadata = {'url': "/measurementforms/instances/{id}/comment"}  # type: ignore


    @overload
    async def save_measurement_form_instance_schema_comment(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        schema_id: str,
        tenant_id: Optional[str] = None,
        body: Optional[_models.SaveMeasurementFormInstanceSchemaCommentRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """save_measurement_form_instance_schema_comment.

        :param id: Required.
        :type id: str
        :param schema_id: Required.
        :type schema_id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.SaveMeasurementFormInstanceSchemaCommentRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def save_measurement_form_instance_schema_comment(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        schema_id: str,
        tenant_id: Optional[str] = None,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """save_measurement_form_instance_schema_comment.

        :param id: Required.
        :type id: str
        :param schema_id: Required.
        :type schema_id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def save_measurement_form_instance_schema_comment(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        schema_id: str,
        tenant_id: Optional[str] = None,
        body: Optional[Union[_models.SaveMeasurementFormInstanceSchemaCommentRequest, IO]] = None,
        **kwargs: Any
    ) -> None:
        """save_measurement_form_instance_schema_comment.

        :param id: Required.
        :type id: str
        :param schema_id: Required.
        :type schema_id: str
        :param tenant_id: Default value is None.
        :type tenant_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.SaveMeasurementFormInstanceSchemaCommentRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'SaveMeasurementFormInstanceSchemaCommentRequest')
            else:
                _json = None

        request = build_save_measurement_form_instance_schema_comment_request(
            id=id,
            schema_id=schema_id,
            tenant_id=tenant_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.save_measurement_form_instance_schema_comment.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    save_measurement_form_instance_schema_comment.metadata = {'url': "/measurementforms/instances/{id}/schemas/{schemaId}/comment"}  # type: ignore


    @distributed_trace_async
    async def list_supplier_measurement_form_instances(
        self,
        supplier_id: str,
        **kwargs: Any
    ) -> List[_models.MeasurementFormSupplierAccessInstanceDto]:
        """list_supplier_measurement_form_instances.

        :param supplier_id: Required.
        :type supplier_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasurementFormSupplierAccessInstanceDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasurementFormSupplierAccessInstanceDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasurementFormSupplierAccessInstanceDto]]

        
        request = build_list_supplier_measurement_form_instances_request(
            supplier_id=supplier_id,
            template_url=self.list_supplier_measurement_form_instances.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasurementFormSupplierAccessInstanceDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_supplier_measurement_form_instances.metadata = {'url': "/measurementforms/instances/suppliers/{supplierId}"}  # type: ignore


    @overload
    async def upsert_supplier_to_measurment_form_instance(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        supplier_id: str,
        body: Optional[_models.UpsertSupplierToMeasurementFormInstanceRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """upsert_supplier_to_measurment_form_instance.

        :param id: Required.
        :type id: str
        :param supplier_id: Required.
        :type supplier_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpsertSupplierToMeasurementFormInstanceRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def upsert_supplier_to_measurment_form_instance(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        supplier_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """upsert_supplier_to_measurment_form_instance.

        :param id: Required.
        :type id: str
        :param supplier_id: Required.
        :type supplier_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def upsert_supplier_to_measurment_form_instance(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        supplier_id: str,
        body: Optional[Union[_models.UpsertSupplierToMeasurementFormInstanceRequest, IO]] = None,
        **kwargs: Any
    ) -> None:
        """upsert_supplier_to_measurment_form_instance.

        :param id: Required.
        :type id: str
        :param supplier_id: Required.
        :type supplier_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpsertSupplierToMeasurementFormInstanceRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpsertSupplierToMeasurementFormInstanceRequest')
            else:
                _json = None

        request = build_upsert_supplier_to_measurment_form_instance_request(
            id=id,
            supplier_id=supplier_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.upsert_supplier_to_measurment_form_instance.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    upsert_supplier_to_measurment_form_instance.metadata = {'url': "/measurementforms/instances/{id}/suppliers/{supplierId}"}  # type: ignore


    @distributed_trace_async
    async def remove_supplier_from_measurment_form_instance(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        supplier_id: str,
        **kwargs: Any
    ) -> None:
        """remove_supplier_from_measurment_form_instance.

        :param id: Required.
        :type id: str
        :param supplier_id: Required.
        :type supplier_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_remove_supplier_from_measurment_form_instance_request(
            id=id,
            supplier_id=supplier_id,
            template_url=self.remove_supplier_from_measurment_form_instance.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    remove_supplier_from_measurment_form_instance.metadata = {'url': "/measurementforms/instances/{id}/suppliers/{supplierId}"}  # type: ignore

