# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._workorders_operations import build_check_resource_status_request, build_delete_workorder_operation_event_request, build_delete_workorder_request, build_filter_workorder_operation_events_request, build_get_workorder_operation_event_request, build_get_workorder_request, build_list_active_workorder_operations_request, build_list_workorders_request, build_register_workorder_operation_event_request, build_set_workorder_customer_order_reference_request, build_start_workorder_operation_request, build_start_workorder_operation_v2_request, build_stop_workorder_operation_request, build_stop_workorder_operation_v2_request, build_update_workorder_operation_event_timestamps_request, build_upsert_workorder_request, build_upsert_workorder_traces_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class WorkordersOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.aio.IgnosPortal`'s
        :attr:`workorders` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @overload
    async def upsert_workorder(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[_models.UpsertWorkorder] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Create or update a workorder.

        Create or update a workorder.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpsertWorkorder
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def upsert_workorder(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Create or update a workorder.

        Create or update a workorder.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def upsert_workorder(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[Union[_models.UpsertWorkorder, IO]] = None,
        **kwargs: Any
    ) -> None:
        """Create or update a workorder.

        Create or update a workorder.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpsertWorkorder or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpsertWorkorder')
            else:
                _json = None

        request = build_upsert_workorder_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.upsert_workorder.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    upsert_workorder.metadata = {'url': "/erp/workorders"}  # type: ignore


    @distributed_trace_async
    async def list_workorders(
        self,
        page_size: int = 50,
        search: Optional[str] = None,
        active_orders: Optional[bool] = None,
        continuation_token_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> _models.WorkorderListDtoPagedResult:
        """List work orders.

        List work orders.

        :param page_size: Number of items per page. Default 50. Use -1 for dynamic page size. Default
         value is 50.
        :type page_size: int
        :param search: Searches work order ID using starts with. Default value is None.
        :type search: str
        :param active_orders: Searches active or inactive work orders. Use null to ignore. Default
         value is None.
        :type active_orders: bool
        :param continuation_token_parameter: Continuation token used for pagination. Default value is
         None.
        :type continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderListDtoPagedResult or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderListDtoPagedResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.WorkorderListDtoPagedResult]

        
        request = build_list_workorders_request(
            page_size=page_size,
            search=search,
            active_orders=active_orders,
            continuation_token_parameter=continuation_token_parameter,
            template_url=self.list_workorders.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('WorkorderListDtoPagedResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_workorders.metadata = {'url': "/erp/workorders"}  # type: ignore


    @overload
    async def upsert_workorder_traces(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        body: Optional[_models.UpsertWorkorderTracesRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Create or update trace information for a workorder.

        Create or update trace information for a workorder.

        :param id: Workorder id. Required.
        :type id: str
        :param body: Trace details. Default value is None.
        :type body: ~ignos.api.client.models.UpsertWorkorderTracesRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def upsert_workorder_traces(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Create or update trace information for a workorder.

        Create or update trace information for a workorder.

        :param id: Workorder id. Required.
        :type id: str
        :param body: Trace details. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def upsert_workorder_traces(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        body: Optional[Union[_models.UpsertWorkorderTracesRequest, IO]] = None,
        **kwargs: Any
    ) -> None:
        """Create or update trace information for a workorder.

        Create or update trace information for a workorder.

        :param id: Workorder id. Required.
        :type id: str
        :param body: Trace details. Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpsertWorkorderTracesRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpsertWorkorderTracesRequest')
            else:
                _json = None

        request = build_upsert_workorder_traces_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.upsert_workorder_traces.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    upsert_workorder_traces.metadata = {'url': "/erp/workorders/{id}/traces"}  # type: ignore


    @overload
    async def set_workorder_customer_order_reference(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        body: Optional[_models.WorkorderCustomerOrderReferenceDto] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """set_workorder_customer_order_reference.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def set_workorder_customer_order_reference(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """set_workorder_customer_order_reference.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def set_workorder_customer_order_reference(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        body: Optional[Union[_models.WorkorderCustomerOrderReferenceDto, IO]] = None,
        **kwargs: Any
    ) -> None:
        """set_workorder_customer_order_reference.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.WorkorderCustomerOrderReferenceDto or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'WorkorderCustomerOrderReferenceDto')
            else:
                _json = None

        request = build_set_workorder_customer_order_reference_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.set_workorder_customer_order_reference.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    set_workorder_customer_order_reference.metadata = {'url': "/erp/workorders/{id}/customerorderreference"}  # type: ignore


    @distributed_trace_async
    async def check_resource_status(
        self,
        id: str,
        **kwargs: Any
    ) -> _models.ResourceExistDto:
        """check_resource_status.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ResourceExistDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.ResourceExistDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.ResourceExistDto]

        
        request = build_check_resource_status_request(
            id=id,
            template_url=self.check_resource_status.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ResourceExistDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    check_resource_status.metadata = {'url': "/erp/workorders/resources/{id}/status"}  # type: ignore


    @overload
    async def start_workorder_operation(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        body: Optional[_models.StartWorkOperationRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Register start work or setup on a workorder operation.

        Register start work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.StartWorkOperationRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def start_workorder_operation(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Register start work or setup on a workorder operation.

        Register start work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def start_workorder_operation(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        body: Optional[Union[_models.StartWorkOperationRequest, IO]] = None,
        **kwargs: Any
    ) -> None:
        """Register start work or setup on a workorder operation.

        Register start work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.StartWorkOperationRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'StartWorkOperationRequest')
            else:
                _json = None

        request = build_start_workorder_operation_request(
            id=id,
            operation=operation,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.start_workorder_operation.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    start_workorder_operation.metadata = {'url': "/erp/workorders/{id}/operations/{operation}/start"}  # type: ignore


    @overload
    async def stop_workorder_operation(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        body: Optional[_models.StopWorkOperationRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Register end work or setup on a workorder operation.

        Register end work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.StopWorkOperationRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def stop_workorder_operation(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Register end work or setup on a workorder operation.

        Register end work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def stop_workorder_operation(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        body: Optional[Union[_models.StopWorkOperationRequest, IO]] = None,
        **kwargs: Any
    ) -> None:
        """Register end work or setup on a workorder operation.

        Register end work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.StopWorkOperationRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'StopWorkOperationRequest')
            else:
                _json = None

        request = build_stop_workorder_operation_request(
            id=id,
            operation=operation,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.stop_workorder_operation.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    stop_workorder_operation.metadata = {'url': "/erp/workorders/{id}/operations/{operation}/stop"}  # type: ignore


    @overload
    async def register_workorder_operation_event(
        self,
        id: str,
        operation: int,
        body: Optional[_models.RegisterWorkorderOperationEventRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register a completed work order operation event.

        Register a completed work order operation event.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.RegisterWorkorderOperationEventRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def register_workorder_operation_event(
        self,
        id: str,
        operation: int,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register a completed work order operation event.

        Register a completed work order operation event.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def register_workorder_operation_event(
        self,
        id: str,
        operation: int,
        body: Optional[Union[_models.RegisterWorkorderOperationEventRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register a completed work order operation event.

        Register a completed work order operation event.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.RegisterWorkorderOperationEventRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.WorkorderOperationEventDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'RegisterWorkorderOperationEventRequest')
            else:
                _json = None

        request = build_register_workorder_operation_event_request(
            id=id,
            operation=operation,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.register_workorder_operation_event.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('WorkorderOperationEventDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    register_workorder_operation_event.metadata = {'url': "/erp/workorders/{id}/operations/{operation}/events"}  # type: ignore


    @overload
    async def start_workorder_operation_v2(
        self,
        id: str,
        operation: int,
        body: Optional[_models.StartWorkOperationRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register start work or setup on a workorder operation.

        Register start work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.StartWorkOperationRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def start_workorder_operation_v2(
        self,
        id: str,
        operation: int,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register start work or setup on a workorder operation.

        Register start work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def start_workorder_operation_v2(
        self,
        id: str,
        operation: int,
        body: Optional[Union[_models.StartWorkOperationRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register start work or setup on a workorder operation.

        Register start work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.StartWorkOperationRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.WorkorderOperationEventDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'StartWorkOperationRequest')
            else:
                _json = None

        request = build_start_workorder_operation_v2_request(
            id=id,
            operation=operation,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.start_workorder_operation_v2.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('WorkorderOperationEventDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    start_workorder_operation_v2.metadata = {'url': "/v2/erp/workorders/{id}/operations/{operation}/start"}  # type: ignore


    @overload
    async def stop_workorder_operation_v2(
        self,
        id: str,
        operation: int,
        body: Optional[_models.StopWorkOperationRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register end work or setup on a workorder operation.

        Register end work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.StopWorkOperationRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def stop_workorder_operation_v2(
        self,
        id: str,
        operation: int,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register end work or setup on a workorder operation.

        Register end work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def stop_workorder_operation_v2(
        self,
        id: str,
        operation: int,
        body: Optional[Union[_models.StopWorkOperationRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Register end work or setup on a workorder operation.

        Register end work or setup on a workorder operation.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.StopWorkOperationRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.WorkorderOperationEventDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'StopWorkOperationRequest')
            else:
                _json = None

        request = build_stop_workorder_operation_v2_request(
            id=id,
            operation=operation,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.stop_workorder_operation_v2.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('WorkorderOperationEventDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    stop_workorder_operation_v2.metadata = {'url': "/v2/erp/workorders/{id}/operations/{operation}/stop"}  # type: ignore


    @distributed_trace_async
    async def list_active_workorder_operations(
        self,
        **kwargs: Any
    ) -> List[_models.WorkorderOperationEventDto]:
        """list_active_workorder_operations.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of WorkorderOperationEventDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.WorkorderOperationEventDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.WorkorderOperationEventDto]]

        
        request = build_list_active_workorder_operations_request(
            template_url=self.list_active_workorder_operations.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[WorkorderOperationEventDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_active_workorder_operations.metadata = {'url': "/erp/workorders/activeworkorderoperations"}  # type: ignore


    @distributed_trace_async
    async def delete_workorder_operation_event(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        event_id: str,
        **kwargs: Any
    ) -> None:
        """delete_workorder_operation_event.

        :param id: Required.
        :type id: str
        :param operation: Required.
        :type operation: int
        :param event_id: Required.
        :type event_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_workorder_operation_event_request(
            id=id,
            operation=operation,
            event_id=event_id,
            template_url=self.delete_workorder_operation_event.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_workorder_operation_event.metadata = {'url': "/erp/workorders/{id}/operations/{operation}/events/{eventId}"}  # type: ignore


    @distributed_trace_async
    async def get_workorder(
        self,
        id: str,
        **kwargs: Any
    ) -> _models.WorkorderDto:
        """Get a specific work order.

        Get a specific work order.

        :param id: The work order ID. Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.WorkorderDto]

        
        request = build_get_workorder_request(
            id=id,
            template_url=self.get_workorder.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('WorkorderDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_workorder.metadata = {'url': "/erp/workorders/{id}"}  # type: ignore


    @distributed_trace_async
    async def delete_workorder(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        **kwargs: Any
    ) -> None:
        """Deletes a specific work order.

        Deletes a specific work order.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_workorder_request(
            id=id,
            template_url=self.delete_workorder.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_workorder.metadata = {'url': "/erp/workorders/{id}"}  # type: ignore


    @distributed_trace_async
    async def get_workorder_operation_event(
        self,
        event_id: str,
        **kwargs: Any
    ) -> _models.WorkorderOperationEventDto:
        """Get a specific work order operation event.

        Get a specific work order operation event.

        :param event_id: The ID of the event. Required.
        :type event_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkorderOperationEventDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.WorkorderOperationEventDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.WorkorderOperationEventDto]

        
        request = build_get_workorder_operation_event_request(
            event_id=event_id,
            template_url=self.get_workorder_operation_event.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('WorkorderOperationEventDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_workorder_operation_event.metadata = {'url': "/erp/workorders/operations/events/{eventId}"}  # type: ignore


    @overload
    async def update_workorder_operation_event_timestamps(  # pylint: disable=inconsistent-return-statements
        self,
        event_id: str,
        body: Optional[_models.UpdateWorkorderOperationEventTimestamps] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update start time and/or end time of an existing work order operation event.

        Update start time and/or end time of an existing work order operation event.

        :param event_id: Required.
        :type event_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateWorkorderOperationEventTimestamps
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_workorder_operation_event_timestamps(  # pylint: disable=inconsistent-return-statements
        self,
        event_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update start time and/or end time of an existing work order operation event.

        Update start time and/or end time of an existing work order operation event.

        :param event_id: Required.
        :type event_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def update_workorder_operation_event_timestamps(  # pylint: disable=inconsistent-return-statements
        self,
        event_id: str,
        body: Optional[Union[_models.UpdateWorkorderOperationEventTimestamps, IO]] = None,
        **kwargs: Any
    ) -> None:
        """Update start time and/or end time of an existing work order operation event.

        Update start time and/or end time of an existing work order operation event.

        :param event_id: Required.
        :type event_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateWorkorderOperationEventTimestamps or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateWorkorderOperationEventTimestamps')
            else:
                _json = None

        request = build_update_workorder_operation_event_timestamps_request(
            event_id=event_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_workorder_operation_event_timestamps.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    update_workorder_operation_event_timestamps.metadata = {'url': "/erp/workorders/operations/events/{eventId}"}  # type: ignore


    @overload
    async def filter_workorder_operation_events(
        self,
        body: Optional[_models.FilterWorkorderOperationEvents] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> List[_models.WorkorderOperationEventDto]:
        """Filter work order operation events.

        Filter work order operation events.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.FilterWorkorderOperationEvents
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of WorkorderOperationEventDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.WorkorderOperationEventDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def filter_workorder_operation_events(
        self,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> List[_models.WorkorderOperationEventDto]:
        """Filter work order operation events.

        Filter work order operation events.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of WorkorderOperationEventDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.WorkorderOperationEventDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def filter_workorder_operation_events(
        self,
        body: Optional[Union[_models.FilterWorkorderOperationEvents, IO]] = None,
        **kwargs: Any
    ) -> List[_models.WorkorderOperationEventDto]:
        """Filter work order operation events.

        Filter work order operation events.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.FilterWorkorderOperationEvents or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of WorkorderOperationEventDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.WorkorderOperationEventDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.WorkorderOperationEventDto]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'FilterWorkorderOperationEvents')
            else:
                _json = None

        request = build_filter_workorder_operation_events_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.filter_workorder_operation_events.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[WorkorderOperationEventDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    filter_workorder_operation_events.metadata = {'url': "/erp/workorders/operations/events/filter"}  # type: ignore

