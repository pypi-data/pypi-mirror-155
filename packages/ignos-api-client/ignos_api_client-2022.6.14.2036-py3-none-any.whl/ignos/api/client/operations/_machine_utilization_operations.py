# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Optional, TYPE_CHECKING

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._serialization import Serializer
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, List, Optional, TypeVar
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_get_machine_utilizations_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    asset_id = kwargs.pop('asset_id', _params.pop('assetId', None))  # type: Optional[int]
    favorites = kwargs.pop('favorites', _params.pop('favorites', False))  # type: bool
    start_time_today = kwargs.pop('start_time_today', _params.pop('startTimeToday', None))  # type: Optional[datetime.datetime]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/machineutilization")

    # Construct parameters
    if asset_id is not None:
        _params['assetId'] = _SERIALIZER.query("asset_id", asset_id, 'int')
    if favorites is not None:
        _params['favorites'] = _SERIALIZER.query("favorites", favorites, 'bool')
    if start_time_today is not None:
        _params['startTimeToday'] = _SERIALIZER.query("start_time_today", start_time_today, 'iso-8601')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_get_utilization_data_point_for_machine_request(
    id,  # type: int
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    start_time = kwargs.pop('start_time', _params.pop('startTime', None))  # type: Optional[datetime.datetime]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/machineutilization/{id}/utilizationdatapoints")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'int'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if start_time is not None:
        _params['startTime'] = _SERIALIZER.query("start_time", start_time, 'iso-8601')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_get_utilization_details_for_machine_request(
    id,  # type: int
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    start_time = kwargs.pop('start_time', _params.pop('startTime', None))  # type: Optional[datetime.datetime]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/machineutilization/{id}/utilization")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'int'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if start_time is not None:
        _params['startTime'] = _SERIALIZER.query("start_time", start_time, 'iso-8601')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_list_n_days_power_on_utilization_datapoints_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    id = kwargs.pop('id', _params.pop('id', None))  # type: Optional[int]
    external_id = kwargs.pop('external_id', _params.pop('externalId', None))  # type: Optional[str]
    n_days = kwargs.pop('n_days', _params.pop('nDays', None))  # type: Optional[int]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/machineutilization/power-on/datapoints")

    # Construct parameters
    if id is not None:
        _params['id'] = _SERIALIZER.query("id", id, 'int')
    if external_id is not None:
        _params['externalId'] = _SERIALIZER.query("external_id", external_id, 'str')
    if n_days is not None:
        _params['nDays'] = _SERIALIZER.query("n_days", n_days, 'int')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_get_factory_utilization_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/machineutilization/factory")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_machine_states_request(
    id,  # type: int
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    start_time = kwargs.pop('start_time', _params.pop('startTime', None))  # type: Optional[datetime.datetime]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/machineutilization/{id}/machine-states")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'int'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if start_time is not None:
        _params['startTime'] = _SERIALIZER.query("start_time", start_time, 'iso-8601')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )

# fmt: on
class MachineUtilizationOperations(object):
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.IgnosPortal`'s
        :attr:`machine_utilization` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get_machine_utilizations(
        self,
        asset_id=None,  # type: Optional[int]
        favorites=False,  # type: bool
        start_time_today=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.UtilizationDto
        """get_machine_utilizations.

        :param asset_id: Default value is None.
        :type asset_id: int
        :param favorites: Default value is False.
        :type favorites: bool
        :param start_time_today: Default value is None.
        :type start_time_today: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UtilizationDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.UtilizationDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.UtilizationDto]

        
        request = build_get_machine_utilizations_request(
            asset_id=asset_id,
            favorites=favorites,
            start_time_today=start_time_today,
            template_url=self.get_machine_utilizations.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('UtilizationDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_machine_utilizations.metadata = {'url': "/machineutilization"}  # type: ignore


    @distributed_trace
    def get_utilization_data_point_for_machine(
        self,
        id,  # type: int
        start_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.NumericDataPointDto]
        """get_utilization_data_point_for_machine.

        :param id: Required.
        :type id: int
        :param start_time: Default value is None.
        :type start_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of NumericDataPointDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.NumericDataPointDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.NumericDataPointDto]]

        
        request = build_get_utilization_data_point_for_machine_request(
            id=id,
            start_time=start_time,
            template_url=self.get_utilization_data_point_for_machine.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[NumericDataPointDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_utilization_data_point_for_machine.metadata = {'url': "/machineutilization/{id}/utilizationdatapoints"}  # type: ignore


    @distributed_trace
    def get_utilization_details_for_machine(
        self,
        id,  # type: int
        start_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.UtilizationDetailsDto
        """get_utilization_details_for_machine.

        :param id: Required.
        :type id: int
        :param start_time: Default value is None.
        :type start_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UtilizationDetailsDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.UtilizationDetailsDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.UtilizationDetailsDto]

        
        request = build_get_utilization_details_for_machine_request(
            id=id,
            start_time=start_time,
            template_url=self.get_utilization_details_for_machine.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('UtilizationDetailsDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_utilization_details_for_machine.metadata = {'url': "/machineutilization/{id}/utilization"}  # type: ignore


    @distributed_trace
    def list_n_days_power_on_utilization_datapoints(
        self,
        id=None,  # type: Optional[int]
        external_id=None,  # type: Optional[str]
        n_days=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.PowerOnUtilizationList
        """list_n_days_power_on_utilization_datapoints.

        :param id: Default value is None.
        :type id: int
        :param external_id: Default value is None.
        :type external_id: str
        :param n_days: Default value is None.
        :type n_days: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PowerOnUtilizationList or the result of cls(response)
        :rtype: ~ignos.api.client.models.PowerOnUtilizationList
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.PowerOnUtilizationList]

        
        request = build_list_n_days_power_on_utilization_datapoints_request(
            id=id,
            external_id=external_id,
            n_days=n_days,
            template_url=self.list_n_days_power_on_utilization_datapoints.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('PowerOnUtilizationList', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_n_days_power_on_utilization_datapoints.metadata = {'url': "/machineutilization/power-on/datapoints"}  # type: ignore


    @distributed_trace
    def get_factory_utilization(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.PowerOnUtilizationDto
        """get_factory_utilization.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PowerOnUtilizationDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.PowerOnUtilizationDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.PowerOnUtilizationDto]

        
        request = build_get_factory_utilization_request(
            template_url=self.get_factory_utilization.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('PowerOnUtilizationDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_factory_utilization.metadata = {'url': "/machineutilization/factory"}  # type: ignore


    @distributed_trace
    def list_machine_states(
        self,
        id,  # type: int
        start_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MachineStateDatapoint]
        """list_machine_states.

        :param id: Required.
        :type id: int
        :param start_time: Default value is None.
        :type start_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MachineStateDatapoint or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MachineStateDatapoint]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MachineStateDatapoint]]

        
        request = build_list_machine_states_request(
            id=id,
            start_time=start_time,
            template_url=self.list_machine_states.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MachineStateDatapoint]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_machine_states.metadata = {'url': "/machineutilization/{id}/machine-states"}  # type: ignore

