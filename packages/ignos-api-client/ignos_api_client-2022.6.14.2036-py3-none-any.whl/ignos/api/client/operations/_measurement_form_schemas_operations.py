# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import IO, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._serialization import Serializer
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, List, Optional, TypeVar, Union
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_list_measurment_form_schemas_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    page_size = kwargs.pop('page_size', _params.pop('pageSize', 50))  # type: int
    customer_id = kwargs.pop('customer_id', _params.pop('customerId', None))  # type: Optional[str]
    customer_name = kwargs.pop('customer_name', _params.pop('customerName', None))  # type: Optional[str]
    part_number = kwargs.pop('part_number', _params.pop('partNumber', None))  # type: Optional[str]
    part_revision = kwargs.pop('part_revision', _params.pop('partRevision', None))  # type: Optional[str]
    drawing = kwargs.pop('drawing', _params.pop('drawing', None))  # type: Optional[str]
    drawing_revision = kwargs.pop('drawing_revision', _params.pop('drawingRevision', None))  # type: Optional[str]
    filter = kwargs.pop('filter', _params.pop('filter', None))  # type: Optional[str]
    continuation_token_parameter = kwargs.pop('continuation_token_parameter', _params.pop('continuationToken', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas")

    # Construct parameters
    if page_size is not None:
        _params['pageSize'] = _SERIALIZER.query("page_size", page_size, 'int')
    if customer_id is not None:
        _params['customerId'] = _SERIALIZER.query("customer_id", customer_id, 'str')
    if customer_name is not None:
        _params['customerName'] = _SERIALIZER.query("customer_name", customer_name, 'str')
    if part_number is not None:
        _params['partNumber'] = _SERIALIZER.query("part_number", part_number, 'str')
    if part_revision is not None:
        _params['partRevision'] = _SERIALIZER.query("part_revision", part_revision, 'str')
    if drawing is not None:
        _params['drawing'] = _SERIALIZER.query("drawing", drawing, 'str')
    if drawing_revision is not None:
        _params['drawingRevision'] = _SERIALIZER.query("drawing_revision", drawing_revision, 'str')
    if filter is not None:
        _params['filter'] = _SERIALIZER.query("filter", filter, 'str')
    if continuation_token_parameter is not None:
        _params['continuationToken'] = _SERIALIZER.query("continuation_token_parameter", continuation_token_parameter, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_create_measurement_form_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_measurement_form_schema_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_measurement_form_schema_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_schema_elements_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{id}/elements")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_upload_schema_drawing_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{id}/uploaddrawing")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_upload_schema_attachment_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{id}/uploadattachment")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_measurement_form_import_status_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{id}/importstatus")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_schema_element_request(
    schema_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{schemaId}/elements")
    path_format_arguments = {
        "schemaId": _SERIALIZER.url("schema_id", schema_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_measurement_form_schema_link_request(
    schema_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{schemaId}/link")
    path_format_arguments = {
        "schemaId": _SERIALIZER.url("schema_id", schema_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_measurement_form_schema_link_request(
    schema_id,  # type: str
    linked_schema_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{schemaId}/link/{linkedSchemaId}")
    path_format_arguments = {
        "schemaId": _SERIALIZER.url("schema_id", schema_id, 'str'),
        "linkedSchemaId": _SERIALIZER.url("linked_schema_id", linked_schema_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_release_schema_request(
    schema_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{schemaId}/release")
    path_format_arguments = {
        "schemaId": _SERIALIZER.url("schema_id", schema_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_revoke_schema_request(
    schema_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/{schemaId}/revoke")
    path_format_arguments = {
        "schemaId": _SERIALIZER.url("schema_id", schema_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_measurement_form_settings_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/settings")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_measurement_form_settings_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/settings")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_measurement_form_mappings_from_schema_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    target_id = kwargs.pop('target_id')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/mapping")

    # Construct parameters
    _params['targetId'] = _SERIALIZER.query("target_id", target_id, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_create_measurement_form_mapping_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/mapping")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_measurement_form_mapping_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/mapping/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_measurement_form_mapping_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/mapping/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_set_measurement_form_mapping_elements_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/mapping/{id}/elements")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_measurement_form_mapping_suggestion_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    source_id = kwargs.pop('source_id')  # type: str
    target_id = kwargs.pop('target_id')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/mappingsuggestion")

    # Construct parameters
    _params['sourceId'] = _SERIALIZER.query("source_id", source_id, 'str')
    _params['targetId'] = _SERIALIZER.query("target_id", target_id, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_import_measurement_form_schema_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/import")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_measurement_form_needs_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    page_size = kwargs.pop('page_size', _params.pop('pageSize', 50))  # type: int
    customer_id = kwargs.pop('customer_id', _params.pop('customerId', None))  # type: Optional[str]
    customer_name = kwargs.pop('customer_name', _params.pop('customerName', None))  # type: Optional[str]
    part_number = kwargs.pop('part_number', _params.pop('partNumber', None))  # type: Optional[str]
    part_revision = kwargs.pop('part_revision', _params.pop('partRevision', None))  # type: Optional[str]
    drawing = kwargs.pop('drawing', _params.pop('drawing', None))  # type: Optional[str]
    drawing_revision = kwargs.pop('drawing_revision', _params.pop('drawingRevision', None))  # type: Optional[str]
    filter = kwargs.pop('filter', _params.pop('filter', None))  # type: Optional[str]
    continuation_token_parameter = kwargs.pop('continuation_token_parameter', _params.pop('continuationToken', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/needs")

    # Construct parameters
    if page_size is not None:
        _params['pageSize'] = _SERIALIZER.query("page_size", page_size, 'int')
    if customer_id is not None:
        _params['customerId'] = _SERIALIZER.query("customer_id", customer_id, 'str')
    if customer_name is not None:
        _params['customerName'] = _SERIALIZER.query("customer_name", customer_name, 'str')
    if part_number is not None:
        _params['partNumber'] = _SERIALIZER.query("part_number", part_number, 'str')
    if part_revision is not None:
        _params['partRevision'] = _SERIALIZER.query("part_revision", part_revision, 'str')
    if drawing is not None:
        _params['drawing'] = _SERIALIZER.query("drawing", drawing, 'str')
    if drawing_revision is not None:
        _params['drawingRevision'] = _SERIALIZER.query("drawing_revision", drawing_revision, 'str')
    if filter is not None:
        _params['filter'] = _SERIALIZER.query("filter", filter, 'str')
    if continuation_token_parameter is not None:
        _params['continuationToken'] = _SERIALIZER.query("continuation_token_parameter", continuation_token_parameter, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_set_measurement_form_need_user_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/needs/{id}/assign")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_set_measurement_form_need_as_not_needed_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/needs/{id}/notneeded")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_measurment_form_schemas_not_needed_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    page_size = kwargs.pop('page_size', _params.pop('pageSize', 50))  # type: int
    customer_id = kwargs.pop('customer_id', _params.pop('customerId', None))  # type: Optional[str]
    customer_name = kwargs.pop('customer_name', _params.pop('customerName', None))  # type: Optional[str]
    part_number = kwargs.pop('part_number', _params.pop('partNumber', None))  # type: Optional[str]
    part_revision = kwargs.pop('part_revision', _params.pop('partRevision', None))  # type: Optional[str]
    drawing = kwargs.pop('drawing', _params.pop('drawing', None))  # type: Optional[str]
    drawing_revision = kwargs.pop('drawing_revision', _params.pop('drawingRevision', None))  # type: Optional[str]
    filter = kwargs.pop('filter', _params.pop('filter', None))  # type: Optional[str]
    continuation_token_parameter = kwargs.pop('continuation_token_parameter', _params.pop('continuationToken', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/schemasnotneeded")

    # Construct parameters
    if page_size is not None:
        _params['pageSize'] = _SERIALIZER.query("page_size", page_size, 'int')
    if customer_id is not None:
        _params['customerId'] = _SERIALIZER.query("customer_id", customer_id, 'str')
    if customer_name is not None:
        _params['customerName'] = _SERIALIZER.query("customer_name", customer_name, 'str')
    if part_number is not None:
        _params['partNumber'] = _SERIALIZER.query("part_number", part_number, 'str')
    if part_revision is not None:
        _params['partRevision'] = _SERIALIZER.query("part_revision", part_revision, 'str')
    if drawing is not None:
        _params['drawing'] = _SERIALIZER.query("drawing", drawing, 'str')
    if drawing_revision is not None:
        _params['drawingRevision'] = _SERIALIZER.query("drawing_revision", drawing_revision, 'str')
    if filter is not None:
        _params['filter'] = _SERIALIZER.query("filter", filter, 'str')
    if continuation_token_parameter is not None:
        _params['continuationToken'] = _SERIALIZER.query("continuation_token_parameter", continuation_token_parameter, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_set_measurment_form_schemas_not_needed_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/schemasnotneeded")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_measurment_form_schemas_not_needed_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/schemasnotneeded/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_delete_imported_measurment_schemas_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/imported")

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_list_resource_types_for_needs_generator_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/resourcetypes")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_add_resource_type_for_needs_generator_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/resourcetypes")

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_resource_type_for_needs_generator_request(
    resource_type,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/resourcetypes/{resourceType}")
    path_format_arguments = {
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="GET",
        url=_url,
        **kwargs
    )


def build_list_frequencies_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/measurementforms/schemas/frequencies")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )

# fmt: on
class MeasurementFormSchemasOperations(object):  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.IgnosPortal`'s
        :attr:`measurement_form_schemas` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def list_measurment_form_schemas(
        self,
        page_size=50,  # type: int
        customer_id=None,  # type: Optional[str]
        customer_name=None,  # type: Optional[str]
        part_number=None,  # type: Optional[str]
        part_revision=None,  # type: Optional[str]
        drawing=None,  # type: Optional[str]
        drawing_revision=None,  # type: Optional[str]
        filter=None,  # type: Optional[str]
        continuation_token_parameter=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDtoPagedResult
        """list_measurment_form_schemas.

        :param page_size: Default value is 50.
        :type page_size: int
        :param customer_id: Default value is None.
        :type customer_id: str
        :param customer_name: Default value is None.
        :type customer_name: str
        :param part_number: Default value is None.
        :type part_number: str
        :param part_revision: Default value is None.
        :type part_revision: str
        :param drawing: Default value is None.
        :type drawing: str
        :param drawing_revision: Default value is None.
        :type drawing_revision: str
        :param filter: Default value is None.
        :type filter: str
        :param continuation_token_parameter: Default value is None.
        :type continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDtoPagedResult or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDtoPagedResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDtoPagedResult]

        
        request = build_list_measurment_form_schemas_request(
            page_size=page_size,
            customer_id=customer_id,
            customer_name=customer_name,
            part_number=part_number,
            part_revision=part_revision,
            drawing=drawing,
            drawing_revision=drawing_revision,
            filter=filter,
            continuation_token_parameter=continuation_token_parameter,
            template_url=self.list_measurment_form_schemas.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDtoPagedResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measurment_form_schemas.metadata = {'url': "/measurementforms/schemas"}  # type: ignore


    @overload
    def create_measurement_form(
        self,
        body=None,  # type: Optional[_models.CreateMeasurementFormSchema]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """create_measurement_form.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormSchema
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_measurement_form(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """create_measurement_form.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_measurement_form(
        self,
        body=None,  # type: Optional[Union[_models.CreateMeasurementFormSchema, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """create_measurement_form.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormSchema or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasurementFormSchema')
            else:
                _json = None

        request = build_create_measurement_form_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_measurement_form.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measurement_form.metadata = {'url': "/measurementforms/schemas"}  # type: ignore


    @distributed_trace
    def get_measurement_form_schema(
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """get_measurement_form_schema.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaDto]

        
        request = build_get_measurement_form_schema_request(
            id=id,
            template_url=self.get_measurement_form_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_schema.metadata = {'url': "/measurementforms/schemas/{id}"}  # type: ignore


    @overload
    def update_measurement_form_schema(
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.UpdateMeasurementFormSchemaRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """update_measurement_form_schema.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasurementFormSchemaRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_measurement_form_schema(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """update_measurement_form_schema.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def update_measurement_form_schema(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.UpdateMeasurementFormSchemaRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """update_measurement_form_schema.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasurementFormSchemaRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateMeasurementFormSchemaRequest')
            else:
                _json = None

        request = build_update_measurement_form_schema_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_measurement_form_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measurement_form_schema.metadata = {'url': "/measurementforms/schemas/{id}"}  # type: ignore


    @overload
    def create_schema_elements(
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.UpdateSchemaElementsRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """create_schema_elements.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateSchemaElementsRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_schema_elements(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """create_schema_elements.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_schema_elements(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.UpdateSchemaElementsRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """create_schema_elements.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateSchemaElementsRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateSchemaElementsRequest')
            else:
                _json = None

        request = build_create_schema_elements_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_schema_elements.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_schema_elements.metadata = {'url': "/measurementforms/schemas/{id}/elements"}  # type: ignore


    @overload
    def upload_schema_drawing(
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.UploadDrawingRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """upload_schema_drawing.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UploadDrawingRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def upload_schema_drawing(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """upload_schema_drawing.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def upload_schema_drawing(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.UploadDrawingRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """upload_schema_drawing.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UploadDrawingRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UploadDrawingRequest')
            else:
                _json = None

        request = build_upload_schema_drawing_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.upload_schema_drawing.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    upload_schema_drawing.metadata = {'url': "/measurementforms/schemas/{id}/uploaddrawing"}  # type: ignore


    @overload
    def upload_schema_attachment(
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.UploadRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """upload_schema_attachment.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UploadRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def upload_schema_attachment(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """upload_schema_attachment.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def upload_schema_attachment(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.UploadRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaDto
        """upload_schema_attachment.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UploadRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UploadRequest')
            else:
                _json = None

        request = build_upload_schema_attachment_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.upload_schema_attachment.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    upload_schema_attachment.metadata = {'url': "/measurementforms/schemas/{id}/uploadattachment"}  # type: ignore


    @distributed_trace
    def get_measurement_form_import_status(
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormImportStatusDto
        """get_measurement_form_import_status.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormImportStatusDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormImportStatusDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormImportStatusDto]

        
        request = build_get_measurement_form_import_status_request(
            id=id,
            template_url=self.get_measurement_form_import_status.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormImportStatusDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_import_status.metadata = {'url': "/measurementforms/schemas/{id}/importstatus"}  # type: ignore


    @overload
    def create_schema_element(
        self,
        schema_id,  # type: str
        body=None,  # type: Optional[_models.CreateSchemaElement]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormElementDto
        """create_schema_element.

        :param schema_id: Required.
        :type schema_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateSchemaElement
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormElementDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormElementDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_schema_element(
        self,
        schema_id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormElementDto
        """create_schema_element.

        :param schema_id: Required.
        :type schema_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormElementDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormElementDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_schema_element(
        self,
        schema_id,  # type: str
        body=None,  # type: Optional[Union[_models.CreateSchemaElement, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormElementDto
        """create_schema_element.

        :param schema_id: Required.
        :type schema_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateSchemaElement or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormElementDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormElementDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormElementDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateSchemaElement')
            else:
                _json = None

        request = build_create_schema_element_request(
            schema_id=schema_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_schema_element.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormElementDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_schema_element.metadata = {'url': "/measurementforms/schemas/{schemaId}/elements"}  # type: ignore


    @overload
    def create_measurement_form_schema_link(
        self,
        schema_id,  # type: str
        body=None,  # type: Optional[_models.CreateMeasurementFormSchemaLinkRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """create_measurement_form_schema_link.

        :param schema_id: Required.
        :type schema_id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormSchemaLinkRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_measurement_form_schema_link(
        self,
        schema_id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """create_measurement_form_schema_link.

        :param schema_id: Required.
        :type schema_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_measurement_form_schema_link(
        self,
        schema_id,  # type: str
        body=None,  # type: Optional[Union[_models.CreateMeasurementFormSchemaLinkRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """create_measurement_form_schema_link.

        :param schema_id: Required.
        :type schema_id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormSchemaLinkRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasurementFormSchemaLinkRequest')
            else:
                _json = None

        request = build_create_measurement_form_schema_link_request(
            schema_id=schema_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_measurement_form_schema_link.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measurement_form_schema_link.metadata = {'url': "/measurementforms/schemas/{schemaId}/link"}  # type: ignore


    @distributed_trace
    def delete_measurement_form_schema_link(  # pylint: disable=inconsistent-return-statements
        self,
        schema_id,  # type: str
        linked_schema_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_measurement_form_schema_link.

        :param schema_id: Required.
        :type schema_id: str
        :param linked_schema_id: Required.
        :type linked_schema_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_measurement_form_schema_link_request(
            schema_id=schema_id,
            linked_schema_id=linked_schema_id,
            template_url=self.delete_measurement_form_schema_link.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measurement_form_schema_link.metadata = {'url': "/measurementforms/schemas/{schemaId}/link/{linkedSchemaId}"}  # type: ignore


    @distributed_trace
    def release_schema(
        self,
        schema_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """release_schema.

        :param schema_id: Required.
        :type schema_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        
        request = build_release_schema_request(
            schema_id=schema_id,
            template_url=self.release_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    release_schema.metadata = {'url': "/measurementforms/schemas/{schemaId}/release"}  # type: ignore


    @distributed_trace
    def revoke_schema(
        self,
        schema_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """revoke_schema.

        :param schema_id: Required.
        :type schema_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        
        request = build_revoke_schema_request(
            schema_id=schema_id,
            template_url=self.revoke_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    revoke_schema.metadata = {'url': "/measurementforms/schemas/{schemaId}/revoke"}  # type: ignore


    @distributed_trace
    def get_measurement_form_settings(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSettingsDto
        """get_measurement_form_settings.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSettingsDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSettingsDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSettingsDto]

        
        request = build_get_measurement_form_settings_request(
            template_url=self.get_measurement_form_settings.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSettingsDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_settings.metadata = {'url': "/measurementforms/schemas/settings"}  # type: ignore


    @overload
    def update_measurement_form_settings(
        self,
        body=None,  # type: Optional[_models.UpdateMeasurementFormSettings]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSettingsDto
        """update_measurement_form_settings.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasurementFormSettings
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSettingsDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSettingsDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_measurement_form_settings(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSettingsDto
        """update_measurement_form_settings.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSettingsDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSettingsDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def update_measurement_form_settings(
        self,
        body=None,  # type: Optional[Union[_models.UpdateMeasurementFormSettings, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSettingsDto
        """update_measurement_form_settings.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasurementFormSettings or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSettingsDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSettingsDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSettingsDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'UpdateMeasurementFormSettings')
            else:
                _json = None

        request = build_update_measurement_form_settings_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update_measurement_form_settings.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSettingsDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measurement_form_settings.metadata = {'url': "/measurementforms/schemas/settings"}  # type: ignore


    @distributed_trace
    def list_measurement_form_mappings_from_schema(
        self,
        target_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MeasurementFormMappingDto]
        """list_measurement_form_mappings_from_schema.

        :param target_id: Required.
        :type target_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasurementFormMappingDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasurementFormMappingDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasurementFormMappingDto]]

        
        request = build_list_measurement_form_mappings_from_schema_request(
            target_id=target_id,
            template_url=self.list_measurement_form_mappings_from_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasurementFormMappingDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measurement_form_mappings_from_schema.metadata = {'url': "/measurementforms/schemas/mapping"}  # type: ignore


    @overload
    def create_measurement_form_mapping(
        self,
        body=None,  # type: Optional[_models.CreateMeasurementFormMapping]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union[_models.MeasurementFormMappingDto, _models.ProblemDetails]
        """create_measurement_form_mapping.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormMapping
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormMappingDto or ProblemDetails or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormMappingDto or
         ~ignos.api.client.models.ProblemDetails
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_measurement_form_mapping(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union[_models.MeasurementFormMappingDto, _models.ProblemDetails]
        """create_measurement_form_mapping.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormMappingDto or ProblemDetails or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormMappingDto or
         ~ignos.api.client.models.ProblemDetails
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def create_measurement_form_mapping(
        self,
        body=None,  # type: Optional[Union[_models.CreateMeasurementFormMapping, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union[_models.MeasurementFormMappingDto, _models.ProblemDetails]
        """create_measurement_form_mapping.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormMapping or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormMappingDto or ProblemDetails or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormMappingDto or
         ~ignos.api.client.models.ProblemDetails
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Union[_models.MeasurementFormMappingDto, _models.ProblemDetails]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'CreateMeasurementFormMapping')
            else:
                _json = None

        request = build_create_measurement_form_mapping_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_measurement_form_mapping.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            deserialized = self._deserialize('MeasurementFormMappingDto', pipeline_response)

        if response.status_code == 400:
            deserialized = self._deserialize('ProblemDetails', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measurement_form_mapping.metadata = {'url': "/measurementforms/schemas/mapping"}  # type: ignore


    @distributed_trace
    def get_measurement_form_mapping(
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormMappingDto
        """get_measurement_form_mapping.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormMappingDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormMappingDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormMappingDto]

        
        request = build_get_measurement_form_mapping_request(
            id=id,
            template_url=self.get_measurement_form_mapping.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormMappingDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_mapping.metadata = {'url': "/measurementforms/schemas/mapping/{id}"}  # type: ignore


    @distributed_trace
    def delete_measurement_form_mapping(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_measurement_form_mapping.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_measurement_form_mapping_request(
            id=id,
            template_url=self.delete_measurement_form_mapping.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measurement_form_mapping.metadata = {'url': "/measurementforms/schemas/mapping/{id}"}  # type: ignore


    @overload
    def set_measurement_form_mapping_elements(
        self,
        id,  # type: str
        body=None,  # type: Optional[List[_models.MeasurementFormElementMappingRequestDto]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormMappingDto
        """set_measurement_form_mapping_elements.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: list[~ignos.api.client.models.MeasurementFormElementMappingRequestDto]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormMappingDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormMappingDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_measurement_form_mapping_elements(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormMappingDto
        """set_measurement_form_mapping_elements.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormMappingDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormMappingDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def set_measurement_form_mapping_elements(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[List[_models.MeasurementFormElementMappingRequestDto], IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormMappingDto
        """set_measurement_form_mapping_elements.

        :param id: Required.
        :type id: str
        :param body: Is either a list type or a IO type. Default value is None.
        :type body: list[~ignos.api.client.models.MeasurementFormElementMappingRequestDto] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormMappingDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormMappingDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormMappingDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, '[MeasurementFormElementMappingRequestDto]')
            else:
                _json = None

        request = build_set_measurement_form_mapping_elements_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.set_measurement_form_mapping_elements.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormMappingDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    set_measurement_form_mapping_elements.metadata = {'url': "/measurementforms/schemas/mapping/{id}/elements"}  # type: ignore


    @distributed_trace
    def get_measurement_form_mapping_suggestion(
        self,
        source_id,  # type: str
        target_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormMappingSuggestionDto
        """get_measurement_form_mapping_suggestion.

        :param source_id: Required.
        :type source_id: str
        :param target_id: Required.
        :type target_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormMappingSuggestionDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormMappingSuggestionDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormMappingSuggestionDto]

        
        request = build_get_measurement_form_mapping_suggestion_request(
            source_id=source_id,
            target_id=target_id,
            template_url=self.get_measurement_form_mapping_suggestion.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormMappingSuggestionDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_mapping_suggestion.metadata = {'url': "/measurementforms/schemas/mappingsuggestion"}  # type: ignore


    @overload
    def import_measurement_form_schema(
        self,
        body=None,  # type: Optional[_models.ImportMeasurementFormSchema]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """Custom api for initial import. Not to be used more than once per customer.

        Custom api for initial import. Not to be used more than once per customer.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.ImportMeasurementFormSchema
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def import_measurement_form_schema(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """Custom api for initial import. Not to be used more than once per customer.

        Custom api for initial import. Not to be used more than once per customer.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def import_measurement_form_schema(
        self,
        body=None,  # type: Optional[Union[_models.ImportMeasurementFormSchema, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormDto
        """Custom api for initial import. Not to be used more than once per customer.

        Custom api for initial import. Not to be used more than once per customer.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.ImportMeasurementFormSchema or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'ImportMeasurementFormSchema')
            else:
                _json = None

        request = build_import_measurement_form_schema_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.import_measurement_form_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    import_measurement_form_schema.metadata = {'url': "/measurementforms/schemas/import"}  # type: ignore


    @distributed_trace
    def list_measurement_form_needs(
        self,
        page_size=50,  # type: int
        customer_id=None,  # type: Optional[str]
        customer_name=None,  # type: Optional[str]
        part_number=None,  # type: Optional[str]
        part_revision=None,  # type: Optional[str]
        drawing=None,  # type: Optional[str]
        drawing_revision=None,  # type: Optional[str]
        filter=None,  # type: Optional[str]
        continuation_token_parameter=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormNeedDtoPagedResult
        """list_measurement_form_needs.

        :param page_size: Default value is 50.
        :type page_size: int
        :param customer_id: Default value is None.
        :type customer_id: str
        :param customer_name: Default value is None.
        :type customer_name: str
        :param part_number: Default value is None.
        :type part_number: str
        :param part_revision: Default value is None.
        :type part_revision: str
        :param drawing: Default value is None.
        :type drawing: str
        :param drawing_revision: Default value is None.
        :type drawing_revision: str
        :param filter: Default value is None.
        :type filter: str
        :param continuation_token_parameter: Default value is None.
        :type continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormNeedDtoPagedResult or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormNeedDtoPagedResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormNeedDtoPagedResult]

        
        request = build_list_measurement_form_needs_request(
            page_size=page_size,
            customer_id=customer_id,
            customer_name=customer_name,
            part_number=part_number,
            part_revision=part_revision,
            drawing=drawing,
            drawing_revision=drawing_revision,
            filter=filter,
            continuation_token_parameter=continuation_token_parameter,
            template_url=self.list_measurement_form_needs.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormNeedDtoPagedResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measurement_form_needs.metadata = {'url': "/measurementforms/schemas/needs"}  # type: ignore


    @overload
    def set_measurement_form_need_user(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.SetMeasurementFormNeedUserRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """set_measurement_form_need_user.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.SetMeasurementFormNeedUserRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_measurement_form_need_user(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """set_measurement_form_need_user.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def set_measurement_form_need_user(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.SetMeasurementFormNeedUserRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """set_measurement_form_need_user.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.SetMeasurementFormNeedUserRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'SetMeasurementFormNeedUserRequest')
            else:
                _json = None

        request = build_set_measurement_form_need_user_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.set_measurement_form_need_user.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    set_measurement_form_need_user.metadata = {'url': "/measurementforms/schemas/needs/{id}/assign"}  # type: ignore


    @overload
    def set_measurement_form_need_as_not_needed(
        self,
        id,  # type: str
        body=None,  # type: Optional[_models.SetMeasurementFormNeedAsNotNeededRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaNotNeededDto
        """set_measurement_form_need_as_not_needed.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: ~ignos.api.client.models.SetMeasurementFormNeedAsNotNeededRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaNotNeededDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaNotNeededDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_measurement_form_need_as_not_needed(
        self,
        id,  # type: str
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaNotNeededDto
        """set_measurement_form_need_as_not_needed.

        :param id: Required.
        :type id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaNotNeededDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaNotNeededDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def set_measurement_form_need_as_not_needed(
        self,
        id,  # type: str
        body=None,  # type: Optional[Union[_models.SetMeasurementFormNeedAsNotNeededRequest, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaNotNeededDto
        """set_measurement_form_need_as_not_needed.

        :param id: Required.
        :type id: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.SetMeasurementFormNeedAsNotNeededRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaNotNeededDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaNotNeededDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaNotNeededDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'SetMeasurementFormNeedAsNotNeededRequest')
            else:
                _json = None

        request = build_set_measurement_form_need_as_not_needed_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.set_measurement_form_need_as_not_needed.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaNotNeededDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    set_measurement_form_need_as_not_needed.metadata = {'url': "/measurementforms/schemas/needs/{id}/notneeded"}  # type: ignore


    @distributed_trace
    def list_measurment_form_schemas_not_needed(
        self,
        page_size=50,  # type: int
        customer_id=None,  # type: Optional[str]
        customer_name=None,  # type: Optional[str]
        part_number=None,  # type: Optional[str]
        part_revision=None,  # type: Optional[str]
        drawing=None,  # type: Optional[str]
        drawing_revision=None,  # type: Optional[str]
        filter=None,  # type: Optional[str]
        continuation_token_parameter=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaNotNeededDtoPagedResult
        """list_measurment_form_schemas_not_needed.

        :param page_size: Default value is 50.
        :type page_size: int
        :param customer_id: Default value is None.
        :type customer_id: str
        :param customer_name: Default value is None.
        :type customer_name: str
        :param part_number: Default value is None.
        :type part_number: str
        :param part_revision: Default value is None.
        :type part_revision: str
        :param drawing: Default value is None.
        :type drawing: str
        :param drawing_revision: Default value is None.
        :type drawing_revision: str
        :param filter: Default value is None.
        :type filter: str
        :param continuation_token_parameter: Default value is None.
        :type continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaNotNeededDtoPagedResult or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaNotNeededDtoPagedResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaNotNeededDtoPagedResult]

        
        request = build_list_measurment_form_schemas_not_needed_request(
            page_size=page_size,
            customer_id=customer_id,
            customer_name=customer_name,
            part_number=part_number,
            part_revision=part_revision,
            drawing=drawing,
            drawing_revision=drawing_revision,
            filter=filter,
            continuation_token_parameter=continuation_token_parameter,
            template_url=self.list_measurment_form_schemas_not_needed.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaNotNeededDtoPagedResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measurment_form_schemas_not_needed.metadata = {'url': "/measurementforms/schemas/schemasnotneeded"}  # type: ignore


    @overload
    def set_measurment_form_schemas_not_needed(
        self,
        body=None,  # type: Optional[_models.SetMeasurementFormSchemasNotNeeded]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaNotNeededDto
        """set_measurment_form_schemas_not_needed.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.SetMeasurementFormSchemasNotNeeded
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaNotNeededDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaNotNeededDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_measurment_form_schemas_not_needed(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaNotNeededDto
        """set_measurment_form_schemas_not_needed.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaNotNeededDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaNotNeededDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def set_measurment_form_schemas_not_needed(
        self,
        body=None,  # type: Optional[Union[_models.SetMeasurementFormSchemasNotNeeded, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormSchemaNotNeededDto
        """set_measurment_form_schemas_not_needed.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.SetMeasurementFormSchemasNotNeeded or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaNotNeededDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaNotNeededDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaNotNeededDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'SetMeasurementFormSchemasNotNeeded')
            else:
                _json = None

        request = build_set_measurment_form_schemas_not_needed_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.set_measurment_form_schemas_not_needed.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaNotNeededDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    set_measurment_form_schemas_not_needed.metadata = {'url': "/measurementforms/schemas/schemasnotneeded"}  # type: ignore


    @distributed_trace
    def delete_measurment_form_schemas_not_needed(  # pylint: disable=inconsistent-return-statements
        self,
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_measurment_form_schemas_not_needed.

        :param id: Required.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_measurment_form_schemas_not_needed_request(
            id=id,
            template_url=self.delete_measurment_form_schemas_not_needed.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measurment_form_schemas_not_needed.metadata = {'url': "/measurementforms/schemas/schemasnotneeded/{id}"}  # type: ignore


    @distributed_trace
    def delete_imported_measurment_schemas(  # pylint: disable=inconsistent-return-statements
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_imported_measurment_schemas.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_imported_measurment_schemas_request(
            template_url=self.delete_imported_measurment_schemas.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_imported_measurment_schemas.metadata = {'url': "/measurementforms/schemas/imported"}  # type: ignore


    @distributed_trace
    def list_resource_types_for_needs_generator(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MeasurementFormResourceTypeGeneratorDto]
        """list_resource_types_for_needs_generator.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasurementFormResourceTypeGeneratorDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasurementFormResourceTypeGeneratorDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasurementFormResourceTypeGeneratorDto]]

        
        request = build_list_resource_types_for_needs_generator_request(
            template_url=self.list_resource_types_for_needs_generator.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasurementFormResourceTypeGeneratorDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_resource_types_for_needs_generator.metadata = {'url': "/measurementforms/schemas/resourcetypes"}  # type: ignore


    @overload
    def add_resource_type_for_needs_generator(
        self,
        body=None,  # type: Optional[_models.AddResourceTypeForNeedsGenerator]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormResourceTypeGeneratorDto
        """add_resource_type_for_needs_generator.

        :param body: Default value is None.
        :type body: ~ignos.api.client.models.AddResourceTypeForNeedsGenerator
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormResourceTypeGeneratorDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormResourceTypeGeneratorDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def add_resource_type_for_needs_generator(
        self,
        body=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormResourceTypeGeneratorDto
        """add_resource_type_for_needs_generator.

        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'text/json'. Default value is
         "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormResourceTypeGeneratorDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormResourceTypeGeneratorDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def add_resource_type_for_needs_generator(
        self,
        body=None,  # type: Optional[Union[_models.AddResourceTypeForNeedsGenerator, IO]]
        **kwargs  # type: Any
    ):
        # type: (...) -> _models.MeasurementFormResourceTypeGeneratorDto
        """add_resource_type_for_needs_generator.

        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~ignos.api.client.models.AddResourceTypeForNeedsGenerator or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormResourceTypeGeneratorDto or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormResourceTypeGeneratorDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormResourceTypeGeneratorDto]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, 'AddResourceTypeForNeedsGenerator')
            else:
                _json = None

        request = build_add_resource_type_for_needs_generator_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.add_resource_type_for_needs_generator.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormResourceTypeGeneratorDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    add_resource_type_for_needs_generator.metadata = {'url': "/measurementforms/schemas/resourcetypes"}  # type: ignore


    @distributed_trace
    def delete_resource_type_for_needs_generator(  # pylint: disable=inconsistent-return-statements
        self,
        resource_type,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete_resource_type_for_needs_generator.

        :param resource_type: Required.
        :type resource_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_resource_type_for_needs_generator_request(
            resource_type=resource_type,
            template_url=self.delete_resource_type_for_needs_generator.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_resource_type_for_needs_generator.metadata = {'url': "/measurementforms/schemas/resourcetypes/{resourceType}"}  # type: ignore


    @distributed_trace
    def list_frequencies(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> List[_models.MeasurementFrequencyDto]
        """list_frequencies.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasurementFrequencyDto or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasurementFrequencyDto]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.MeasurementFrequencyDto]]

        
        request = build_list_frequencies_request(
            template_url=self.list_frequencies.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasurementFrequencyDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_frequencies.metadata = {'url': "/measurementforms/schemas/frequencies"}  # type: ignore

