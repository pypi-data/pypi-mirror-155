# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['hot_shelve']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'hot-shelve',
    'version': '0.1.2',
    'description': 'A wrapper for Python shelve that supports updating nested dictionaries in a simple way.',
    'long_description': "# Hot Shelve\n\nA wrapper for Python shelve that supports updating nested dictionaries in a simple way.\n\nEssentially, you don't need this any more:\n\n```python\nimport shelve\ndb = shelve.open('some_file.db')\ndb['key'] = {'a': 1, 'b': 2}\ntemp = db['key']\ntemp['c'] = 3\ndb['key'] = temp\ndb.sync()\n```\n\nTo use:\n\n```python\nimport hot_shelve\ndb = hot_shelve.FlatShelve('some_file.db')\ndb['key'] = {'a': 1, 'b': 2}\ndb['key']['c'] = 3\ndb.sync()\n```\n\n## Basic Usages\n\n```python\n# hot_shelve provides `HotShelve` and `FlatShelve` classes.\n# but currently (v0.1.0) only `FlatShelve` is available.\nfrom hot_shelve import FlatShelve\n\n# open a database\n# ===============\n# a database is a file with extension `.db`.\ndb = FlatShelve('path/to/db.db')\n\n# add an immutable key-value pair\n# ==============================\ndb['name'] = 'Bob'\n\n# add a mutable key-value pair\n# ============================\ndb['info'] = {'address': 'Tokyo'}\ndb['info']['phone_number'] = ['123-456-7890']\n\n# print\n# =====\n# there are two ways to show its dict structure.\n# 1. `db.to_dict()` shows user-oriented dict.\n# 2. `db.to_internal_dict()` shows the real internal dict.\n# ps: don't use `dict(db)`, it exposes mutable nodes with delegates, you can \n#   not see it clearly like `db.to_dict` does.\nprint(db.to_dict())\n# -> {'name': 'Bob', \n#     'info': {'address': 'Tokyo', \n#              'phone_number': ['123-456-7890']}}\nprint(db.to_internal_dict())\n# -> {'name': 'Bob', \n#     'info.address': 'Tokyo',\n#     'info.phone_number': ['123-456-7890']}\n\n# delete a key\n# ============\ndb.pop('name')  # -> 'Bob'\ndb['info'].pop('address')  # -> 'Tokyo'\nprint(db.to_dict())\n# -> {'info': {'phone_number': ['123-456-7890']}}\n\n# update a key\n# ============\ndb['info']['phone_number'].append('987-654-3210')\nprint(db.to_dict())\n# -> {'info': {'phone_number': ['123-456-7890', \n#                               '987-654-3210']}}\n\n# don't forget sync to disk\n# =========================\ndb.sync()  # now it's safely saved.\n\n# you can do whatever like a Shelve object does\n# =============================================\n# get, keys, values, items, setdefault, pop, update, clear, sync, close, etc.\nfor k, v in db.items():\n    print(k, v)  # -> 'info', {'phone_number': ['123-456-7890', '987-654-3210']}\n    \ndb.setdefault('name', 'Alice')  # -> 'Alice'\nprint(db.to_dict())\n# -> {'name': 'Alice',\n#     'info': {'phone_number': ['123-456-7890', \n#                               '987-654-3210']}}\n\ndb.clear()  # -> {}\n\n...\n\ndb.close()\n```\n\n## Advanced Usages\n\n```python\nfrom hot_shelve import FlatShelve\n\ndb = FlatShelve('path/to/db.db')\n\ndb['info'] = {'address': 'Tokyo'}\n\n# use `db['a.b.c']` instead of `db['a']['b']['c']`\ndb['info.phone_number'] = ['123-456-7890']\n#   it has the same effect as `db['info']['phone_number'] = ['123-456-7890']`.\n```\n\n## Tricks\n\nFollow the instructions to get a (little) better performance (in theoretical).\n\n1.  `db['a.b.c']` is better than `db['a']['b']['c']`.\n    \n    ```python\n    # good\n    db['a']['b']['c'] = 'xxx'\n    \n    # better\n    db['a.b.c'] = 'xxx'\n    ```\n\n2.  To frequently update a node, assign it to a new variable.\n\n    ```python\n    # good\n    db['a']['b']['0'] = '000'\n    db['a']['b']['1'] = '111'\n    db['a']['b']['2'] = '222'\n    ...\n\n    # better\n    db['a.b.0'] = '000'\n    db['a.b.1'] = '111'\n    db['a.b.2'] = '222'\n    ...\n\n    # best\n    node = db['a.b']\n    node['0'] = '000'\n    node['1'] = '111'\n    node['2'] = '222'\n    ...\n    ```\n\n## Cautions\n\n-   Do not use '.' in your own key name, the period symbol is reserved for key chain derivation.\n\n    ```\n    # wrong\n    words_db['splash'] = {\n        'e.g.': 'there was a splash, and then silence.'\n    }\n    ''' it will generate...\n        print(words_db.to_dict())\n        # -> {'splash': {'e': {'g': {'': 'there was a splash, and then silence.'}}}}\n        print(words_db.to_internal_dict())\n        # -> {'splash.e.g.': 'there was a splash, and then silence.'}\n    '''\n    \n    # right\n    words_db['splash'] = {\n        'example': 'there was a splash, and then silence.'\n    }\n    print(words_db.to_dict())\n    # -> {'splash': {'example': 'there was a splash, and then silence.'}}\n    print(words_db.to_internal_dict())\n    # -> {'splash.example': 'there was a splash, and then silence.'}\n    ```\n\n-   The file size will be larger than `shelve.Shelve`, because it uses a flat key-value structure.\n\n    Illustration:\n\n    A normal `Shelve` object:\n\n    ```yaml\n    data:\n        name: 'Bob'\n        info:\n            address: 'Tokyo'\n            phone_number:\n                - 123-456-7890\n                - 987-654-3210\n    ```\n\n    A `FlatShelve` object:\n\n    ```yaml\n    data.name: 'Bob'\n    data.info.address: 'Tokyo'\n    data.info.phone_number:\n        - 123-456-7890\n        - 987-654-3210\n    ```\n",
    'author': 'likianta',
    'author_email': 'likianta@foxmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/likianta/hot-shelve',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
