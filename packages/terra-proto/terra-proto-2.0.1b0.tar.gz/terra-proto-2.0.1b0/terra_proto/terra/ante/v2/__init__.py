# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/ante/v2/genesis.proto, terra/ante/v2/params.proto, terra/ante/v2/proposal.proto, terra/ante/v2/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the ante."""

    minimum_commission_enforced: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryMinimumCommissionRequest(betterproto.Message):
    """
    QueryMinimumCommissionRequest is the request type for the
    Query/MinimumCommission RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryMinimumCommissionResponse(betterproto.Message):
    """
    QueryMinimumCommissionResponse is the response type for the
    Query/MinimumCommission RPC method.
    """

    # minimum commission enforced to all validators
    minimum_commission: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the ante module's genesis state."""

    # params defines all the paramaters of the module.
    params: "Params" = betterproto.message_field(1)
    # minimum commission enforced to all validators
    minimum_commission: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MinimumCommissionUpdateProposal(betterproto.Message):
    """
    MinimumCommissionUpdateProposal is a gov Content type for initiating a
    minimum commission upgrade.
    """

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    minimum_commission: str = betterproto.string_field(3)


class QueryStub(betterproto.ServiceStub):
    async def params(self) -> "QueryParamsResponse":

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/terra.ante.v2.Query/Params", request, QueryParamsResponse
        )

    async def minimum_commission(self) -> "QueryMinimumCommissionResponse":

        request = QueryMinimumCommissionRequest()

        return await self._unary_unary(
            "/terra.ante.v2.Query/MinimumCommission",
            request,
            QueryMinimumCommissionResponse,
        )


class QueryBase(ServiceBase):
    async def params(self) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def minimum_commission(self) -> "QueryMinimumCommissionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.params(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_minimum_commission(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.minimum_commission(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/terra.ante.v2.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/terra.ante.v2.Query/MinimumCommission": grpclib.const.Handler(
                self.__rpc_minimum_commission,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryMinimumCommissionRequest,
                QueryMinimumCommissionResponse,
            ),
        }
