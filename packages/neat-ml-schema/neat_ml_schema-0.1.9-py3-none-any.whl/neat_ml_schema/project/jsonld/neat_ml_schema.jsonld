{
  "name": "neat_ml_schema",
  "description": "A schema generated by LinkML for specifying graph ML pipelines in NEAT.",
  "id": "https://w3id.org/neat",
  "imports": [
    "linkml:types"
  ],
  "license": "https://fsf.org/",
  "prefixes": [
    {
      "prefix_prefix": "linkml",
      "prefix_reference": "https://w3id.org/linkml/"
    }
  ],
  "default_prefix": "https://w3id.org/neat/",
  "default_range": "string",
  "types": [
    {
      "name": "string",
      "definition_uri": "https://w3id.org/linkml/String",
      "description": "A character string",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "str",
      "uri": "http://www.w3.org/2001/XMLSchema#string",
      "@type": "TypeDefinition"
    },
    {
      "name": "integer",
      "definition_uri": "https://w3id.org/linkml/Integer",
      "description": "An integer",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "int",
      "uri": "http://www.w3.org/2001/XMLSchema#integer",
      "@type": "TypeDefinition"
    },
    {
      "name": "boolean",
      "definition_uri": "https://w3id.org/linkml/Boolean",
      "description": "A binary (true or false) value",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "Bool",
      "uri": "http://www.w3.org/2001/XMLSchema#boolean",
      "repr": "bool",
      "@type": "TypeDefinition"
    },
    {
      "name": "float",
      "definition_uri": "https://w3id.org/linkml/Float",
      "description": "A real number that conforms to the xsd:float specification",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "float",
      "uri": "http://www.w3.org/2001/XMLSchema#float",
      "@type": "TypeDefinition"
    },
    {
      "name": "double",
      "definition_uri": "https://w3id.org/linkml/Double",
      "description": "A real number that conforms to the xsd:double specification",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "float",
      "uri": "http://www.w3.org/2001/XMLSchema#double",
      "@type": "TypeDefinition"
    },
    {
      "name": "decimal",
      "definition_uri": "https://w3id.org/linkml/Decimal",
      "description": "A real number with arbitrary precision that conforms to the xsd:decimal specification",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "Decimal",
      "uri": "http://www.w3.org/2001/XMLSchema#decimal",
      "@type": "TypeDefinition"
    },
    {
      "name": "time",
      "definition_uri": "https://w3id.org/linkml/Time",
      "description": "A time object represents a (local) time of day, independent of any particular day",
      "notes": [
        "URI is dateTime because OWL reasoners don't work with straight date or time"
      ],
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "XSDTime",
      "uri": "http://www.w3.org/2001/XMLSchema#dateTime",
      "repr": "str",
      "@type": "TypeDefinition"
    },
    {
      "name": "date",
      "definition_uri": "https://w3id.org/linkml/Date",
      "description": "a date (year, month and day) in an idealized calendar",
      "notes": [
        "URI is dateTime because OWL reasoners don't work with straight date or time"
      ],
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "XSDDate",
      "uri": "http://www.w3.org/2001/XMLSchema#date",
      "repr": "str",
      "@type": "TypeDefinition"
    },
    {
      "name": "datetime",
      "definition_uri": "https://w3id.org/linkml/Datetime",
      "description": "The combination of a date and time",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "XSDDateTime",
      "uri": "http://www.w3.org/2001/XMLSchema#dateTime",
      "repr": "str",
      "@type": "TypeDefinition"
    },
    {
      "name": "uriorcurie",
      "definition_uri": "https://w3id.org/linkml/Uriorcurie",
      "description": "a URI or a CURIE",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "URIorCURIE",
      "uri": "http://www.w3.org/2001/XMLSchema#anyURI",
      "repr": "str",
      "@type": "TypeDefinition"
    },
    {
      "name": "uri",
      "definition_uri": "https://w3id.org/linkml/Uri",
      "description": "a complete URI",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "URI",
      "uri": "http://www.w3.org/2001/XMLSchema#anyURI",
      "repr": "str",
      "@type": "TypeDefinition"
    },
    {
      "name": "ncname",
      "definition_uri": "https://w3id.org/linkml/Ncname",
      "description": "Prefix part of CURIE",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "NCName",
      "uri": "http://www.w3.org/2001/XMLSchema#string",
      "repr": "str",
      "@type": "TypeDefinition"
    },
    {
      "name": "objectidentifier",
      "definition_uri": "https://w3id.org/linkml/Objectidentifier",
      "description": "A URI or CURIE that represents an object in the model.",
      "comments": [
        "Used for inheritence and type checking"
      ],
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "ElementIdentifier",
      "uri": "http://www.w3.org/ns/shex#iri",
      "repr": "str",
      "@type": "TypeDefinition"
    },
    {
      "name": "nodeidentifier",
      "definition_uri": "https://w3id.org/linkml/Nodeidentifier",
      "description": "A URI, CURIE or BNODE that represents a node in a model.",
      "from_schema": "https://w3id.org/linkml/types",
      "imported_from": "linkml:types",
      "base": "NodeIdentifier",
      "uri": "http://www.w3.org/ns/shex#nonLiteral",
      "repr": "str",
      "@type": "TypeDefinition"
    }
  ],
  "enums": [
    {
      "name": "node_embed_method_enum",
      "definition_uri": "https://w3id.org/neat/NodeEmbedMethodEnum",
      "description": "Enums containing possible values for node embedding methods.",
      "from_schema": "https://w3id.org/neat",
      "permissible_values": [
        {
          "text": "SkipGram",
          "description": "Skip-gram is used to predict the context word for a given target word. It's reverse of CBOW algorithm."
        },
        {
          "text": "CBOW",
          "description": "Continuous Bag of Words Model (CBOW). In the CBOW model, the distributed representations of context (or surrounding words) are combined to predict the word in the middle."
        },
        {
          "text": "GloVe",
          "description": "GloVe is an unsupervised learning algorithm for obtaining vector representations for words. Training is performed on aggregated global word-word co-occurrence statistics from a corpus, and the resulting representations showcase interesting linear substructures of the word vector space."
        },
        {
          "text": "Siamese",
          "description": "A Siamese neural network (sometimes called a twin neural network) is an artificial neural network that uses the same weights while working in tandem on two different input vectors to compute comparable output vectors."
        },
        {
          "text": "TransE",
          "description": "TransE, or Translating Embeddings for Modeling Multi-relational Data, lets us embed the contents of a knowledge graph by assigning vectors to nodes and edge types (a.k.a. predicates) and, for each subject-predicate-object triple, minimizing the distance between the object vector and the translation of the subject vector along the predicate vector."
        },
        {
          "text": "SimplE"
        },
        {
          "text": "TransH",
          "description": "TransH defines a hyperplane for each relationship r, and uses the translation vector r and normal vector w of the relationship r on the plane to represent it."
        },
        {
          "text": "TransR"
        }
      ]
    },
    {
      "name": "edge_method_enum",
      "definition_uri": "https://w3id.org/neat/EdgeMethodEnum",
      "description": "Enums containing possible values for node edge methods.",
      "from_schema": "https://w3id.org/neat",
      "permissible_values": [
        {
          "text": "Average"
        },
        {
          "text": "Hadamard"
        },
        {
          "text": "Sum"
        },
        {
          "text": "L1"
        },
        {
          "text": "L2"
        },
        {
          "text": "AbsoluteL1"
        }
      ]
    },
    {
      "name": "activation_enum",
      "definition_uri": "https://w3id.org/neat/ActivationEnum",
      "description": "Enums containing possible values for activation functions.",
      "from_schema": "https://w3id.org/neat",
      "permissible_values": [
        {
          "text": "linear",
          "description": "Linear function."
        },
        {
          "text": "relu",
          "description": "Rectified Linear Unit (ReLU)"
        },
        {
          "text": "sigmoid",
          "description": "Sigmoid activation function."
        },
        {
          "text": "tanh",
          "description": "The tanh function."
        },
        {
          "text": "softmax",
          "description": "Softmax (or softargmax) function."
        }
      ]
    },
    {
      "name": "optimizer_enum",
      "definition_uri": "https://w3id.org/neat/OptimizerEnum",
      "description": "Optimizers that can be implemented in the neural network.",
      "from_schema": "https://w3id.org/neat",
      "permissible_values": [
        {
          "text": "adagrad",
          "description": "Optimizer that implements the Adagrad algorithm."
        },
        {
          "text": "adam",
          "description": "Optimizer that implements the Adam algorithm."
        },
        {
          "text": "adamax",
          "description": "Optimizer that implements the Adamax algorithm."
        },
        {
          "text": "nadam",
          "description": "Optimizer that implements the NAdam algorithm."
        },
        {
          "text": "sgd",
          "description": "Stochastic gradient descent (with momentum) optimizer."
        }
      ]
    },
    {
      "name": "classifier_callback_mode_enum",
      "definition_uri": "https://w3id.org/neat/ClassifierCallbackModeEnum",
      "description": "Callback modes while fitting a classifier.",
      "from_schema": "https://w3id.org/neat",
      "permissible_values": [
        {
          "text": "auto",
          "description": "In 'auto' mode, the direction is automatically inferred from the name of the monitored quantity."
        },
        {
          "text": "min",
          "description": "In 'min' mode, the learning rate will be reduced when the quantity monitored has stopped decreasing."
        },
        {
          "text": "max",
          "description": "In 'max' mode, the learning rate will be reduced when the quantity monitored has stopped increasing"
        }
      ]
    }
  ],
  "slots": [
    {
      "name": "neatConfiguration__graph_data",
      "description": "Configuration for graph data.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/graph_data",
      "alias": "graph_data",
      "owner": "NeatConfiguration",
      "domain_of": [
        "NeatConfiguration"
      ],
      "range": "GraphDataConfiguration",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "graphDataConfiguration__graph",
      "description": "Graph configuration for pipeline",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/graph",
      "alias": "graph",
      "owner": "GraphDataConfiguration",
      "domain_of": [
        "GraphDataConfiguration"
      ],
      "range": "EnsmallenRunConfig",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "graphDataConfiguration__evaluation_data",
      "description": "Input data for pipeline.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/evaluation_data",
      "alias": "evaluation_data",
      "owner": "GraphDataConfiguration",
      "domain_of": [
        "GraphDataConfiguration"
      ],
      "range": "TrainValidData",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "graphDataConfiguration__source_data",
      "description": "Compressed input data for pipeline (tar.gz).",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/source_data",
      "alias": "source_data",
      "owner": "GraphDataConfiguration",
      "domain_of": [
        "GraphDataConfiguration"
      ],
      "range": "FileResourceContainer",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "fileResourceContainer__files",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/files",
      "multivalued": true,
      "alias": "files",
      "owner": "FileResourceContainer",
      "domain_of": [
        "FileResourceContainer"
      ],
      "range": "FileResource",
      "inlined": true,
      "inlined_as_list": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "fileResource__path",
      "description": "File path or url.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/path",
      "alias": "path",
      "owner": "FileResource",
      "domain_of": [
        "FileResource"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "fileResource__desc",
      "description": "File description.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/desc",
      "alias": "desc",
      "owner": "FileResource",
      "domain_of": [
        "FileResource"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "trainValidData__train_data",
      "description": "Positive and negative graph data for ML training.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/train_data",
      "alias": "train_data",
      "owner": "TrainValidData",
      "domain_of": [
        "TrainValidData"
      ],
      "range": "PosNegData",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "trainValidData__valid_data",
      "description": "Positive and negative graph data for ML validation.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/valid_data",
      "alias": "valid_data",
      "owner": "TrainValidData",
      "domain_of": [
        "TrainValidData"
      ],
      "range": "PosNegData",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "posNegData__pos_edge_filepath",
      "description": "Positive edges file path.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/pos_edge_filepath",
      "alias": "pos_edge_filepath",
      "owner": "PosNegData",
      "domain_of": [
        "PosNegData"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "posNegData__neg_edge_filepath",
      "description": "Negative edges file path.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/neg_edge_filepath",
      "alias": "neg_edge_filepath",
      "owner": "PosNegData",
      "domain_of": [
        "PosNegData"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "embeddingsConfig__filename",
      "description": "Embeddings file name.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/filename",
      "alias": "filename",
      "owner": "EmbeddingsConfig",
      "domain_of": [
        "EmbeddingsConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "embeddingsConfig__history_filename",
      "description": "Embeddings history file name.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/history_filename",
      "alias": "history_filename",
      "owner": "EmbeddingsConfig",
      "domain_of": [
        "EmbeddingsConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "embeddingsConfig__node_embeddings_params",
      "description": "Node embeddings parameters.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_embeddings_params",
      "alias": "node_embeddings_params",
      "owner": "EmbeddingsConfig",
      "domain_of": [
        "EmbeddingsConfig"
      ],
      "range": "NodeEmbeddingsParams",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "embeddingsConfig__tsne_filename",
      "description": "File name for the TSNE plot.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/tsne_filename",
      "alias": "tsne_filename",
      "owner": "EmbeddingsConfig",
      "domain_of": [
        "EmbeddingsConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeEmbeddingsParams__method_name",
      "description": "Name of the node embedding method.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/method_name",
      "alias": "method_name",
      "owner": "NodeEmbeddingsParams",
      "domain_of": [
        "NodeEmbeddingsParams"
      ],
      "range": "node_embed_method_enum",
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeEmbeddingsParams__walk_length",
      "description": "Maximal length of the walks.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/walk_length",
      "alias": "walk_length",
      "owner": "NodeEmbeddingsParams",
      "domain_of": [
        "NodeEmbeddingsParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeEmbeddingsParams__batch_size",
      "description": "Number of nodes to include in a single batch.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/batch_size",
      "alias": "batch_size",
      "owner": "NodeEmbeddingsParams",
      "domain_of": [
        "NodeEmbeddingsParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeEmbeddingsParams__window_size",
      "description": "Size of the context and target nodes for node2vec.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/window_size",
      "alias": "window_size",
      "owner": "NodeEmbeddingsParams",
      "domain_of": [
        "NodeEmbeddingsParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeEmbeddingsParams__return_weight",
      "description": "Weight on the probability of returning to the same node the walk just came from Having this higher tends the walks to be more like a Breadth-First Search. Having this very high  (> 2) makes search very local. Equal to the inverse of p in the Node2Vec paper.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/return_weight",
      "alias": "return_weight",
      "owner": "NodeEmbeddingsParams",
      "domain_of": [
        "NodeEmbeddingsParams"
      ],
      "range": "float",
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeEmbeddingsParams__explore_weight",
      "description": "Weight on the probability of visiting a neighbor node to the one we're coming from in the random walk Having this higher tends the walks to be more like a Depth-First Search. Having this very high makes search more outward. Having this very low makes search very local. Equal to the inverse of q in the Node2Vec paper.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/explore_weight",
      "alias": "explore_weight",
      "owner": "NodeEmbeddingsParams",
      "domain_of": [
        "NodeEmbeddingsParams"
      ],
      "range": "float",
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeEmbeddingsParams__iterations",
      "description": "Number of iterations.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/iterations",
      "alias": "iterations",
      "owner": "NodeEmbeddingsParams",
      "domain_of": [
        "NodeEmbeddingsParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierContainer__classifiers",
      "description": "Classifier details.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/classifiers",
      "multivalued": true,
      "alias": "classifiers",
      "owner": "ClassifierContainer",
      "domain_of": [
        "ClassifierContainer"
      ],
      "range": "Classifier",
      "inlined": true,
      "inlined_as_list": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "classifier__classifier_id",
      "description": "Key to identify the classifier and associated parameters.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/classifier_id",
      "alias": "classifier_id",
      "owner": "Classifier",
      "domain_of": [
        "Classifier"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifier__classifier_name",
      "description": "Name of the classifier.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/classifier_name",
      "alias": "classifier_name",
      "owner": "Classifier",
      "domain_of": [
        "Classifier"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifier__classifier_type",
      "description": "Type of classifier.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/classifier_type",
      "alias": "classifier_type",
      "owner": "Classifier",
      "domain_of": [
        "Classifier"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifier__edge_method",
      "description": "Edge method.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_method",
      "alias": "edge_method",
      "owner": "Classifier",
      "domain_of": [
        "Classifier"
      ],
      "range": "edge_method_enum",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifier__outfile",
      "description": "Fie path for saving output.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/outfile",
      "alias": "outfile",
      "owner": "Classifier",
      "domain_of": [
        "Classifier"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifier__history_filename",
      "description": "File name for saving history.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/history_filename",
      "alias": "history_filename",
      "owner": "Classifier",
      "domain_of": [
        "Classifier"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifier__parameters",
      "description": "Parameters to be passed for building classifier.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/parameters",
      "alias": "parameters",
      "owner": "Classifier",
      "domain_of": [
        "Classifier"
      ],
      "range": "ClassifierParams",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierParams__sklearn_params",
      "description": "Parameters specific to sklearn.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/sklearn_params",
      "alias": "sklearn_params",
      "owner": "ClassifierParams",
      "domain_of": [
        "ClassifierParams"
      ],
      "range": "SkLearnParams",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierParams__tf_keras_params",
      "description": "Parameters specific to Tensorflow/Keras",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/tf_keras_params",
      "alias": "tf_keras_params",
      "owner": "ClassifierParams",
      "domain_of": [
        "ClassifierParams"
      ],
      "range": "TFKerasParams",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "skLearnParams__random_state",
      "description": "Random seed.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/random_state",
      "alias": "random_state",
      "owner": "SkLearnParams",
      "domain_of": [
        "SkLearnParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "skLearnParams__max_iter",
      "description": "Maximum iterations.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/max_iter",
      "alias": "max_iter",
      "owner": "SkLearnParams",
      "domain_of": [
        "SkLearnParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "tFKerasParams__layers_config",
      "description": "Configuration for instantiating layers for neural networks.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/layers_config",
      "alias": "layers_config",
      "owner": "TFKerasParams",
      "domain_of": [
        "TFKerasParams"
      ],
      "range": "LayerContainer",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "tFKerasParams__loss",
      "description": "Loss function.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/loss",
      "alias": "loss",
      "owner": "TFKerasParams",
      "domain_of": [
        "TFKerasParams"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "tFKerasParams__metrics_config",
      "description": "Metrics to be calculated after classifier training.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/metrics_config",
      "alias": "metrics_config",
      "owner": "TFKerasParams",
      "domain_of": [
        "TFKerasParams"
      ],
      "range": "MetricContainer",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "tFKerasParams__optimizer",
      "description": "Optimizer function to be used during classifier training.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/optimizer",
      "alias": "optimizer",
      "owner": "TFKerasParams",
      "domain_of": [
        "TFKerasParams"
      ],
      "range": "optimizer_enum",
      "@type": "SlotDefinition"
    },
    {
      "name": "tFKerasParams__fit_config",
      "description": "Configuration for model fitting.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/fit_config",
      "alias": "fit_config",
      "owner": "TFKerasParams",
      "domain_of": [
        "TFKerasParams"
      ],
      "range": "ClassifierFitParams",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "layerContainer__layers",
      "description": "Container of layers to be used to build the neural network.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/layers",
      "multivalued": true,
      "alias": "layers",
      "owner": "LayerContainer",
      "domain_of": [
        "LayerContainer"
      ],
      "range": "Layer",
      "inlined": true,
      "inlined_as_list": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "layer__type",
      "description": "Type of layer.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/type",
      "alias": "type",
      "owner": "Layer",
      "domain_of": [
        "Layer"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "layer__parameters",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/parameters",
      "alias": "parameters",
      "owner": "Layer",
      "domain_of": [
        "Layer"
      ],
      "range": "LayerParams",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "layerParams__units",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/units",
      "alias": "units",
      "owner": "LayerParams",
      "domain_of": [
        "LayerParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "layerParams__activation",
      "description": "Activation layer type",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/activation",
      "alias": "activation",
      "owner": "LayerParams",
      "domain_of": [
        "LayerParams"
      ],
      "range": "activation_enum",
      "@type": "SlotDefinition"
    },
    {
      "name": "layerParams__rate",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/rate",
      "alias": "rate",
      "owner": "LayerParams",
      "domain_of": [
        "LayerParams"
      ],
      "range": "float",
      "@type": "SlotDefinition"
    },
    {
      "name": "metricContainer__metrics",
      "description": "Metrics need to train a classifier.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/metrics",
      "multivalued": true,
      "alias": "metrics",
      "owner": "MetricContainer",
      "domain_of": [
        "MetricContainer"
      ],
      "range": "Metric",
      "inlined": true,
      "inlined_as_list": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "metric__type",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/type",
      "alias": "type",
      "owner": "Metric",
      "domain_of": [
        "Metric"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "metric__name",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/name",
      "alias": "name",
      "owner": "Metric",
      "domain_of": [
        "Metric"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "metric__curve",
      "description": "Area under curve (AUC) to be calculated.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/curve",
      "alias": "curve",
      "owner": "Metric",
      "domain_of": [
        "Metric"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierFitParams__batch_size",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/batch_size",
      "alias": "batch_size",
      "owner": "ClassifierFitParams",
      "domain_of": [
        "ClassifierFitParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierFitParams__epochs",
      "description": "Number of epochs to run for training.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/epochs",
      "alias": "epochs",
      "owner": "ClassifierFitParams",
      "domain_of": [
        "ClassifierFitParams"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierFitParams__callbacks_list",
      "description": "Container of callbacks.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/callbacks_list",
      "alias": "callbacks_list",
      "owner": "ClassifierFitParams",
      "domain_of": [
        "ClassifierFitParams"
      ],
      "range": "ClassifierCallbackContainer",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierCallbackContainer__callbacks",
      "description": "Callbacks.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/callbacks",
      "multivalued": true,
      "alias": "callbacks",
      "owner": "ClassifierCallbackContainer",
      "domain_of": [
        "ClassifierCallbackContainer"
      ],
      "range": "ClassifierCallback",
      "inlined": true,
      "inlined_as_list": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierCallback__type",
      "description": "Type of callback.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/type",
      "alias": "type",
      "owner": "ClassifierCallback",
      "domain_of": [
        "ClassifierCallback"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierCallback__monitor",
      "description": "Quantity to be monitored.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/monitor",
      "alias": "monitor",
      "owner": "ClassifierCallback",
      "domain_of": [
        "ClassifierCallback"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierCallback__patience",
      "description": "Number of epochs with no improvement after which training will be stopped.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/patience",
      "alias": "patience",
      "owner": "ClassifierCallback",
      "domain_of": [
        "ClassifierCallback"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierCallback__min_delta",
      "description": "Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/min_delta",
      "alias": "min_delta",
      "owner": "ClassifierCallback",
      "domain_of": [
        "ClassifierCallback"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierCallback__verbose",
      "description": "Verbosity mode, 0 or 1. Mode 0 is silent, and mode 1 displays messages when the callback takes an action.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/verbose",
      "alias": "verbose",
      "owner": "ClassifierCallback",
      "domain_of": [
        "ClassifierCallback"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "classifierCallback__mode",
      "description": "One of {\"auto\", \"min\", \"max\"}. In min mode, training will stop when the quantity monitored has stopped decreasing; in \"max\" mode it will stop when the quantity monitored has stopped increasing; in \"auto\" mode, the direction is automatically inferred from the name of the monitored quantity.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/mode",
      "alias": "mode",
      "owner": "ClassifierCallback",
      "domain_of": [
        "ClassifierCallback"
      ],
      "range": "classifier_callback_mode_enum",
      "@type": "SlotDefinition"
    },
    {
      "name": "applyTrainedModelsContainer__models",
      "description": "Models that need to be used for link prediction.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/models",
      "multivalued": true,
      "alias": "models",
      "owner": "ApplyTrainedModelsContainer",
      "domain_of": [
        "ApplyTrainedModelsContainer"
      ],
      "range": "ApplyTrainedModel",
      "inlined": true,
      "inlined_as_list": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "applyTrainedModel__model_id",
      "description": "Key of the model to be used.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/model_id",
      "alias": "model_id",
      "owner": "ApplyTrainedModel",
      "domain_of": [
        "ApplyTrainedModel"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "applyTrainedModel__node_types",
      "description": "Type of nodes.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_types",
      "alias": "node_types",
      "owner": "ApplyTrainedModel",
      "domain_of": [
        "ApplyTrainedModel"
      ],
      "range": "NodeType",
      "inlined": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "applyTrainedModel__cutoff",
      "description": "Cutoff filter.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/cutoff",
      "alias": "cutoff",
      "owner": "ApplyTrainedModel",
      "domain_of": [
        "ApplyTrainedModel"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "applyTrainedModel__outfile",
      "description": "File path for saving results.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/outfile",
      "alias": "outfile",
      "owner": "ApplyTrainedModel",
      "domain_of": [
        "ApplyTrainedModel"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeType__source",
      "description": "Source node(s).",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/source",
      "multivalued": true,
      "alias": "source",
      "owner": "NodeType",
      "domain_of": [
        "NodeType"
      ],
      "range": "string",
      "inlined_as_list": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "nodeType__destination",
      "description": "Destination node(s).",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/destination",
      "multivalued": true,
      "alias": "destination",
      "owner": "NodeType",
      "domain_of": [
        "NodeType"
      ],
      "range": "string",
      "inlined_as_list": true,
      "@type": "SlotDefinition"
    },
    {
      "name": "upload__s3_bucket",
      "description": "Bucket name.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/s3_bucket",
      "alias": "s3_bucket",
      "owner": "Upload",
      "domain_of": [
        "Upload"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "upload__s3_bucket_dir",
      "description": "Bucket path.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/s3_bucket_dir",
      "alias": "s3_bucket_dir",
      "owner": "Upload",
      "domain_of": [
        "Upload"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "upload__extra_args",
      "description": "Extra keyword arguments (**kwargs).",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/extra_args",
      "multivalued": true,
      "alias": "extra_args",
      "owner": "Upload",
      "domain_of": [
        "Upload"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "target__target_path",
      "description": "File path for saving results.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/target_path",
      "alias": "target_path",
      "owner": "Target",
      "domain_of": [
        "Target"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_type_path",
      "description": "The path to the file with the unique node type names.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_type_path",
      "alias": "node_type_path",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_type_list_separator",
      "description": "The separator to use for the node types file.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_type_list_separator",
      "alias": "node_type_list_separator",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_types_column_number",
      "description": "Node type column number.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_types_column_number",
      "alias": "node_types_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_types_column",
      "description": "Node type column name.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_types_column",
      "alias": "node_types_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_types_ids_column_number",
      "description": "Node type ID column number.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_types_ids_column_number",
      "alias": "node_types_ids_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_types_ids_column",
      "description": "Node type ID column name.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_types_ids_column",
      "alias": "node_types_ids_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_types_number",
      "description": "The number of the unique node types. This will be used in order to allocate the correct size for the data structure.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_types_number",
      "alias": "node_types_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__numeric_node_type_ids",
      "description": "Whether the node type names should be loaded as numeric values, i.e. casted from string to a numeric representation.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/numeric_node_type_ids",
      "alias": "numeric_node_type_ids",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__minimum_node_type_id",
      "description": "The minimum node type ID to be used when using numeric node type IDs.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/minimum_node_type_id",
      "alias": "minimum_node_type_id",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_type_list_header",
      "description": "Whether the node type file has an header.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_type_list_header",
      "alias": "node_type_list_header",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_type_list_support_balanced_quotes",
      "description": "Whether to support balanced quotes.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_type_list_support_balanced_quotes",
      "alias": "node_type_list_support_balanced_quotes",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_type_list_rows_to_skip",
      "description": "The number of lines to skip in the node types file. The header is already skipped if it has been specified that the file has an header.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_type_list_rows_to_skip",
      "alias": "node_type_list_rows_to_skip",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_type_list_is_correct",
      "description": "Whether the node types file can be assumed to be correct, i.e. does not have something wrong in it. If this parameter is passed as true on a malformed file, the constructor will crash.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_type_list_is_correct",
      "alias": "node_type_list_is_correct",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_type_list_max_rows_number",
      "description": "The maximum number of lines to be loaded from the node types file.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_type_list_max_rows_number",
      "alias": "node_type_list_max_rows_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_type_list_comment_symbol",
      "description": "The comment symbol to skip lines in the node types file. Lines starting with this symbol will be skipped.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_type_list_comment_symbol",
      "alias": "node_type_list_comment_symbol",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__load_node_type_list_in_parallel",
      "description": "Whether to load the node type list in parallel. Note that when loading in parallel, the internal order of the node type IDs may result changed across different iterations. We are working to get this to be stable.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/load_node_type_list_in_parallel",
      "alias": "load_node_type_list_in_parallel",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_path",
      "description": "The path to the file with the unique node names.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_path",
      "alias": "node_path",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_separator",
      "description": "The separator to use for the nodes file. Note that if this is not provided, one will be automatically detected among the following - comma, semi-column, tab and space.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_separator",
      "alias": "node_list_separator",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_header",
      "description": "Whether the nodes file has an header.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_header",
      "alias": "node_list_header",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_support_balanced_quotes",
      "description": "Whether to support balanced quotes.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_support_balanced_quotes",
      "alias": "node_list_support_balanced_quotes",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_rows_to_skip",
      "description": "Number of rows to skip in the node list file.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_rows_to_skip",
      "alias": "node_list_rows_to_skip",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_is_correct",
      "description": "Whether the nodes file can be assumed to be correct, i.e. does not have something wrong in it. If this parameter is passed as true on a malformed file, the constructor will crash.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_is_correct",
      "alias": "node_list_is_correct",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_max_rows_number",
      "description": "The maximum number of lines to be loaded from the nodes file.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_max_rows_number",
      "alias": "node_list_max_rows_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_comment_symbol",
      "description": "The comment symbol to skip lines in the nodes file. Lines starting with this symbol will be skipped.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_comment_symbol",
      "alias": "node_list_comment_symbol",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__default_node_type",
      "description": "The node type to be used when the node type for a given node in the node file is None.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/default_node_type",
      "alias": "default_node_type",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__nodes_column_number",
      "description": "The number of the column of the node file from where to load the node names.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/nodes_column_number",
      "alias": "nodes_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__nodes_column",
      "description": "The name of the column of the node file from where to load the node names.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/nodes_column",
      "alias": "nodes_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_types_separator",
      "description": "The node types separator.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_types_separator",
      "alias": "node_types_separator",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_node_types_column_number",
      "description": "The number of the column of the node file from where to load the node types.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_node_types_column_number",
      "alias": "node_list_node_types_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_node_types_column",
      "description": "The name of the column of the node file from where to load the node types.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_node_types_column",
      "alias": "node_list_node_types_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_ids_column",
      "description": "The name of the column of the node file from where to load the node IDs.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_ids_column",
      "alias": "node_ids_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_ids_column_number",
      "description": "The number of the column of the node file from where to load the node IDs",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_ids_column_number",
      "alias": "node_ids_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__nodes_number",
      "description": "The expected number of nodes. Note that this must be the EXACT number of nodes in the graph.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/nodes_number",
      "alias": "nodes_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__minimum_node_id",
      "description": "The minimum node ID to be used, when loading the node IDs as numerical.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/minimum_node_id",
      "alias": "minimum_node_id",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__numeric_node_ids",
      "description": "Whether to load the numeric node IDs as numeric.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/numeric_node_ids",
      "alias": "numeric_node_ids",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__node_list_numeric_node_type_ids",
      "description": "Whether to load the node types IDs in the node file to be numeric.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/node_list_numeric_node_type_ids",
      "alias": "node_list_numeric_node_type_ids",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__skip_node_types_if_unavailable",
      "description": "Whether to skip the node types without raising an error if these are unavailable.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/skip_node_types_if_unavailable",
      "alias": "skip_node_types_if_unavailable",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__load_node_list_in_parallel",
      "description": "Whether to load the node list in parallel. When loading in parallel, without node IDs, the nodes may not be loaded in a deterministic order.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/load_node_list_in_parallel",
      "alias": "load_node_list_in_parallel",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_type_path",
      "description": "The path to the file with the unique edge type names.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_type_path",
      "alias": "edge_type_path",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_types_column_number",
      "description": "The number of the column of the edge types file from where to load the edge types.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_types_column_number",
      "alias": "edge_types_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_types_column",
      "description": "The name of the column of the edge types file from where to load the edge types.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_types_column",
      "alias": "edge_types_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_types_number",
      "description": "The number of the unique edge types. This will be used in order to allocate the correct size for the data structure.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_types_number",
      "alias": "edge_types_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__numeric_edge_type_ids",
      "description": "Whether the edge type names should be loaded as numeric values, i.e. casted from string to a numeric representation.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/numeric_edge_type_ids",
      "alias": "numeric_edge_type_ids",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__minimum_edge_type_id",
      "description": "The minimum edge type ID to be used when using numeric edge type IDs.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/minimum_edge_type_id",
      "alias": "minimum_edge_type_id",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_type_list_separator",
      "description": "The separator to use for the edge type list. Note that, if None is provided, one will be attempted to be detected automatically between ';', ',', tab or space.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_type_list_separator",
      "alias": "edge_type_list_separator",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_type_list_header",
      "description": "Whether the edge type file has an header.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_type_list_header",
      "alias": "edge_type_list_header",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_type_list_support_balanced_quotes",
      "description": "Whether to support balanced quotes while reading the edge type list.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_type_list_support_balanced_quotes",
      "alias": "edge_type_list_support_balanced_quotes",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_type_list_rows_to_skip",
      "description": "Number of rows to skip in the edge type list file.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_type_list_rows_to_skip",
      "alias": "edge_type_list_rows_to_skip",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_type_list_is_correct",
      "description": "Whether the edge types file can be assumed to be correct, i.e. does not have something wrong in it. If this parameter is passed as true on a malformed file, the constructor will crash.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_type_list_is_correct",
      "alias": "edge_type_list_is_correct",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_type_list_max_rows_number",
      "description": "The maximum number of lines to be loaded from the edge types file.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_type_list_max_rows_number",
      "alias": "edge_type_list_max_rows_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_type_list_comment_symbol",
      "description": "The comment symbol to skip lines in the edge types file. Lines starting with this symbol will be skipped.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_type_list_comment_symbol",
      "alias": "edge_type_list_comment_symbol",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__load_edge_type_list_in_parallel",
      "description": "Whether to load the edge type list in parallel. When loading in parallel, without edge type IDs, the edge types may not be loaded in a deterministic order.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/load_edge_type_list_in_parallel",
      "alias": "load_edge_type_list_in_parallel",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_path",
      "description": "The path to the file with the edge list.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_path",
      "alias": "edge_path",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_separator",
      "description": "The separator to use for the edge list. Note that, if None is provided, one will be attempted to be detected automatically between ';', ',', tab or space.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_separator",
      "alias": "edge_list_separator",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_header",
      "description": "Whether the edges file has an header.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_header",
      "alias": "edge_list_header",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_support_balanced_quotes",
      "description": "Whether to support balanced quotes while reading the edge list.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_support_balanced_quotes",
      "alias": "edge_list_support_balanced_quotes",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_rows_to_skip",
      "description": "Number of rows to skip in the edge list file.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_rows_to_skip",
      "alias": "edge_list_rows_to_skip",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__sources_column_number",
      "description": "The number of the column of the edges file from where to load the source nodes.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/sources_column_number",
      "alias": "sources_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__sources_column",
      "description": "The name of the column of the edges file from where to load the source nodes.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/sources_column",
      "alias": "sources_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__destinations_column_number",
      "description": "The number of the column of the edges file from where to load the destinaton nodes.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/destinations_column_number",
      "alias": "destinations_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__destinations_column",
      "description": "The name of the column of the edges file from where to load the destinaton nodes.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/destinations_column",
      "alias": "destinations_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_edge_types_column_number",
      "description": "The number of the column of the edges file from where to load the edge types.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_edge_types_column_number",
      "alias": "edge_list_edge_types_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_edge_types_column",
      "description": "The name of the column of the edges file from where to load the edge types.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_edge_types_column",
      "alias": "edge_list_edge_types_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__default_edge_type",
      "description": "The edge type to be used when the edge type for a given edge in the edge file is None.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/default_edge_type",
      "alias": "default_edge_type",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__weights_column_number",
      "description": "The number of the column of the edges file from where to load the edge weights.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/weights_column_number",
      "alias": "weights_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__weights_column",
      "description": "The name of the column of the edges file from where to load the edge weights.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/weights_column",
      "alias": "weights_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__default_weight",
      "description": "The edge weight to be used when the edge weight for a given edge in the edge file is None.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/default_weight",
      "alias": "default_weight",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "float",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_ids_column",
      "description": "The name of the column of the edges file from where to load the edge IDs.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_ids_column",
      "alias": "edge_ids_column",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_ids_column_number",
      "description": "The number of the column of the edges file from where to load the edge IDs.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_ids_column_number",
      "alias": "edge_ids_column_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_numeric_edge_type_ids",
      "description": "Whether to load the edge type IDs as numeric from the edge list.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_numeric_edge_type_ids",
      "alias": "edge_list_numeric_edge_type_ids",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_numeric_node_ids",
      "description": "Whether to load the edge node IDs as numeric from the edge list.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_numeric_node_ids",
      "alias": "edge_list_numeric_node_ids",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__skip_weights_if_unavailable",
      "description": "Whether to skip the weights without raising an error if these are unavailable.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/skip_weights_if_unavailable",
      "alias": "skip_weights_if_unavailable",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__skip_edge_types_if_unavailable",
      "description": "Whether to skip the edge types without raising an error if these are unavailable.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/skip_edge_types_if_unavailable",
      "alias": "skip_edge_types_if_unavailable",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_is_complete",
      "description": "Whether to consider the edge list as complete, i.e. the edges are presented in both directions when loading an undirected graph.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_is_complete",
      "alias": "edge_list_is_complete",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_may_contain_duplicates",
      "description": "Whether the edge list may contain duplicates. If the edge list surely DOES NOT contain duplicates, a validation step may be skipped. By default, it is assumed that the edge list may contain duplicates.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_may_contain_duplicates",
      "alias": "edge_list_may_contain_duplicates",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_is_sorted",
      "description": "Whether the edge list is sorted. Note that a sorted edge list has the minimal memory peak, but requires the nodes number and the edges number.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_is_sorted",
      "alias": "edge_list_is_sorted",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_is_correct",
      "description": "Whether the edges file can be assumed to be correct, i.e. does not have something wrong in it. If this parameter is passed as true on a malformed file, the constructor will crash.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_is_correct",
      "alias": "edge_list_is_correct",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_max_rows_number",
      "description": "The maximum number of lines to be loaded from the edges file.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_max_rows_number",
      "alias": "edge_list_max_rows_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edge_list_comment_symbol",
      "description": "The comment symbol to skip lines in the edges file. Lines starting with this symbol will be skipped.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edge_list_comment_symbol",
      "alias": "edge_list_comment_symbol",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__edges_number",
      "description": "The expected number of edges. Note that this must be the EXACT number of edges in the graph.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/edges_number",
      "alias": "edges_number",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "integer",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__load_edge_list_in_parallel",
      "description": "Whether to load the edge list in parallel. Note that, if the edge IDs indices are not given, it is NOT possible to load a sorted edge list. Similarly, when loading in parallel, without edge IDs, the edges may not be loaded in a deterministic order.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/load_edge_list_in_parallel",
      "alias": "load_edge_list_in_parallel",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__verbose",
      "description": "Whether to show a loading bar while reading the files. Note that, if parallel loading is enabled, loading bars will not be showed because they are a synchronization bottleneck.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/verbose",
      "alias": "verbose",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__may_have_singletons",
      "description": "Whether the graph may be expected to have singleton nodes. If it is said that it surely DOES NOT have any, it will allow for some speedups and lower mempry peaks.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/may_have_singletons",
      "alias": "may_have_singletons",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__may_have_singleton_with_selfloops",
      "description": "Whether the graph may be expected to have singleton nodes with selfloops. If it is said that it surely DOES NOT have any, it will allow for some speedups and lower mempry peaks.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/may_have_singleton_with_selfloops",
      "alias": "may_have_singleton_with_selfloops",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__directed",
      "description": "Whether to load the graph as directed or undirected.",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/directed",
      "alias": "directed",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "boolean",
      "@type": "SlotDefinition"
    },
    {
      "name": "ensmallenRunConfig__name",
      "from_schema": "https://w3id.org/neat",
      "slot_uri": "https://w3id.org/neat/name",
      "alias": "name",
      "owner": "EnsmallenRunConfig",
      "domain_of": [
        "EnsmallenRunConfig"
      ],
      "range": "string",
      "@type": "SlotDefinition"
    }
  ],
  "classes": [
    {
      "name": "NeatConfiguration",
      "definition_uri": "https://w3id.org/neat/NeatConfiguration",
      "description": "Root class for the schema.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "neatConfiguration__graph_data"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "graph_data",
          "description": "Configuration for graph data.",
          "range": "GraphDataConfiguration",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/NeatConfiguration",
      "tree_root": true,
      "@type": "ClassDefinition"
    },
    {
      "name": "GraphDataConfiguration",
      "definition_uri": "https://w3id.org/neat/GraphDataConfiguration",
      "description": "Configuration for the graph training and validation data for ML pipeline.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "graphDataConfiguration__graph",
        "graphDataConfiguration__evaluation_data",
        "graphDataConfiguration__source_data"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "graph",
          "description": "Graph configuration for pipeline",
          "range": "EnsmallenRunConfig",
          "@type": "SlotDefinition"
        },
        {
          "name": "evaluation_data",
          "description": "Input data for pipeline.",
          "range": "TrainValidData",
          "@type": "SlotDefinition"
        },
        {
          "name": "source_data",
          "description": "Compressed input data for pipeline (tar.gz).",
          "range": "FileResourceContainer",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/GraphDataConfiguration",
      "@type": "ClassDefinition"
    },
    {
      "name": "FileResourceContainer",
      "definition_uri": "https://w3id.org/neat/FileResourceContainer",
      "description": "A container of paths and descriptions",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "fileResourceContainer__files"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "files",
          "multivalued": true,
          "range": "FileResource",
          "inlined_as_list": true,
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/FileResourceContainer",
      "@type": "ClassDefinition"
    },
    {
      "name": "FileResource",
      "definition_uri": "https://w3id.org/neat/FileResource",
      "description": "Path (or url) and description of source files (tar.gz).",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "fileResource__path",
        "fileResource__desc"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "path",
          "description": "File path or url.",
          "@type": "SlotDefinition"
        },
        {
          "name": "desc",
          "description": "File description.",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/FileResource",
      "@type": "ClassDefinition"
    },
    {
      "name": "TrainValidData",
      "definition_uri": "https://w3id.org/neat/TrainValidData",
      "description": "Postive and negative training and validation graph data filepaths.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "trainValidData__train_data",
        "trainValidData__valid_data"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "train_data",
          "description": "Positive and negative graph data for ML training.",
          "range": "PosNegData",
          "@type": "SlotDefinition"
        },
        {
          "name": "valid_data",
          "description": "Positive and negative graph data for ML validation.",
          "range": "PosNegData",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/TrainValidData",
      "@type": "ClassDefinition"
    },
    {
      "name": "PosNegData",
      "definition_uri": "https://w3id.org/neat/PosNegData",
      "description": "File paths for positive an negative edge data.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "posNegData__pos_edge_filepath",
        "posNegData__neg_edge_filepath"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "pos_edge_filepath",
          "description": "Positive edges file path.",
          "@type": "SlotDefinition"
        },
        {
          "name": "neg_edge_filepath",
          "description": "Negative edges file path.",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/PosNegData",
      "@type": "ClassDefinition"
    },
    {
      "name": "EmbeddingsConfig",
      "definition_uri": "https://w3id.org/neat/EmbeddingsConfig",
      "description": "Embeddings configuration.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "embeddingsConfig__filename",
        "embeddingsConfig__history_filename",
        "embeddingsConfig__node_embeddings_params",
        "embeddingsConfig__tsne_filename"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "filename",
          "description": "Embeddings file name.",
          "@type": "SlotDefinition"
        },
        {
          "name": "history_filename",
          "description": "Embeddings history file name.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_embeddings_params",
          "description": "Node embeddings parameters.",
          "range": "NodeEmbeddingsParams",
          "@type": "SlotDefinition"
        },
        {
          "name": "tsne_filename",
          "description": "File name for the TSNE plot.",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/EmbeddingsConfig",
      "@type": "ClassDefinition"
    },
    {
      "name": "NodeEmbeddingsParams",
      "definition_uri": "https://w3id.org/neat/NodeEmbeddingsParams",
      "description": "Node embeddings parameters.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "nodeEmbeddingsParams__method_name",
        "nodeEmbeddingsParams__walk_length",
        "nodeEmbeddingsParams__batch_size",
        "nodeEmbeddingsParams__window_size",
        "nodeEmbeddingsParams__return_weight",
        "nodeEmbeddingsParams__explore_weight",
        "nodeEmbeddingsParams__iterations"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "method_name",
          "description": "Name of the node embedding method.",
          "range": "node_embed_method_enum",
          "@type": "SlotDefinition"
        },
        {
          "name": "walk_length",
          "description": "Maximal length of the walks.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "batch_size",
          "description": "Number of nodes to include in a single batch.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "window_size",
          "description": "Size of the context and target nodes for node2vec.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "return_weight",
          "description": "Weight on the probability of returning to the same node the walk just came from Having this higher tends the walks to be more like a Breadth-First Search. Having this very high  (> 2) makes search very local. Equal to the inverse of p in the Node2Vec paper.",
          "range": "float",
          "@type": "SlotDefinition"
        },
        {
          "name": "explore_weight",
          "description": "Weight on the probability of visiting a neighbor node to the one we're coming from in the random walk Having this higher tends the walks to be more like a Depth-First Search. Having this very high makes search more outward. Having this very low makes search very local. Equal to the inverse of q in the Node2Vec paper.",
          "range": "float",
          "@type": "SlotDefinition"
        },
        {
          "name": "iterations",
          "description": "Number of iterations.",
          "range": "integer",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/NodeEmbeddingsParams",
      "@type": "ClassDefinition"
    },
    {
      "name": "ClassifierContainer",
      "definition_uri": "https://w3id.org/neat/ClassifierContainer",
      "description": "A container with multiple classifiers in it.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "classifierContainer__classifiers"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "classifiers",
          "description": "Classifier details.",
          "multivalued": true,
          "range": "Classifier",
          "inlined_as_list": true,
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/ClassifierContainer",
      "@type": "ClassDefinition"
    },
    {
      "name": "Classifier",
      "definition_uri": "https://w3id.org/neat/Classifier",
      "description": "ML classifiers to be trained-tested-validated and applied for predictions.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "classifier__classifier_id",
        "classifier__classifier_name",
        "classifier__classifier_type",
        "classifier__edge_method",
        "classifier__outfile",
        "classifier__history_filename",
        "classifier__parameters"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "classifier_id",
          "description": "Key to identify the classifier and associated parameters.",
          "@type": "SlotDefinition"
        },
        {
          "name": "classifier_name",
          "description": "Name of the classifier.",
          "@type": "SlotDefinition"
        },
        {
          "name": "classifier_type",
          "description": "Type of classifier.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_method",
          "description": "Edge method.",
          "range": "edge_method_enum",
          "@type": "SlotDefinition"
        },
        {
          "name": "outfile",
          "description": "Fie path for saving output.",
          "@type": "SlotDefinition"
        },
        {
          "name": "history_filename",
          "description": "File name for saving history.",
          "@type": "SlotDefinition"
        },
        {
          "name": "parameters",
          "description": "Parameters to be passed for building classifier.",
          "range": "ClassifierParams",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/Classifier",
      "@type": "ClassDefinition"
    },
    {
      "name": "ClassifierParams",
      "definition_uri": "https://w3id.org/neat/ClassifierParams",
      "description": "Parameters needed to define a classifier.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "classifierParams__sklearn_params",
        "classifierParams__tf_keras_params"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "sklearn_params",
          "description": "Parameters specific to sklearn.",
          "range": "SkLearnParams",
          "@type": "SlotDefinition"
        },
        {
          "name": "tf_keras_params",
          "description": "Parameters specific to Tensorflow/Keras",
          "range": "TFKerasParams",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/ClassifierParams",
      "@type": "ClassDefinition"
    },
    {
      "name": "SkLearnParams",
      "definition_uri": "https://w3id.org/neat/SkLearnParams",
      "description": "Parameters specific to the SKLearn library.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "skLearnParams__random_state",
        "skLearnParams__max_iter"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "random_state",
          "description": "Random seed.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "max_iter",
          "description": "Maximum iterations.",
          "range": "integer",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/SkLearnParams",
      "@type": "ClassDefinition"
    },
    {
      "name": "TFKerasParams",
      "definition_uri": "https://w3id.org/neat/TFKerasParams",
      "description": "Parameters specific to the Tensorflow Keras library.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "tFKerasParams__layers_config",
        "tFKerasParams__loss",
        "tFKerasParams__metrics_config",
        "tFKerasParams__optimizer",
        "tFKerasParams__fit_config"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "layers_config",
          "description": "Configuration for instantiating layers for neural networks.",
          "range": "LayerContainer",
          "@type": "SlotDefinition"
        },
        {
          "name": "loss",
          "description": "Loss function.",
          "@type": "SlotDefinition"
        },
        {
          "name": "metrics_config",
          "description": "Metrics to be calculated after classifier training.",
          "range": "MetricContainer",
          "@type": "SlotDefinition"
        },
        {
          "name": "optimizer",
          "description": "Optimizer function to be used during classifier training.",
          "range": "optimizer_enum",
          "@type": "SlotDefinition"
        },
        {
          "name": "fit_config",
          "description": "Configuration for model fitting.",
          "range": "ClassifierFitParams",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/TFKerasParams",
      "@type": "ClassDefinition"
    },
    {
      "name": "LayerContainer",
      "definition_uri": "https://w3id.org/neat/LayerContainer",
      "description": "A container of neural network layers.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "layerContainer__layers"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "layers",
          "description": "Container of layers to be used to build the neural network.",
          "multivalued": true,
          "range": "Layer",
          "inlined_as_list": true,
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/LayerContainer",
      "@type": "ClassDefinition"
    },
    {
      "name": "Layer",
      "definition_uri": "https://w3id.org/neat/Layer",
      "description": "Layers for a neural network.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "layer__type",
        "layer__parameters"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "type",
          "description": "Type of layer.",
          "@type": "SlotDefinition"
        },
        {
          "name": "parameters",
          "range": "LayerParams",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/Layer",
      "@type": "ClassDefinition"
    },
    {
      "name": "LayerParams",
      "definition_uri": "https://w3id.org/neat/LayerParams",
      "description": "Parameters for each layer of a neural network.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "layerParams__units",
        "layerParams__activation",
        "layerParams__rate"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "units",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "activation",
          "description": "Activation layer type",
          "range": "activation_enum",
          "@type": "SlotDefinition"
        },
        {
          "name": "rate",
          "range": "float",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/LayerParams",
      "@type": "ClassDefinition"
    },
    {
      "name": "MetricContainer",
      "definition_uri": "https://w3id.org/neat/MetricContainer",
      "description": "Container of metrics for a trained classifier.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "metricContainer__metrics"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "metrics",
          "description": "Metrics need to train a classifier.",
          "multivalued": true,
          "range": "Metric",
          "inlined_as_list": true,
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/MetricContainer",
      "@type": "ClassDefinition"
    },
    {
      "name": "Metric",
      "definition_uri": "https://w3id.org/neat/Metric",
      "description": "Metrics of a trained classifier (model).",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "metric__type",
        "metric__name",
        "metric__curve"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "type",
          "@type": "SlotDefinition"
        },
        {
          "name": "name",
          "@type": "SlotDefinition"
        },
        {
          "name": "curve",
          "description": "Area under curve (AUC) to be calculated.",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/Metric",
      "@type": "ClassDefinition"
    },
    {
      "name": "ClassifierFitParams",
      "definition_uri": "https://w3id.org/neat/ClassifierFitParams",
      "description": "Paramters for fitting a classifier.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "classifierFitParams__batch_size",
        "classifierFitParams__epochs",
        "classifierFitParams__callbacks_list"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "batch_size",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "epochs",
          "description": "Number of epochs to run for training.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "callbacks_list",
          "description": "Container of callbacks.",
          "range": "ClassifierCallbackContainer",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/ClassifierFitParams",
      "@type": "ClassDefinition"
    },
    {
      "name": "ClassifierCallbackContainer",
      "definition_uri": "https://w3id.org/neat/ClassifierCallbackContainer",
      "description": "A container of classifier callbacks.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "classifierCallbackContainer__callbacks"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "callbacks",
          "description": "Callbacks.",
          "multivalued": true,
          "range": "ClassifierCallback",
          "inlined_as_list": true,
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/ClassifierCallbackContainer",
      "@type": "ClassDefinition"
    },
    {
      "name": "ClassifierCallback",
      "definition_uri": "https://w3id.org/neat/ClassifierCallback",
      "description": "Utilities called at certain points during model training.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "classifierCallback__type",
        "classifierCallback__monitor",
        "classifierCallback__patience",
        "classifierCallback__min_delta",
        "classifierCallback__verbose",
        "classifierCallback__mode"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "type",
          "description": "Type of callback.",
          "@type": "SlotDefinition"
        },
        {
          "name": "monitor",
          "description": "Quantity to be monitored.",
          "@type": "SlotDefinition"
        },
        {
          "name": "patience",
          "description": "Number of epochs with no improvement after which training will be stopped.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "min_delta",
          "description": "Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "verbose",
          "description": "Verbosity mode, 0 or 1. Mode 0 is silent, and mode 1 displays messages when the callback takes an action.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "mode",
          "description": "One of {\"auto\", \"min\", \"max\"}. In min mode, training will stop when the quantity monitored has stopped decreasing; in \"max\" mode it will stop when the quantity monitored has stopped increasing; in \"auto\" mode, the direction is automatically inferred from the name of the monitored quantity.",
          "range": "classifier_callback_mode_enum",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/ClassifierCallback",
      "@type": "ClassDefinition"
    },
    {
      "name": "ApplyTrainedModelsContainer",
      "definition_uri": "https://w3id.org/neat/ApplyTrainedModelsContainer",
      "description": "A container with multiple classifiers in it.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "applyTrainedModelsContainer__models"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "models",
          "description": "Models that need to be used for link prediction.",
          "multivalued": true,
          "range": "ApplyTrainedModel",
          "inlined_as_list": true,
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/ApplyTrainedModelsContainer",
      "@type": "ClassDefinition"
    },
    {
      "name": "ApplyTrainedModel",
      "definition_uri": "https://w3id.org/neat/ApplyTrainedModel",
      "description": "Trained model used for prediction.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "applyTrainedModel__model_id",
        "applyTrainedModel__node_types",
        "applyTrainedModel__cutoff",
        "applyTrainedModel__outfile"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "model_id",
          "description": "Key of the model to be used.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_types",
          "description": "Type of nodes.",
          "range": "NodeType",
          "@type": "SlotDefinition"
        },
        {
          "name": "cutoff",
          "description": "Cutoff filter.",
          "@type": "SlotDefinition"
        },
        {
          "name": "outfile",
          "description": "File path for saving results.",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/ApplyTrainedModel",
      "@type": "ClassDefinition"
    },
    {
      "name": "NodeType",
      "definition_uri": "https://w3id.org/neat/NodeType",
      "description": "Source node or Destination node.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "nodeType__source",
        "nodeType__destination"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "source",
          "description": "Source node(s).",
          "multivalued": true,
          "inlined_as_list": true,
          "@type": "SlotDefinition"
        },
        {
          "name": "destination",
          "description": "Destination node(s).",
          "multivalued": true,
          "inlined_as_list": true,
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/NodeType",
      "@type": "ClassDefinition"
    },
    {
      "name": "Upload",
      "definition_uri": "https://w3id.org/neat/Upload",
      "description": "Configuration for uploading to Amazon S3 bucket.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "upload__s3_bucket",
        "upload__s3_bucket_dir",
        "upload__extra_args"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "s3_bucket",
          "description": "Bucket name.",
          "@type": "SlotDefinition"
        },
        {
          "name": "s3_bucket_dir",
          "description": "Bucket path.",
          "@type": "SlotDefinition"
        },
        {
          "name": "extra_args",
          "description": "Extra keyword arguments (**kwargs).",
          "multivalued": true,
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/Upload",
      "@type": "ClassDefinition"
    },
    {
      "name": "Target",
      "definition_uri": "https://w3id.org/neat/Target",
      "description": "Path for output to be saved.",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "target__target_path"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "target_path",
          "description": "File path for saving results.",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/Target",
      "@type": "ClassDefinition"
    },
    {
      "name": "EnsmallenRunConfig",
      "definition_uri": "https://w3id.org/neat/EnsmallenRunConfig",
      "description": "All params used by ensmallen's csv_reader",
      "from_schema": "https://w3id.org/neat",
      "slots": [
        "ensmallenRunConfig__node_type_path",
        "ensmallenRunConfig__node_type_list_separator",
        "ensmallenRunConfig__node_types_column_number",
        "ensmallenRunConfig__node_types_column",
        "ensmallenRunConfig__node_types_ids_column_number",
        "ensmallenRunConfig__node_types_ids_column",
        "ensmallenRunConfig__node_types_number",
        "ensmallenRunConfig__numeric_node_type_ids",
        "ensmallenRunConfig__minimum_node_type_id",
        "ensmallenRunConfig__node_type_list_header",
        "ensmallenRunConfig__node_type_list_support_balanced_quotes",
        "ensmallenRunConfig__node_type_list_rows_to_skip",
        "ensmallenRunConfig__node_type_list_is_correct",
        "ensmallenRunConfig__node_type_list_max_rows_number",
        "ensmallenRunConfig__node_type_list_comment_symbol",
        "ensmallenRunConfig__load_node_type_list_in_parallel",
        "ensmallenRunConfig__node_path",
        "ensmallenRunConfig__node_list_separator",
        "ensmallenRunConfig__node_list_header",
        "ensmallenRunConfig__node_list_support_balanced_quotes",
        "ensmallenRunConfig__node_list_rows_to_skip",
        "ensmallenRunConfig__node_list_is_correct",
        "ensmallenRunConfig__node_list_max_rows_number",
        "ensmallenRunConfig__node_list_comment_symbol",
        "ensmallenRunConfig__default_node_type",
        "ensmallenRunConfig__nodes_column_number",
        "ensmallenRunConfig__nodes_column",
        "ensmallenRunConfig__node_types_separator",
        "ensmallenRunConfig__node_list_node_types_column_number",
        "ensmallenRunConfig__node_list_node_types_column",
        "ensmallenRunConfig__node_ids_column",
        "ensmallenRunConfig__node_ids_column_number",
        "ensmallenRunConfig__nodes_number",
        "ensmallenRunConfig__minimum_node_id",
        "ensmallenRunConfig__numeric_node_ids",
        "ensmallenRunConfig__node_list_numeric_node_type_ids",
        "ensmallenRunConfig__skip_node_types_if_unavailable",
        "ensmallenRunConfig__load_node_list_in_parallel",
        "ensmallenRunConfig__edge_type_path",
        "ensmallenRunConfig__edge_types_column_number",
        "ensmallenRunConfig__edge_types_column",
        "ensmallenRunConfig__edge_types_number",
        "ensmallenRunConfig__numeric_edge_type_ids",
        "ensmallenRunConfig__minimum_edge_type_id",
        "ensmallenRunConfig__edge_type_list_separator",
        "ensmallenRunConfig__edge_type_list_header",
        "ensmallenRunConfig__edge_type_list_support_balanced_quotes",
        "ensmallenRunConfig__edge_type_list_rows_to_skip",
        "ensmallenRunConfig__edge_type_list_is_correct",
        "ensmallenRunConfig__edge_type_list_max_rows_number",
        "ensmallenRunConfig__edge_type_list_comment_symbol",
        "ensmallenRunConfig__load_edge_type_list_in_parallel",
        "ensmallenRunConfig__edge_path",
        "ensmallenRunConfig__edge_list_separator",
        "ensmallenRunConfig__edge_list_header",
        "ensmallenRunConfig__edge_list_support_balanced_quotes",
        "ensmallenRunConfig__edge_list_rows_to_skip",
        "ensmallenRunConfig__sources_column_number",
        "ensmallenRunConfig__sources_column",
        "ensmallenRunConfig__destinations_column_number",
        "ensmallenRunConfig__destinations_column",
        "ensmallenRunConfig__edge_list_edge_types_column_number",
        "ensmallenRunConfig__edge_list_edge_types_column",
        "ensmallenRunConfig__default_edge_type",
        "ensmallenRunConfig__weights_column_number",
        "ensmallenRunConfig__weights_column",
        "ensmallenRunConfig__default_weight",
        "ensmallenRunConfig__edge_ids_column",
        "ensmallenRunConfig__edge_ids_column_number",
        "ensmallenRunConfig__edge_list_numeric_edge_type_ids",
        "ensmallenRunConfig__edge_list_numeric_node_ids",
        "ensmallenRunConfig__skip_weights_if_unavailable",
        "ensmallenRunConfig__skip_edge_types_if_unavailable",
        "ensmallenRunConfig__edge_list_is_complete",
        "ensmallenRunConfig__edge_list_may_contain_duplicates",
        "ensmallenRunConfig__edge_list_is_sorted",
        "ensmallenRunConfig__edge_list_is_correct",
        "ensmallenRunConfig__edge_list_max_rows_number",
        "ensmallenRunConfig__edge_list_comment_symbol",
        "ensmallenRunConfig__edges_number",
        "ensmallenRunConfig__load_edge_list_in_parallel",
        "ensmallenRunConfig__verbose",
        "ensmallenRunConfig__may_have_singletons",
        "ensmallenRunConfig__may_have_singleton_with_selfloops",
        "ensmallenRunConfig__directed",
        "ensmallenRunConfig__name"
      ],
      "slot_usage": {},
      "attributes": [
        {
          "name": "node_type_path",
          "description": "The path to the file with the unique node type names.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_type_list_separator",
          "description": "The separator to use for the node types file.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_types_column_number",
          "description": "Node type column number.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_types_column",
          "description": "Node type column name.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_types_ids_column_number",
          "description": "Node type ID column number.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_types_ids_column",
          "description": "Node type ID column name.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_types_number",
          "description": "The number of the unique node types. This will be used in order to allocate the correct size for the data structure.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "numeric_node_type_ids",
          "description": "Whether the node type names should be loaded as numeric values, i.e. casted from string to a numeric representation.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "minimum_node_type_id",
          "description": "The minimum node type ID to be used when using numeric node type IDs.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_type_list_header",
          "description": "Whether the node type file has an header.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_type_list_support_balanced_quotes",
          "description": "Whether to support balanced quotes.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_type_list_rows_to_skip",
          "description": "The number of lines to skip in the node types file. The header is already skipped if it has been specified that the file has an header.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_type_list_is_correct",
          "description": "Whether the node types file can be assumed to be correct, i.e. does not have something wrong in it. If this parameter is passed as true on a malformed file, the constructor will crash.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_type_list_max_rows_number",
          "description": "The maximum number of lines to be loaded from the node types file.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_type_list_comment_symbol",
          "description": "The comment symbol to skip lines in the node types file. Lines starting with this symbol will be skipped.",
          "@type": "SlotDefinition"
        },
        {
          "name": "load_node_type_list_in_parallel",
          "description": "Whether to load the node type list in parallel. Note that when loading in parallel, the internal order of the node type IDs may result changed across different iterations. We are working to get this to be stable.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_path",
          "description": "The path to the file with the unique node names.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_separator",
          "description": "The separator to use for the nodes file. Note that if this is not provided, one will be automatically detected among the following - comma, semi-column, tab and space.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_header",
          "description": "Whether the nodes file has an header.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_support_balanced_quotes",
          "description": "Whether to support balanced quotes.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_rows_to_skip",
          "description": "Number of rows to skip in the node list file.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_is_correct",
          "description": "Whether the nodes file can be assumed to be correct, i.e. does not have something wrong in it. If this parameter is passed as true on a malformed file, the constructor will crash.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_max_rows_number",
          "description": "The maximum number of lines to be loaded from the nodes file.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_comment_symbol",
          "description": "The comment symbol to skip lines in the nodes file. Lines starting with this symbol will be skipped.",
          "@type": "SlotDefinition"
        },
        {
          "name": "default_node_type",
          "description": "The node type to be used when the node type for a given node in the node file is None.",
          "@type": "SlotDefinition"
        },
        {
          "name": "nodes_column_number",
          "description": "The number of the column of the node file from where to load the node names.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "nodes_column",
          "description": "The name of the column of the node file from where to load the node names.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_types_separator",
          "description": "The node types separator.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_node_types_column_number",
          "description": "The number of the column of the node file from where to load the node types.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_node_types_column",
          "description": "The name of the column of the node file from where to load the node types.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_ids_column",
          "description": "The name of the column of the node file from where to load the node IDs.",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_ids_column_number",
          "description": "The number of the column of the node file from where to load the node IDs",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "nodes_number",
          "description": "The expected number of nodes. Note that this must be the EXACT number of nodes in the graph.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "minimum_node_id",
          "description": "The minimum node ID to be used, when loading the node IDs as numerical.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "numeric_node_ids",
          "description": "Whether to load the numeric node IDs as numeric.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "node_list_numeric_node_type_ids",
          "description": "Whether to load the node types IDs in the node file to be numeric.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "skip_node_types_if_unavailable",
          "description": "Whether to skip the node types without raising an error if these are unavailable.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "load_node_list_in_parallel",
          "description": "Whether to load the node list in parallel. When loading in parallel, without node IDs, the nodes may not be loaded in a deterministic order.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_type_path",
          "description": "The path to the file with the unique edge type names.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_types_column_number",
          "description": "The number of the column of the edge types file from where to load the edge types.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_types_column",
          "description": "The name of the column of the edge types file from where to load the edge types.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_types_number",
          "description": "The number of the unique edge types. This will be used in order to allocate the correct size for the data structure.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "numeric_edge_type_ids",
          "description": "Whether the edge type names should be loaded as numeric values, i.e. casted from string to a numeric representation.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "minimum_edge_type_id",
          "description": "The minimum edge type ID to be used when using numeric edge type IDs.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_type_list_separator",
          "description": "The separator to use for the edge type list. Note that, if None is provided, one will be attempted to be detected automatically between ';', ',', tab or space.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_type_list_header",
          "description": "Whether the edge type file has an header.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_type_list_support_balanced_quotes",
          "description": "Whether to support balanced quotes while reading the edge type list.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_type_list_rows_to_skip",
          "description": "Number of rows to skip in the edge type list file.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_type_list_is_correct",
          "description": "Whether the edge types file can be assumed to be correct, i.e. does not have something wrong in it. If this parameter is passed as true on a malformed file, the constructor will crash.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_type_list_max_rows_number",
          "description": "The maximum number of lines to be loaded from the edge types file.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_type_list_comment_symbol",
          "description": "The comment symbol to skip lines in the edge types file. Lines starting with this symbol will be skipped.",
          "@type": "SlotDefinition"
        },
        {
          "name": "load_edge_type_list_in_parallel",
          "description": "Whether to load the edge type list in parallel. When loading in parallel, without edge type IDs, the edge types may not be loaded in a deterministic order.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_path",
          "description": "The path to the file with the edge list.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_separator",
          "description": "The separator to use for the edge list. Note that, if None is provided, one will be attempted to be detected automatically between ';', ',', tab or space.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_header",
          "description": "Whether the edges file has an header.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_support_balanced_quotes",
          "description": "Whether to support balanced quotes while reading the edge list.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_rows_to_skip",
          "description": "Number of rows to skip in the edge list file.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "sources_column_number",
          "description": "The number of the column of the edges file from where to load the source nodes.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "sources_column",
          "description": "The name of the column of the edges file from where to load the source nodes.",
          "@type": "SlotDefinition"
        },
        {
          "name": "destinations_column_number",
          "description": "The number of the column of the edges file from where to load the destinaton nodes.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "destinations_column",
          "description": "The name of the column of the edges file from where to load the destinaton nodes.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_edge_types_column_number",
          "description": "The number of the column of the edges file from where to load the edge types.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_edge_types_column",
          "description": "The name of the column of the edges file from where to load the edge types.",
          "@type": "SlotDefinition"
        },
        {
          "name": "default_edge_type",
          "description": "The edge type to be used when the edge type for a given edge in the edge file is None.",
          "@type": "SlotDefinition"
        },
        {
          "name": "weights_column_number",
          "description": "The number of the column of the edges file from where to load the edge weights.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "weights_column",
          "description": "The name of the column of the edges file from where to load the edge weights.",
          "@type": "SlotDefinition"
        },
        {
          "name": "default_weight",
          "description": "The edge weight to be used when the edge weight for a given edge in the edge file is None.",
          "range": "float",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_ids_column",
          "description": "The name of the column of the edges file from where to load the edge IDs.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_ids_column_number",
          "description": "The number of the column of the edges file from where to load the edge IDs.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_numeric_edge_type_ids",
          "description": "Whether to load the edge type IDs as numeric from the edge list.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_numeric_node_ids",
          "description": "Whether to load the edge node IDs as numeric from the edge list.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "skip_weights_if_unavailable",
          "description": "Whether to skip the weights without raising an error if these are unavailable.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "skip_edge_types_if_unavailable",
          "description": "Whether to skip the edge types without raising an error if these are unavailable.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_is_complete",
          "description": "Whether to consider the edge list as complete, i.e. the edges are presented in both directions when loading an undirected graph.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_may_contain_duplicates",
          "description": "Whether the edge list may contain duplicates. If the edge list surely DOES NOT contain duplicates, a validation step may be skipped. By default, it is assumed that the edge list may contain duplicates.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_is_sorted",
          "description": "Whether the edge list is sorted. Note that a sorted edge list has the minimal memory peak, but requires the nodes number and the edges number.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_is_correct",
          "description": "Whether the edges file can be assumed to be correct, i.e. does not have something wrong in it. If this parameter is passed as true on a malformed file, the constructor will crash.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_max_rows_number",
          "description": "The maximum number of lines to be loaded from the edges file.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "edge_list_comment_symbol",
          "description": "The comment symbol to skip lines in the edges file. Lines starting with this symbol will be skipped.",
          "@type": "SlotDefinition"
        },
        {
          "name": "edges_number",
          "description": "The expected number of edges. Note that this must be the EXACT number of edges in the graph.",
          "range": "integer",
          "@type": "SlotDefinition"
        },
        {
          "name": "load_edge_list_in_parallel",
          "description": "Whether to load the edge list in parallel. Note that, if the edge IDs indices are not given, it is NOT possible to load a sorted edge list. Similarly, when loading in parallel, without edge IDs, the edges may not be loaded in a deterministic order.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "verbose",
          "description": "Whether to show a loading bar while reading the files. Note that, if parallel loading is enabled, loading bars will not be showed because they are a synchronization bottleneck.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "may_have_singletons",
          "description": "Whether the graph may be expected to have singleton nodes. If it is said that it surely DOES NOT have any, it will allow for some speedups and lower mempry peaks.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "may_have_singleton_with_selfloops",
          "description": "Whether the graph may be expected to have singleton nodes with selfloops. If it is said that it surely DOES NOT have any, it will allow for some speedups and lower mempry peaks.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "directed",
          "description": "Whether to load the graph as directed or undirected.",
          "range": "boolean",
          "@type": "SlotDefinition"
        },
        {
          "name": "name",
          "@type": "SlotDefinition"
        }
      ],
      "class_uri": "https://w3id.org/neat/EnsmallenRunConfig",
      "@type": "ClassDefinition"
    }
  ],
  "metamodel_version": "1.7.0",
  "source_file": "neat_ml_schema.yaml",
  "source_file_date": "2022-06-16T12:05:28",
  "source_file_size": 28962,
  "generation_date": "2022-06-16T12:10:09",
  "@type": "SchemaDefinition",
  "@context": [
    "neat_ml_schema/project/jsonld/neat_ml_schema.context.jsonld",
    "https://w3id.org/linkml/types.context.jsonld",
    {
      "@base": "https://w3id.org/neat/"
    }
  ]
}
