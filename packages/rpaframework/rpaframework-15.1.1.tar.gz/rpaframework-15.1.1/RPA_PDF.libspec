<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.PDF" type="LIBRARY" format="REST" scope="GLOBAL" generated="2022-06-17T10:16:50Z" specversion="4" source="./RPA/PDF/__init__.py" lineno="11">
<version/>
<doc>`PDF` is a library for managing PDF documents.

It can be used to extract text from PDFs,
add watermarks to pages, and decrypt/encrypt documents.

There is also limited support for updating form field values.

Input PDF file can be passed as an argument to the keywords,
or it can be omitted if you first call `Open PDF`. Reference
to the current active PDF will be stored in the library instance and can be
changed by using `Switch To PDF` with another PDF file path, therefore you can
asynchronously work with multiple PDFs.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.PDF
    Library    String

    *** Tasks ***
    Extract Data From First Page
        ${text} =    Get Text From PDF    report.pdf
        ${lines} =     Get Lines Matching Regexp    ${text}[${1}]    .+pain.+
        Log    ${lines}

    Get Invoice Number
        Open Pdf    invoice.pdf
        ${matches} =  Find Text    Invoice Number
        Log List      ${matches}

    Fill Form Fields
        Switch To Pdf    form.pdf
        ${fields} =     Get Input Fields   encoding=utf-16
        Log Dictionary    ${fields}
        Set Field Value    Given Name Text Box    Mark
        Save Field Values    output_path=${OUTPUT_DIR}${/}completed-form.pdf
        ...                  use_appearances_writer=${True}

.. code-block:: python

    from RPA.PDF import PDF
    from robot.libraries.String import String

    pdf = PDF()
    string = String()

    def extract_data_from_first_page():
        text = pdf.get_text_from_pdf("report.pdf")
        lines = string.get_lines_matching_regexp(text[1], ".+pain.+")
        print(lines)

    def get_invoice_number():
        pdf.open_pdf("invoice.pdf")
        matches = pdf.find_text("Invoice Number")
        for match in matches:
            print(match)

    def fill_form_fields():
        pdf.switch_to_pdf("form.pdf")
        fields = pdf.get_input_fields(encoding="utf-16")
        for key, value in fields.items():
            print(f"{key}: {value}")
        pdf.set_field_value("Given Name Text Box", "Mark")
        pdf.save_field_values(
            output_path="completed-form.pdf",
            use_appearances_writer=True
        )</doc>
<tags>
</tags>
<inits>
</inits>
<keywords>
<kw name="Add Files To Pdf" source="./RPA/PDF/keywords/document.py" lineno="1050">
<arguments repr="files: list | None = None, target_document: str | None = None, append: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="files: list | None = None">
<name>files</name>
<type typedoc="list">list</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="target_document: str | None = None">
<name>target_document</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="append: bool = False">
<name>append</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Add images and/or pdfs to new PDF document

Image formats supported are JPEG, PNG and GIF.

The file can be added with extra properties by
denoting `:` at the end of the filename. Each
property should be separated by comma.

Supported extra properties for PDFs are:

- page and/or page ranges
- no extras means that all source PDF pages are added
  into new PDF

Supported extra properties for images are:

- format, the PDF page format, for example. Letter or A4
- rotate, how many degrees image is rotated counter-clockwise
- align, only possible value at the moment is center
- orientation, the PDF page orientation for the image, possible
  values P (portrait) or L (landscape)
- x/y, coordinates for adjusting image position on the page

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Add files to pdf
        ${files}=    Create List
        ...    ${TESTDATA_DIR}${/}invoice.pdf
        ...    ${TESTDATA_DIR}${/}approved.png:align=center
        ...    ${TESTDATA_DIR}${/}robot.pdf:1
        ...    ${TESTDATA_DIR}${/}approved.png:x=0,y=0
        ...    ${TESTDATA_DIR}${/}robot.pdf:2-10,15
        ...    ${TESTDATA_DIR}${/}approved.png
        ...    ${TESTDATA_DIR}${/}landscape_image.png:rotate=-90,orientation=L
        ...    ${TESTDATA_DIR}${/}landscape_image.png:format=Letter
        Add Files To PDF    ${files}    newdoc.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    list_of_files = [
        'invoice.pdf',
        'approved.png:align=center',
        'robot.pdf:1',
        'approved.png:x=0,y=0',
    ]
    def example_keyword():
        pdf.add_files_to_pdf(
            files=list_of_files,
            target_document="output/output.pdf"
        )

:param files: list of filepaths to add into PDF (can be either images or PDFs)
:param target_document: filepath of target PDF
:param append: appends files to existing document if `append` is `True`</doc>
<shortdoc>Add images and/or pdfs to new PDF document</shortdoc>
</kw>
<kw name="Add Watermark Image To Pdf" source="./RPA/PDF/keywords/document.py" lineno="822">
<arguments repr="image_path: str | Path, output_path: str | Path, source_path: str | Path | None = None, coverage: float = 0.2">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="image_path: str | Path">
<name>image_path</name>
<type typedoc="string">str</type>
<type>Path</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="output_path: str | Path">
<name>output_path</name>
<type typedoc="string">str</type>
<type>Path</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | Path | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type>Path</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="coverage: float = 0.2">
<name>coverage</name>
<type typedoc="float">float</type>
<default>0.2</default>
</arg>
</arguments>
<doc>Add an image into an existing or new PDF.

If no source path is given, assume a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        Add Watermark Image To PDF
        ...             image_path=approved.png
        ...             source_path=/tmp/sample.pdf
        ...             output_path=output/output.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pdf.add_watermark_image_to_pdf(
            image_path="approved.png"
            source_path="/tmp/sample.pdf"
            output_path="output/output.pdf"
        )

:param image_path: filepath to image file to add into PDF
:param source: filepath to source, if not given add image to currently
    active PDF
:param output_path: filepath of target PDF
:param coverage: how the watermark image should be scaled on page,
 defaults to 0.2</doc>
<shortdoc>Add an image into an existing or new PDF.</shortdoc>
</kw>
<kw name="Close All Pdfs" source="./RPA/PDF/keywords/document.py" lineno="87">
<arguments repr="">
</arguments>
<doc>Close all opened PDF file descriptors.</doc>
<shortdoc>Close all opened PDF file descriptors.</shortdoc>
</kw>
<kw name="Close Pdf" source="./RPA/PDF/keywords/document.py" lineno="94">
<arguments repr="source_pdf: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_pdf: str | None = None">
<name>source_pdf</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Close PDF file descriptor for a certain file.

:param source_pdf: filepath to the source pdf.
:raises ValueError: if file descriptor for the file is not found.</doc>
<shortdoc>Close PDF file descriptor for a certain file.</shortdoc>
</kw>
<kw name="Convert" source="./RPA/PDF/keywords/model.py" lineno="407">
<arguments repr="source_path: str | None = None, trim: bool = True, pagenum: int | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="trim: bool = True">
<name>trim</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="pagenum: int | str | None = None">
<name>pagenum</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Parse source PDF into entities.

These entities can be used for text searches or XML dumping for example. The
conversion will be done automatically when using the dependent keywords
directly.

:param source_path: source PDF filepath
:param trim: trim whitespace from the text is set to True (default)
:param pagenum: Page number where search is performed on, defaults to `None`. (
    meaning all pages get converted)

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        Convert    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pdf.convert("/tmp/sample.pdf")</doc>
<shortdoc>Parse source PDF into entities.</shortdoc>
</kw>
<kw name="Decrypt Pdf" source="./RPA/PDF/keywords/document.py" lineno="720">
<arguments repr="source_path: str, output_path: str, password: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="source_path: str">
<name>source_path</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="output_path: str">
<name>output_path</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="password: str">
<name>password</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Decrypt PDF with password.

If no source path given, assumes a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        ${success}=  Decrypt PDF    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        success = pdf.decrypt_pdf("/tmp/sample.pdf")

:param source_path: filepath to the source pdf.
:param output_path: filepath to the decrypted pdf.
:param password: password as a string.
:return: True if decrypt was successful, else False or Exception.
:raises ValueError: on decryption errors.</doc>
<shortdoc>Decrypt PDF with password.</shortdoc>
</kw>
<kw name="Dump Pdf As Xml" source="./RPA/PDF/keywords/model.py" lineno="793">
<arguments repr="source_path: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Get PDFMiner format XML dump of the PDF

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        ${xml}=  Dump PDF as XML    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        xml = pdf.dump_pdf_as_xml("/tmp/sample.pdf")

:param source_path: filepath to the source PDF
:return: XML content as a string</doc>
<shortdoc>Get PDFMiner format XML dump of the PDF</shortdoc>
</kw>
<kw name="Encrypt Pdf" source="./RPA/PDF/keywords/document.py" lineno="660">
<arguments repr="source_path: str | None = None, output_path: str | None = None, user_pwd: str = , owner_pwd: str | None = None, use_128bit: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="output_path: str | None = None">
<name>output_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user_pwd: str = ">
<name>user_pwd</name>
<type typedoc="string">str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="owner_pwd: str | None = None">
<name>owner_pwd</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_128bit: bool = True">
<name>use_128bit</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Encrypt a PDF document.

If no source path given, assumes a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        Encrypt PDF    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pdf.encrypt_pdf("/tmp/sample.pdf")

:param source_path: filepath to the source pdf.
:param output_path: filepath to the target pdf, stored by default
    in the robot output directory as ``output.pdf``
:param user_pwd: allows opening and reading PDF with restrictions.
:param owner_pwd: allows opening PDF without any restrictions, by
    default same `user_pwd`.
:param use_128bit: whether to 128bit encryption, when false 40bit
    encryption is used, default True.</doc>
<shortdoc>Encrypt a PDF document.</shortdoc>
</kw>
<kw name="Extract Pages From Pdf" source="./RPA/PDF/keywords/document.py" lineno="526">
<arguments repr="source_path: str | None = None, output_path: str | None = None, pages: List[int] | List[str] | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="output_path: str | None = None">
<name>output_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="pages: List[int] | List[str] | str | None = None">
<name>pages</name>
<type typedoc="list">List[int]</type>
<type typedoc="list">List[str]</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Extract pages from source PDF and save to a new PDF document.

Page numbers start from 1.

If no source path given, assumes a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        ${pages}=    Extract Pages From PDF
        ...          source_path=/tmp/sample.pdf
        ...          output_path=/tmp/output.pdf
        ...          pages=5

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pages = pdf.extract_pages_from_pdf(
            source_path="/tmp/sample.pdf",
            output_path="/tmp/output.pdf",
            pages=5
        )

:param source_path: filepath to the source pdf.
:param output_path: filepath to the target pdf, stored by default
    in the robot output directory as ``output.pdf``
:param pages: page numbers to extract from PDF (numbers start from 0)
    if None then extracts all pages.</doc>
<shortdoc>Extract pages from source PDF and save to a new PDF document.</shortdoc>
</kw>
<kw name="Find Text" source="./RPA/PDF/keywords/finder.py" lineno="89">
<arguments repr="locator: str, pagenum: int | str = 1, direction: str = right, closest_neighbours: int | str | None = 1, strict: bool = False, regexp: str | None = None, trim: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="pagenum: int | str = 1">
<name>pagenum</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="direction: str = right">
<name>direction</name>
<type typedoc="string">str</type>
<default>right</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="closest_neighbours: int | str | None = 1">
<name>closest_neighbours</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="strict: bool = False">
<name>strict</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="regexp: str | None = None">
<name>regexp</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="trim: bool = True">
<name>trim</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Find the closest text elements near the set anchor(s) through `locator`.

The PDF will be parsed automatically before elements can be searched.

:param locator: Element to set anchor to. This can be prefixed with either
    `text:`, `regex:` or `coords:` to find the anchor by text or coordinates.
    `text` is assumed if no such prefix is specified. (text search is case
    insensitive)
:param pagenum: Page number where search is performed on, defaults to 1 (first
    page).
:param direction: In which direction to search for text elements. This can be
    any of 'top'/'up', 'bottom'/'down', 'left' or 'right'. (defaults to
    'right')
:param closest_neighbours: How many neighbours to return at most, sorted by the
    distance from the current anchor.
:param strict: If element's margins should be used for matching those which are
    aligned to the anchor. (turned off by default)
:param regexp: Expected format of the searched text value. By default all the
    candidates in range are considered valid neighbours.
:param trim: Automatically trim leading/trailing whitespace from the text
    elements. (switched on by default)
:returns: A list of `Match` objects where every match has the following
    attributes: `.anchor` - the matched text with the locator; `.neighbours` -
    a list of adjacent texts found on the specified direction

**Examples**

**Robot Framework**

.. code-block:: robotframework

    PDF Invoice Parsing
        Open Pdf    invoice.pdf
        ${matches} =  Find Text    Invoice Number
        Log List      ${matches}

.. code-block::

    List has one item:
    Match(anchor='Invoice Number', direction='right', neighbours=['INV-3337'])

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def pdf_invoice_parsing():
        pdf.open_pdf("invoice.pdf")
        matches = pdf.find_text("Invoice Number")
        for match in matches:
            print(match)

    pdf_invoice_parsing()

.. code-block::

    Match(anchor='Invoice Number', direction='right', neighbours=['INV-3337'])</doc>
<shortdoc>Find the closest text elements near the set anchor(s) through `locator`.</shortdoc>
</kw>
<kw name="Get All Figures" source="./RPA/PDF/keywords/document.py" lineno="782">
<arguments repr="source_path: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return all figures in the PDF document.

If no source path given, assumes a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        ${figures}=  Get All Figures    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        figures = pdf.get_all_figures("/tmp/sample.pdf")

:param source_path: filepath to the source pdf.
:return: dictionary of figures divided into pages.</doc>
<shortdoc>Return all figures in the PDF document.</shortdoc>
</kw>
<kw name="Get Input Fields" source="./RPA/PDF/keywords/model.py" lineno="509">
<arguments repr="source_path: str | None = None, replace_none_value: bool = False, encoding: str = iso-8859-1">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="replace_none_value: bool = False">
<name>replace_none_value</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="encoding: str = iso-8859-1">
<name>encoding</name>
<type typedoc="string">str</type>
<default>iso-8859-1</default>
</arg>
</arguments>
<doc>Get input fields in the PDF.

Stores input fields internally so that they can be used without parsing the PDF
again.

:param source_path: Filepath to source, if not given use the currently active
    PDF.
:param replace_none_value: Enable this to conveniently visualize the fields. (
    replaces the null value with field's name)
:param encoding: Use an explicit encoding for field name/value parsing. (
    defaults to "iso-8859-1" but "utf-8/16" might be the one working for you)
:returns: A dictionary with all the found fields. Use their key names when
    setting values into them.
:raises KeyError: If no input fields are enabled in the PDF.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    Example Keyword
        ${fields} =     Get Input Fields    form.pdf
        Log Dictionary    ${fields}

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        fields = pdf.get_input_fields("form.pdf")
        print(fields)

    example_keyword()</doc>
<shortdoc>Get input fields in the PDF.</shortdoc>
</kw>
<kw name="Get Number Of Pages" source="./RPA/PDF/keywords/document.py" lineno="375">
<arguments repr="source_path: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Get number of pages in the document.

If no source path given, assumes a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        ${page_count}=    Get Number Of Pages    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        page_count = pdf.get_number_of_pages("/tmp/sample.pdf")

:param source_path: filepath to the source pdf
:raises PdfReadError: if file is encrypted or other restrictions are in place</doc>
<shortdoc>Get number of pages in the document.</shortdoc>
</kw>
<kw name="Get Pdf Info" source="./RPA/PDF/keywords/document.py" lineno="278">
<arguments repr="source_path: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Get metadata from a PDF document.

If no source path given, assumes a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        ${metadata}=    Get PDF Info    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        metadata = pdf.get_pdf_info("/tmp/sample.pdf")

:param source_path: filepath to the source PDF.
:return: dictionary of PDF information.</doc>
<shortdoc>Get metadata from a PDF document.</shortdoc>
</kw>
<kw name="Get Text From Pdf" source="./RPA/PDF/keywords/document.py" lineno="465">
<arguments repr="source_path: str | None = None, pages: List[int] | List[str] | str | None = None, details: bool = False, trim: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="pages: List[int] | List[str] | str | None = None">
<name>pages</name>
<type typedoc="list">List[int]</type>
<type typedoc="list">List[str]</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="details: bool = False">
<name>details</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="trim: bool = True">
<name>trim</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Get text from set of pages in source PDF document.

If no source path given, assumes a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        ${text}=    Get Text From PDF    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        text = pdf.get_text_from_pdf("/tmp/sample.pdf")


:param source_path: filepath to the source pdf.
:param pages: page numbers to get text (numbers start from 0).
:param details: set to `True` to return textboxes, default `False`.
:param trim: set to `False` to return raw texts, default `True`
    means whitespace is trimmed from the text
:return: dictionary of pages and their texts.</doc>
<shortdoc>Get text from set of pages in source PDF document.</shortdoc>
</kw>
<kw name="Html To Pdf" source="./RPA/PDF/keywords/document.py" lineno="229">
<arguments repr="content: str, output_path: str, encoding: str = utf-8">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="content: str">
<name>content</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="output_path: str">
<name>output_path</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="encoding: str = utf-8">
<name>encoding</name>
<type typedoc="string">str</type>
<default>utf-8</default>
</arg>
</arguments>
<doc>Generate a PDF file from HTML content.

Note that input must be well-formed and valid HTML.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        HTML to PDF    ${html_content_as_string}  /tmp/output.pdf

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pdf.html_to_pdf(html_content_as_string, "/tmp/output.pdf")

:param content: HTML content.
:param output_path: Filepath where to save the PDF document.
:param encoding: Codec used for text I/O.</doc>
<shortdoc>Generate a PDF file from HTML content.</shortdoc>
</kw>
<kw name="Is Pdf Encrypted" source="./RPA/PDF/keywords/document.py" lineno="338">
<arguments repr="source_path: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Check if PDF is encrypted.

If no source path given, assumes a PDF is already opened.

:param source_path: filepath to the source pdf.
:return: True if file is encrypted.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        ${is_encrypted}=    Is PDF Encrypted    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        is_encrypted = pdf.is_pdf_encrypted("/tmp/sample.pdf")</doc>
<shortdoc>Check if PDF is encrypted.</shortdoc>
</kw>
<kw name="Open Pdf" source="./RPA/PDF/keywords/document.py" lineno="116">
<arguments repr="source_path: str | Path">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="source_path: str | Path">
<name>source_path</name>
<type typedoc="string">str</type>
<type>Path</type>
</arg>
</arguments>
<doc>Open a PDF document for reading.

This is called automatically in the other PDF keywords
when a path to the PDF file is given as an argument.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        Open PDF    /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        metadata = pdf.open_pdf("/tmp/sample.pdf")

:param source_path: filepath to the source pdf.
:raises ValueError: if PDF is already open.</doc>
<shortdoc>Open a PDF document for reading.</shortdoc>
</kw>
<kw name="Rotate Page" source="./RPA/PDF/keywords/document.py" lineno="588">
<arguments repr="pages: List[int] | List[str] | str | None, source_path: str | None = None, output_path: str | None = None, clockwise: bool = True, angle: int = 90">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="pages: List[int] | List[str] | str | None">
<name>pages</name>
<type typedoc="list">List[int]</type>
<type typedoc="list">List[str]</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="output_path: str | None = None">
<name>output_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clockwise: bool = True">
<name>clockwise</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="angle: int = 90">
<name>angle</name>
<type typedoc="integer">int</type>
<default>90</default>
</arg>
</arguments>
<doc>Rotate pages in source PDF document and save to target PDF document.

If no source path given, assumes a PDF is already opened.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        Rotate Page
        ...          source_path=/tmp/sample.pdf
        ...          output_path=/tmp/output.pdf
        ...          pages=5

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def rotate_page():
        pages = pdf.rotate_page(
            source_path="/tmp/sample.pdf",
            output_path="/tmp/output.pdf",
            pages=5
        )

:param pages: page numbers to extract from PDF (numbers start from 0).
:param source_path: filepath to the source pdf.
:param output_path: filepath to the target pdf, stored by default
    in the robot output directory as ``output.pdf``
:param clockwise: directorion that page will be rotated to, default True.
:param angle: number of degrees to rotate, default 90.</doc>
<shortdoc>Rotate pages in source PDF document and save to target PDF document.</shortdoc>
</kw>
<kw name="Save Field Values" source="./RPA/PDF/keywords/model.py" lineno="664">
<arguments repr="source_path: str | None = None, output_path: str | None = None, newvals: dict | None = None, use_appearances_writer: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="output_path: str | None = None">
<name>output_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="newvals: dict | None = None">
<name>newvals</name>
<type typedoc="dictionary">dict</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_appearances_writer: bool = False">
<name>use_appearances_writer</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Save field values in PDF if it has fields.

:param source_path: Source PDF with fields to update.
:param output_path: Updated target PDF.
:param newvals: New values when updating many at once.
:param use_appearances_writer: For some PDF documents the updated
    fields won't be visible, try to set this to `True` if you
    encounter problems. (viewing the output PDF in browser might display the
    field values then)

**Examples**

**Robot Framework**

.. code-block:: robotframework

    Example Keyword
        Open PDF    ./tmp/sample.pdf
        Set Field Value    phone_nr    077123123
        Save Field Values    output_path=./tmp/output.pdf

    Multiple operations
        &amp;{new_fields}=       Create Dictionary
        ...                  phone_nr=077123123
        ...                  title=dr
        Save Field Values    source_path=./tmp/sample.pdf
        ...                  output_path=./tmp/output.pdf
        ...                  newvals=${new_fields}

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pdf.open_pdf("./tmp/sample.pdf")
        pdf.set_field_value("phone_nr", "077123123")
        pdf.save_field_values(output_path="./tmp/output.pdf")

    def multiple_operations():
        new_fields = {"phone_nr": "077123123", "title": "dr"}
        pdf.save_field_values(
            source_path="./tmp/sample.pdf",
            output_path="./tmp/output.pdf",
            newvals=new_fields
        )</doc>
<shortdoc>Save field values in PDF if it has fields.</shortdoc>
</kw>
<kw name="Save Figure As Image" source="./RPA/PDF/keywords/document.py" lineno="983">
<arguments repr="figure: Figure, images_folder: str = ., file_prefix: str = ">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="figure: Figure">
<name>figure</name>
<type>Figure</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="images_folder: str = .">
<name>images_folder</name>
<type typedoc="string">str</type>
<default>.</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="file_prefix: str = ">
<name>file_prefix</name>
<type typedoc="string">str</type>
<default/>
</arg>
</arguments>
<doc>Try to save the image data from Figure object, and return
the file name, if successful.

Figure needs to have byte `stream` and that needs to be recognized
as image format for successful save.

:param figure: PDF Figure object which will be saved as an image
:param images_folder: directory where image files will be created
:param file_prefix: image filename prefix
:return: image filepath or None</doc>
<shortdoc>Try to save the image data from Figure object, and return the file name, if successful.</shortdoc>
</kw>
<kw name="Save Figures As Images" source="./RPA/PDF/keywords/document.py" lineno="1018">
<arguments repr="source_path: str | None = None, images_folder: str = ., pages: str | None = None, file_prefix: str = ">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="images_folder: str = .">
<name>images_folder</name>
<type typedoc="string">str</type>
<default>.</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="pages: str | None = None">
<name>pages</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="file_prefix: str = ">
<name>file_prefix</name>
<type typedoc="string">str</type>
<default/>
</arg>
</arguments>
<doc>Save figures from given PDF document as image files.

If no source path given, assumes a PDF is already opened.

:param source_path: filepath to PDF document
:param images_folder: directory where image files will be created
:param pages: target figures in the pages, can be single page or range,
 default `None` means that all pages are scanned for figures to save
:param file_prefix: image filename prefix
:return: list of image filenames created</doc>
<shortdoc>Save figures from given PDF document as image files.</shortdoc>
</kw>
<kw name="Save Pdf" source="./RPA/PDF/keywords/document.py" lineno="940">
<arguments repr="output_path: str, reader: PdfFileReader">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="output_path: str">
<name>output_path</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="reader: PdfFileReader">
<name>reader</name>
<type>PdfFileReader</type>
</arg>
</arguments>
<doc>Save the contents of a PyPDF2 reader to a new file.

:param output_path: filepath to target PDF
:param reader: a PyPDF2 reader.</doc>
<shortdoc>Save the contents of a PyPDF2 reader to a new file.</shortdoc>
</kw>
<kw name="Set Anchor To Element" source="./RPA/PDF/keywords/finder.py" lineno="218">
<arguments repr="locator: str, trim: bool = True, pagenum: int | str = 1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: str">
<name>locator</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="trim: bool = True">
<name>trim</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="pagenum: int | str = 1">
<name>pagenum</name>
<type typedoc="integer">int</type>
<type typedoc="string">str</type>
<default>1</default>
</arg>
</arguments>
<doc>Sets main anchor point in the document for further searches.

This is used internally in the library and can work with multiple anchors at
the same time if such are found.

:param locator: Element to set anchor to. This can be prefixed with either
    `text:`, `regex:` or `coords:` to find the anchor by text or coordinates.
    `text` is assumed if no such prefix is specified. (text search is case
    insensitive)
:param trim: Automatically trim leading/trailing whitespace from the text
    elements. (switched on by default)
:param pagenum: Page number where search is performed on, defaults to 1 (first
    page).
:returns: True if at least one anchor was found.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    Example Keyword
         ${success} =  Set Anchor To Element    Invoice Number

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        success = pdf.set_anchor_to_element("Invoice Number")</doc>
<shortdoc>Sets main anchor point in the document for further searches.</shortdoc>
</kw>
<kw name="Set Convert Settings" source="./RPA/PDF/keywords/model.py" lineno="827">
<arguments repr="line_margin: float | None = None, word_margin: float | None = None, char_margin: float | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="line_margin: float | None = None">
<name>line_margin</name>
<type typedoc="float">float</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="word_margin: float | None = None">
<name>word_margin</name>
<type typedoc="float">float</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="char_margin: float | None = None">
<name>char_margin</name>
<type typedoc="float">float</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Change settings for PDFMiner document conversion.

`line_margin` controls how textboxes are grouped - if conversion results in
texts grouped into one group then set this to lower value

`word_margin` controls how spaces are inserted between words - if conversion
results in text without spaces then set this to lower value

`char_margin` controls how characters are grouped into words - if conversion
results in individual characters instead of then set this to higher value

:param line_margin: relative margin between bounding lines, default 0.5
:param word_margin: relative margin between words, default 0.1
:param char_margin: relative margin between characters, default 2.0

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        Set Convert Settings  line_margin=0.00000001
        ${texts}=  Get Text From PDF  /tmp/sample.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pdf.set_convert_settings(line_margin=)
        texts = pdf.get_text_from_pdf("/tmp/sample.pdf")</doc>
<shortdoc>Change settings for PDFMiner document conversion.</shortdoc>
</kw>
<kw name="Set Field Value" source="./RPA/PDF/keywords/model.py" lineno="599">
<arguments repr="field_name: str, value: Any, source_path: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="field_name: str">
<name>field_name</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: Any">
<name>value</name>
<type>Any</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Set value for field with given name on the active document.

Tries to match with field's identifier directly or its label.

:param field_name: Field to update.
:param value: New value for the field.
:param source_path: Source PDF file path.
:raises ValueError: When field can't be found or more than one field matches
    the given `field_name`.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    Example Keyword
        Open PDF    ./tmp/sample.pdf
        Set Field Value    phone_nr    077123123
        Save Field Values    output_path=./tmp/output.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pdf.open_pdf("./tmp/sample.pdf")
        pdf.set_field_value("phone_nr", "077123123")
        pdf.save_field_values(output_path="./tmp/output.pdf")</doc>
<shortdoc>Set value for field with given name on the active document.</shortdoc>
</kw>
<kw name="Switch To Pdf" source="./RPA/PDF/keywords/document.py" lineno="412">
<arguments repr="source_path: str | Path | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source_path: str | Path | None = None">
<name>source_path</name>
<type typedoc="string">str</type>
<type>Path</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Switch library's current fileobject to already opened file
or open a new file if not opened.

This is done automatically in the PDF library keywords.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    ***Settings***
    Library    RPA.PDF

    ***Tasks***
    Example Keyword
        Switch to PDF    /tmp/another.pdf

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    pdf = PDF()

    def example_keyword():
        pdf.switch_to_pdf("/tmp/sample.pdf")


:param source_path: filepath to the source pdf.
:raises ValueError: if PDF filepath is not given and there are no active
    file to activate.</doc>
<shortdoc>Switch library's current fileobject to already opened file or open a new file if not opened.</shortdoc>
</kw>
<kw name="Template Html To Pdf" source="./RPA/PDF/keywords/document.py" lineno="165">
<arguments repr="template: str, output_path: str, variables: dict | None = None, encoding: str = utf-8">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="template: str">
<name>template</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="output_path: str">
<name>output_path</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="variables: dict | None = None">
<name>variables</name>
<type typedoc="dictionary">dict</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="encoding: str = utf-8">
<name>encoding</name>
<type typedoc="string">str</type>
<default>utf-8</default>
</arg>
</arguments>
<doc>Use HTML template file to generate PDF file.

It provides an easy method of generating a PDF document from an HTML formatted
template file.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.PDF

    *** Variables ***
    ${TEMPLATE}    order.template
    ${PDF}         result.pdf
    &amp;{DATA}        name=Robot Generated
    ...            email=robot@domain.com
    ...            zip=00100
    ...            items=Item 1, Item 2

    *** Tasks ***
    Create PDF from HTML template
        Template HTML to PDF   ${TEMPLATE}  ${PDF}  ${DATA}

**Python**

.. code-block:: python

    from RPA.PDF import PDF

    p = PDF()
    orders = ["item 1", "item 2", "item 3"]
    data = {
        "name": "Robot Process",
        "email": "robot@domain.com",
        "zip": "00100",
        "items": "&lt;br/&gt;".join(orders),
    }
    p.template_html_to_pdf("order.template", "order.pdf", data)

:param template: Filepath to the HTML template.
:param output_path: Filepath where to save PDF document.
:param variables: Dictionary of variables to fill into template, defaults to {}.
:param encoding: Codec used for text I/O.</doc>
<shortdoc>Use HTML template file to generate PDF file.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>Add Files To Pdf</usage>
<usage>Convert</usage>
<usage>Encrypt Pdf</usage>
<usage>Find Text</usage>
<usage>Get Input Fields</usage>
<usage>Get Text From Pdf</usage>
<usage>Rotate Page</usage>
<usage>Save Field Values</usage>
<usage>Set Anchor To Element</usage>
</usages>
</type>
<type name="dictionary" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#dict|dictionary]
literals. They are converted to actual dictionaries using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
dictionaries and other containers.

Examples: ``{'a': 1, 'b': 2}``, ``{'key': 1, 'nested': {'key': 2}}``
</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>Save Field Values</usage>
<usage>Template Html To Pdf</usage>
</usages>
</type>
<type name="float" type="Standard">
<doc>Conversion is done using Python's
[https://docs.python.org/library/functions.html#float|float] built-in function.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``3.14``, ``2.9979e8``, ``10 000.000 01``
</doc>
<accepts>
<type>string</type>
<type>Real</type>
</accepts>
<usages>
<usage>Add Watermark Image To Pdf</usage>
<usage>Set Convert Settings</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Convert</usage>
<usage>Find Text</usage>
<usage>Rotate Page</usage>
<usage>Set Anchor To Element</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Add Files To Pdf</usage>
<usage>Extract Pages From Pdf</usage>
<usage>Get Text From Pdf</usage>
<usage>Rotate Page</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Add Files To Pdf</usage>
<usage>Add Watermark Image To Pdf</usage>
<usage>Close Pdf</usage>
<usage>Convert</usage>
<usage>Dump Pdf As Xml</usage>
<usage>Encrypt Pdf</usage>
<usage>Extract Pages From Pdf</usage>
<usage>Find Text</usage>
<usage>Get All Figures</usage>
<usage>Get Input Fields</usage>
<usage>Get Number Of Pages</usage>
<usage>Get Pdf Info</usage>
<usage>Get Text From Pdf</usage>
<usage>Is Pdf Encrypted</usage>
<usage>Rotate Page</usage>
<usage>Save Field Values</usage>
<usage>Save Figures As Images</usage>
<usage>Set Convert Settings</usage>
<usage>Set Field Value</usage>
<usage>Switch To Pdf</usage>
<usage>Template Html To Pdf</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Add Files To Pdf</usage>
<usage>Add Watermark Image To Pdf</usage>
<usage>Close Pdf</usage>
<usage>Convert</usage>
<usage>Decrypt Pdf</usage>
<usage>Dump Pdf As Xml</usage>
<usage>Encrypt Pdf</usage>
<usage>Extract Pages From Pdf</usage>
<usage>Find Text</usage>
<usage>Get All Figures</usage>
<usage>Get Input Fields</usage>
<usage>Get Number Of Pages</usage>
<usage>Get Pdf Info</usage>
<usage>Get Text From Pdf</usage>
<usage>Html To Pdf</usage>
<usage>Is Pdf Encrypted</usage>
<usage>Open Pdf</usage>
<usage>Rotate Page</usage>
<usage>Save Field Values</usage>
<usage>Save Figure As Image</usage>
<usage>Save Figures As Images</usage>
<usage>Save Pdf</usage>
<usage>Set Anchor To Element</usage>
<usage>Set Field Value</usage>
<usage>Switch To Pdf</usage>
<usage>Template Html To Pdf</usage>
</usages>
</type>
</typedocs>
</keywordspec>
