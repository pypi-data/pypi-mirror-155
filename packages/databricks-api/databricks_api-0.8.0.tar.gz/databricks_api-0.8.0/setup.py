# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['databricks_api']

package_data = \
{'': ['*']}

install_requires = \
['databricks-cli']

setup_kwargs = {
    'name': 'databricks-api',
    'version': '0.8.0',
    'description': 'Databricks API client auto-generated from the official databricks-cli package',
    'long_description': 'databricks-api\n==============\n\n|pypi| |pyversions|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/databricks-api.svg\n    :target: https://pypi.python.org/pypi/databricks-api\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/databricks-api.svg\n    :target: https://pypi.python.org/pypi/databricks-api\n\n*[This documentation is auto-generated]*\n\nThis package provides a simplified interface for the Databricks REST API.\nThe interface is autogenerated on instantiation using the underlying client\nlibrary used in the official ``databricks-cli`` python package.\n\nInstall using\n\n.. code-block:: bash\n\n    pip install databricks-api\n    \n\nThe docs here describe the interface for version **0.17.0** of\nthe ``databricks-cli`` package for API version **2.0**.\n\nThe ``databricks-api`` package contains a ``DatabricksAPI`` class which provides\ninstance attributes for the ``databricks-cli`` ``ApiClient``, as well as each of\nthe available service instances. The attributes of a ``DatabricksAPI`` instance are:\n\n* DatabricksAPI.client *<databricks_cli.sdk.api_client.ApiClient>*\n* DatabricksAPI.jobs *<databricks_cli.sdk.service.JobsService>*\n* DatabricksAPI.cluster *<databricks_cli.sdk.service.ClusterService>*\n* DatabricksAPI.policy *<databricks_cli.sdk.service.PolicyService>*\n* DatabricksAPI.managed_library *<databricks_cli.sdk.service.ManagedLibraryService>*\n* DatabricksAPI.dbfs *<databricks_cli.sdk.service.DbfsService>*\n* DatabricksAPI.workspace *<databricks_cli.sdk.service.WorkspaceService>*\n* DatabricksAPI.secret *<databricks_cli.sdk.service.SecretService>*\n* DatabricksAPI.groups *<databricks_cli.sdk.service.GroupsService>*\n* DatabricksAPI.token *<databricks_cli.sdk.service.TokenService>*\n* DatabricksAPI.instance_pool *<databricks_cli.sdk.service.InstancePoolService>*\n* DatabricksAPI.delta_pipelines *<databricks_cli.sdk.service.DeltaPipelinesService>*\n* DatabricksAPI.repos *<databricks_cli.sdk.service.ReposService>*\n\nTo instantiate the client, provide the databricks host and either a token or\nuser and password. Also shown is the full signature of the\nunderlying ``ApiClient.__init__``\n\n.. code-block:: python\n\n    from databricks_api import DatabricksAPI\n\n    # Provide a host and token\n    db = DatabricksAPI(\n        host="example.cloud.databricks.com",\n        token="dpapi123..."\n    )\n\n    # OR a host and user and password\n    db = DatabricksAPI(\n        host="example.cloud.databricks.com",\n        user="me@example.com",\n        password="password"\n    )\n\n    # Full __init__ signature\n    db = DatabricksAPI(\n        user=None,\n        password=None,\n        host=None,\n        token=None,\n        api_version=\'2.0\',\n        default_headers={},\n        verify=True,\n        command_name=\'\',\n        jobs_api_version=None\n    )\n\nRefer to the `official documentation <https://docs.databricks.com/api/index.html>`_\non the functionality and required arguments of each method below.\n\nEach of the service instance attributes provides the following public methods:\n\nDatabricksAPI.jobs\n------------------\n\n.. code-block:: python\n\n    db.jobs.cancel_run(\n        run_id,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.create_job(\n        name=None,\n        existing_cluster_id=None,\n        new_cluster=None,\n        libraries=None,\n        email_notifications=None,\n        timeout_seconds=None,\n        max_retries=None,\n        min_retry_interval_millis=None,\n        retry_on_timeout=None,\n        schedule=None,\n        notebook_task=None,\n        spark_jar_task=None,\n        spark_python_task=None,\n        spark_submit_task=None,\n        max_concurrent_runs=None,\n        tasks=None,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.delete_job(\n        job_id,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.delete_run(\n        run_id=None,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.export_run(\n        run_id,\n        views_to_export=None,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.get_job(\n        job_id,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.get_run(\n        run_id=None,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.get_run_output(\n        run_id,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.list_jobs(\n        job_type=None,\n        expand_tasks=None,\n        limit=None,\n        offset=None,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.list_runs(\n        job_id=None,\n        active_only=None,\n        completed_only=None,\n        offset=None,\n        limit=None,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.reset_job(\n        job_id,\n        new_settings,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.run_now(\n        job_id=None,\n        jar_params=None,\n        notebook_params=None,\n        python_params=None,\n        spark_submit_params=None,\n        python_named_params=None,\n        idempotency_token=None,\n        headers=None,\n        version=None,\n    )\n\n    db.jobs.submit_run(\n        run_name=None,\n        existing_cluster_id=None,\n        new_cluster=None,\n        libraries=None,\n        notebook_task=None,\n        spark_jar_task=None,\n        spark_python_task=None,\n        spark_submit_task=None,\n        timeout_seconds=None,\n        tasks=None,\n        headers=None,\n        version=None,\n    )\n\n\nDatabricksAPI.cluster\n---------------------\n\n.. code-block:: python\n\n    db.cluster.create_cluster(\n        num_workers=None,\n        autoscale=None,\n        cluster_name=None,\n        spark_version=None,\n        spark_conf=None,\n        aws_attributes=None,\n        node_type_id=None,\n        driver_node_type_id=None,\n        ssh_public_keys=None,\n        custom_tags=None,\n        cluster_log_conf=None,\n        spark_env_vars=None,\n        autotermination_minutes=None,\n        enable_elastic_disk=None,\n        cluster_source=None,\n        instance_pool_id=None,\n        headers=None,\n    )\n\n    db.cluster.delete_cluster(\n        cluster_id,\n        headers=None,\n    )\n\n    db.cluster.edit_cluster(\n        cluster_id,\n        num_workers=None,\n        autoscale=None,\n        cluster_name=None,\n        spark_version=None,\n        spark_conf=None,\n        aws_attributes=None,\n        node_type_id=None,\n        driver_node_type_id=None,\n        ssh_public_keys=None,\n        custom_tags=None,\n        cluster_log_conf=None,\n        spark_env_vars=None,\n        autotermination_minutes=None,\n        enable_elastic_disk=None,\n        cluster_source=None,\n        instance_pool_id=None,\n        headers=None,\n    )\n\n    db.cluster.get_cluster(\n        cluster_id,\n        headers=None,\n    )\n\n    db.cluster.get_events(\n        cluster_id,\n        start_time=None,\n        end_time=None,\n        order=None,\n        event_types=None,\n        offset=None,\n        limit=None,\n        headers=None,\n    )\n\n    db.cluster.list_available_zones(headers=None)\n\n    db.cluster.list_clusters(headers=None)\n\n    db.cluster.list_node_types(headers=None)\n\n    db.cluster.list_spark_versions(headers=None)\n\n    db.cluster.permanent_delete_cluster(\n        cluster_id,\n        headers=None,\n    )\n\n    db.cluster.pin_cluster(\n        cluster_id,\n        headers=None,\n    )\n\n    db.cluster.resize_cluster(\n        cluster_id,\n        num_workers=None,\n        autoscale=None,\n        headers=None,\n    )\n\n    db.cluster.restart_cluster(\n        cluster_id,\n        headers=None,\n    )\n\n    db.cluster.start_cluster(\n        cluster_id,\n        headers=None,\n    )\n\n    db.cluster.unpin_cluster(\n        cluster_id,\n        headers=None,\n    )\n\n\nDatabricksAPI.policy\n--------------------\n\n.. code-block:: python\n\n    db.policy.create_policy(\n        policy_name,\n        definition,\n        headers=None,\n    )\n\n    db.policy.delete_policy(\n        policy_id,\n        headers=None,\n    )\n\n    db.policy.edit_policy(\n        policy_id,\n        policy_name,\n        definition,\n        headers=None,\n    )\n\n    db.policy.get_policy(\n        policy_id,\n        headers=None,\n    )\n\n    db.policy.list_policies(headers=None)\n\n\nDatabricksAPI.managed_library\n-----------------------------\n\n.. code-block:: python\n\n    db.managed_library.all_cluster_statuses(headers=None)\n\n    db.managed_library.cluster_status(\n        cluster_id,\n        headers=None,\n    )\n\n    db.managed_library.install_libraries(\n        cluster_id,\n        libraries=None,\n        headers=None,\n    )\n\n    db.managed_library.uninstall_libraries(\n        cluster_id,\n        libraries=None,\n        headers=None,\n    )\n\n\nDatabricksAPI.dbfs\n------------------\n\n.. code-block:: python\n\n    db.dbfs.add_block(\n        handle,\n        data,\n        headers=None,\n    )\n\n    db.dbfs.add_block_test(\n        handle,\n        data,\n        headers=None,\n    )\n\n    db.dbfs.close(\n        handle,\n        headers=None,\n    )\n\n    db.dbfs.close_test(\n        handle,\n        headers=None,\n    )\n\n    db.dbfs.create(\n        path,\n        overwrite=None,\n        headers=None,\n    )\n\n    db.dbfs.create_test(\n        path,\n        overwrite=None,\n        headers=None,\n    )\n\n    db.dbfs.delete(\n        path,\n        recursive=None,\n        headers=None,\n    )\n\n    db.dbfs.delete_test(\n        path,\n        recursive=None,\n        headers=None,\n    )\n\n    db.dbfs.get_status(\n        path,\n        headers=None,\n    )\n\n    db.dbfs.get_status_test(\n        path,\n        headers=None,\n    )\n\n    db.dbfs.list(\n        path,\n        headers=None,\n    )\n\n    db.dbfs.list_test(\n        path,\n        headers=None,\n    )\n\n    db.dbfs.mkdirs(\n        path,\n        headers=None,\n    )\n\n    db.dbfs.mkdirs_test(\n        path,\n        headers=None,\n    )\n\n    db.dbfs.move(\n        source_path,\n        destination_path,\n        headers=None,\n    )\n\n    db.dbfs.move_test(\n        source_path,\n        destination_path,\n        headers=None,\n    )\n\n    db.dbfs.put(\n        path,\n        contents=None,\n        overwrite=None,\n        headers=None,\n        src_path=None,\n    )\n\n    db.dbfs.put_test(\n        path,\n        contents=None,\n        overwrite=None,\n        headers=None,\n        src_path=None,\n    )\n\n    db.dbfs.read(\n        path,\n        offset=None,\n        length=None,\n        headers=None,\n    )\n\n    db.dbfs.read_test(\n        path,\n        offset=None,\n        length=None,\n        headers=None,\n    )\n\n\nDatabricksAPI.workspace\n-----------------------\n\n.. code-block:: python\n\n    db.workspace.delete(\n        path,\n        recursive=None,\n        headers=None,\n    )\n\n    db.workspace.export_workspace(\n        path,\n        format=None,\n        direct_download=None,\n        headers=None,\n    )\n\n    db.workspace.get_status(\n        path,\n        headers=None,\n    )\n\n    db.workspace.import_workspace(\n        path,\n        format=None,\n        language=None,\n        content=None,\n        overwrite=None,\n        headers=None,\n    )\n\n    db.workspace.list(\n        path,\n        headers=None,\n    )\n\n    db.workspace.mkdirs(\n        path,\n        headers=None,\n    )\n\n\nDatabricksAPI.secret\n--------------------\n\n.. code-block:: python\n\n    db.secret.create_scope(\n        scope,\n        initial_manage_principal=None,\n        scope_backend_type=None,\n        backend_azure_keyvault=None,\n        headers=None,\n    )\n\n    db.secret.delete_acl(\n        scope,\n        principal,\n        headers=None,\n    )\n\n    db.secret.delete_scope(\n        scope,\n        headers=None,\n    )\n\n    db.secret.delete_secret(\n        scope,\n        key,\n        headers=None,\n    )\n\n    db.secret.get_acl(\n        scope,\n        principal,\n        headers=None,\n    )\n\n    db.secret.list_acls(\n        scope,\n        headers=None,\n    )\n\n    db.secret.list_scopes(headers=None)\n\n    db.secret.list_secrets(\n        scope,\n        headers=None,\n    )\n\n    db.secret.put_acl(\n        scope,\n        principal,\n        permission,\n        headers=None,\n    )\n\n    db.secret.put_secret(\n        scope,\n        key,\n        string_value=None,\n        bytes_value=None,\n        headers=None,\n    )\n\n\nDatabricksAPI.groups\n--------------------\n\n.. code-block:: python\n\n    db.groups.add_to_group(\n        parent_name,\n        user_name=None,\n        group_name=None,\n        headers=None,\n    )\n\n    db.groups.create_group(\n        group_name,\n        headers=None,\n    )\n\n    db.groups.get_group_members(\n        group_name,\n        headers=None,\n    )\n\n    db.groups.get_groups(headers=None)\n\n    db.groups.get_groups_for_principal(\n        user_name=None,\n        group_name=None,\n        headers=None,\n    )\n\n    db.groups.remove_from_group(\n        parent_name,\n        user_name=None,\n        group_name=None,\n        headers=None,\n    )\n\n    db.groups.remove_group(\n        group_name,\n        headers=None,\n    )\n\n\nDatabricksAPI.token\n-------------------\n\n.. code-block:: python\n\n    db.token.create_token(\n        lifetime_seconds=None,\n        comment=None,\n        headers=None,\n    )\n\n    db.token.list_tokens(headers=None)\n\n    db.token.revoke_token(\n        token_id,\n        headers=None,\n    )\n\n\nDatabricksAPI.instance_pool\n---------------------------\n\n.. code-block:: python\n\n    db.instance_pool.create_instance_pool(\n        instance_pool_name=None,\n        min_idle_instances=None,\n        max_capacity=None,\n        aws_attributes=None,\n        node_type_id=None,\n        custom_tags=None,\n        idle_instance_autotermination_minutes=None,\n        enable_elastic_disk=None,\n        disk_spec=None,\n        preloaded_spark_versions=None,\n        headers=None,\n    )\n\n    db.instance_pool.delete_instance_pool(\n        instance_pool_id=None,\n        headers=None,\n    )\n\n    db.instance_pool.edit_instance_pool(\n        instance_pool_id,\n        instance_pool_name=None,\n        min_idle_instances=None,\n        max_capacity=None,\n        aws_attributes=None,\n        node_type_id=None,\n        custom_tags=None,\n        idle_instance_autotermination_minutes=None,\n        enable_elastic_disk=None,\n        disk_spec=None,\n        preloaded_spark_versions=None,\n        headers=None,\n    )\n\n    db.instance_pool.get_instance_pool(\n        instance_pool_id=None,\n        headers=None,\n    )\n\n    db.instance_pool.list_instance_pools(headers=None)\n\n\nDatabricksAPI.delta_pipelines\n-----------------------------\n\n.. code-block:: python\n\n    db.delta_pipelines.create(\n        id=None,\n        name=None,\n        storage=None,\n        configuration=None,\n        clusters=None,\n        libraries=None,\n        trigger=None,\n        filters=None,\n        allow_duplicate_names=None,\n        headers=None,\n    )\n\n    db.delta_pipelines.delete(\n        pipeline_id=None,\n        headers=None,\n    )\n\n    db.delta_pipelines.deploy(\n        pipeline_id=None,\n        id=None,\n        name=None,\n        storage=None,\n        configuration=None,\n        clusters=None,\n        libraries=None,\n        trigger=None,\n        filters=None,\n        allow_duplicate_names=None,\n        headers=None,\n    )\n\n    db.delta_pipelines.get(\n        pipeline_id=None,\n        headers=None,\n    )\n\n    db.delta_pipelines.list(\n        pagination=None,\n        headers=None,\n    )\n\n    db.delta_pipelines.reset(\n        pipeline_id=None,\n        headers=None,\n    )\n\n    db.delta_pipelines.run(\n        pipeline_id=None,\n        headers=None,\n    )\n\n    db.delta_pipelines.start_update(\n        pipeline_id=None,\n        full_refresh=None,\n        headers=None,\n    )\n\n    db.delta_pipelines.stop(\n        pipeline_id=None,\n        headers=None,\n    )\n\n\nDatabricksAPI.repos\n-------------------\n\n.. code-block:: python\n\n    db.repos.create_repo(\n        url,\n        provider,\n        path=None,\n        headers=None,\n    )\n\n    db.repos.delete_repo(\n        id,\n        headers=None,\n    )\n\n    db.repos.get_repo(\n        id,\n        headers=None,\n    )\n\n    db.repos.list_repos(\n        path_prefix=None,\n        next_page_token=None,\n        headers=None,\n    )\n\n    db.repos.update_repo(\n        id,\n        branch=None,\n        tag=None,\n        headers=None,\n    )\n\n\n',
    'author': 'Christopher Flynn',
    'author_email': 'crf204@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/crflynn/databricks-api',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
