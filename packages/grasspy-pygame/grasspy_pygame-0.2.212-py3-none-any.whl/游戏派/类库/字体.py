导入 pygame
从 游戏派.类库.表层 导入 表层类

类 字体汉化类:

    类 字体类:

        套路 __初始化__(自身,*参数):
            如果 长(参数)==1:
                自身.font = 参数[0]
            否则:
                自身.font = pygame.font.Font(参数[0],参数[1])

        套路 描绘(自身, 文字, 抗锯齿, 颜色, 背景色=空)->'表层类':
            '''将文字以本字体描绘在新表层上
            返回新表层
            '''
            返回 表层类(自身.font.render(文字, 抗锯齿, 颜色, 背景色))

        套路 尺寸(自身, 文字):
            '''根据文字决定尺寸大小
            返回(宽,高)
            '''
            返回 自身.font.size(文字)

        套路 设置下划线(自身, 是否):
            '''是否设置下划线
            '''
            自身.font.set_underline(是否)

        套路 下划线状态(自身):
            '''返回下划线状态
            '''
            返回 自身.font.get_underline()

        套路 设置倾斜(自身, 是否):
            '''是否设置倾斜
            '''
            自身.font.set_italic(是否)

        套路 倾斜状态(自身):
            '''返回下划线状态
            '''
            返回 自身.font.get_italic()

        套路 设置加粗(自身, 是否):
            '''是否设置加粗
            '''
            自身.font.set_bold(是否)

        套路 加粗状态(自身):
            '''返回加粗状态
            '''
            返回 自身.font.get_bold()

        套路 度量(自身, 文字):
            '''返回每个文字的度量元组
            '''
            返回 自身.font.metrics(文字)

        套路 线宽(自身):
            '''返回字体线宽
            '''
            返回 自身.font.get_linesize()

        套路 高度(自身):
            '''返回字体高度
            '''
            返回 自身.font.get_height()

        套路 基准高(自身):
            '''返回字体基准高
            '''
            返回 自身.font.get_ascent()

        套路 基准差(自身):
            '''返回字体基准高
            '''
            返回 自身.font.get_descent()
            
    套路 初始化(自身):
        '''初始化字体模块\n
        参数:空\n
        返回:空
        '''
        pygame.font.init()

    套路 退出(自身):
        '''退出字体模块\n
        参数:空\n
        返回:空
        '''
        pygame.font.quit()

    套路 获取初始化(自身)->布尔型:
        '''获取字体初始化状态\n
        参数:空\n
        返回:如已初始化,返回真,否则返回假
        '''
        返回 pygame.font.get_init()

    套路 获取默认字体(自身)->字符串型:
        '''获得默认字体的文件名\n
        参数:空\n
        返回:字体的文件名
        '''
        返回 pygame.font.get_default_font()

    套路 获取可用字体(自身):
        '''获取所有可使用的字体\n
        参数:空\n
        返回:系统可使用的字体名列表
        '''
        返回 pygame.font.get_fonts()

    套路 获取字体路径(自身, 字体, 加粗=假, 倾斜=假):
        '''获取字体文件在系统中的完整路径\n
        参数:<字体>,为字体的名字\n
            <加粗>,是否为加粗\n
            <倾斜>,是否为倾斜\n
        返回:字体文件在系统中的完整路径
        '''
        返回 pygame.font.match_font(字体, 加粗, 倾斜)

    套路 系统字体(自身, 字体名, 字号, 加粗=False, 倾斜=False)->'字体类':
        '''从系统字体中返回相应字体
        参数:<字体>为字体的名字,字符串型
        '''
        返回 字体汉化类.字体类(pygame.font.SysFont(字体名, 字号,加粗, 倾斜))


