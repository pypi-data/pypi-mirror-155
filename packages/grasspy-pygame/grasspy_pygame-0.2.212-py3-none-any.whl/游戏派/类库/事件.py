导入 pygame

汉英属性 = {
    '类型':     'type',
    '键':'key',
    '收获':'gain',
    '状态':'state',
    '修正':'mod',
    'unicode':'unicode',
    'scancode':'scancode',
    '位置':'pos',
    '参照':'rel',
    '按钮集':'buttons',
    '按钮':'button',
    '手柄':'joy',
    '坐标轴':'axis',
    '值':'value',
    '球':'ball',
    '帽子':'hat',
    '尺寸':'size',
    '宽':'w',
    '高':'h',
    '空':'none',
    '代码':'code'
}
# 英汉属性 = {v: k 取 k, v 于 汉英属性.项()}

类 事件汉化类:
    
    类 事件类型:
        套路 __初始化__(自身,event):
            自身.event = event

        套路 __getattr__(自身, 键):
            返回 自身.event.__getattribute__(汉英属性[键])

    套路 自定义事件(自身,事件类型,事件字典):
        '''创建用户自定义事件\n
        参数:<事件类型>\n
            <事件字典>\n
        返回:事件类型实例
        '''
        返回 事件汉化类.事件类型(pygame.event.Event(事件类型,事件字典))

    套路 自动处理(自身):
        '''内部自动处理事件
        '''
        pygame.event.pump()

    套路 获取(自身,事件类型=空, 自动处理=真)->'事件类型':
        '''从事件队列获取事件列表
        返回事件列表
        '''
        事件列表 = 列表型(事件汉化类.事件类型(值) 取 值 于 pygame.event.get(事件类型,自动处理))

        返回 事件列表

    套路 截获(自身)->'事件类型':
        '''从队列中获取一个事件\n
        从队列中返回并删除一个事件\n
        如果事件队列为空，那么会立刻返回类型为 pygame.NOEVENT 的事件
        '''
        返回 事件汉化类.事件类型(pygame.event.poll())

    套路 等候(自身)->'事件类型':
        '''等候队列中的单个事件
        返回单个事件
        '''
        返回 pygame.event.wait()

    套路 监视(自身,事件类型=空, 自动处理=真):
        '''测试事件类型是否在队列中等待
        如果事件类型在队列中返回真,否则返回假
        '''
        返回 pygame.event.peek(事件类型,自动处理)

    套路 清空(自身,事件类型=空, 自动处理=真):
        '''从队列中删除所有的事件或相应类型的事件
        '''
        pygame.event.clear(事件类型,自动处理)

    套路 事件名(自身,事件类型):
        '''通过 id 获得该事件类型的字符串名字
        '''
        返回 pygame.event.event_name(事件类型)

    套路 黑名单(自身,事件类型):
        '''控制哪些事件禁止进入队列
        事件类型为空,则禁止所有事件进入队列
        '''
        pygame.event.set_blocked(事件类型)

    套路 白名单(自身,事件类型):
        '''控制哪些事件禁止进入队列
        事件类型为空,则允许所有事件进入队列
        '''
        pygame.event.set_allowed(事件类型)

    套路 检测黑名单(自身,事件类型):
        '''检测某一类型的事件是否被禁止进入队列
        如果在黑名单返回真,否则返回假
        '''
        返回 pygame.event.get_blocked(事件类型)

    套路 设置共享(自身,共占与否):
        '''控制是否共占输入设备
        '''
        pygame.event.set_grab(控制与否)

    套路 检测共享(自身):
        '''检测程序是否共占输入设备
        '''
        返回 pygame.event.get_grab()

    套路 提交(自身,事件):
        '''放置一个新的事件到队列中
        '''
        pygame.event.post(事件)
