从 pygame.time 导入 *

类 时间汉化类:

    套路 获取运行时间(自身)->int:
        '''获取游戏派.初始化() 调用以来的毫秒数\n
        参数: 空\n
        返回: 获取以毫秒为单位的时间
        '''       
        返回 get_ticks()

    套路 暂停(自身,时间)->int:
        '''暂停程序一段时间,不使用CPU,更精确\n
        参数: <时间>,单位毫秒\n
        返回: 实际使用的毫秒数
        '''       
        返回 wait(时间)

    套路 延迟(自身,时间)->int:
        '''暂停程序一段时间,此功能还是使用CPU\n
        参数: <时间>,单位毫秒\n
        返回: 实际使用的毫秒数
        '''       
        返回 delay(时间)

    套路 事件计时器(自身,事件类型,时间):
        '''将事件类型设置为每隔给定的毫秒数显示在事件队列中\n
        参数: <事件类型>,事件的类型\n
            <时间>,每隔给定的毫秒数将事件类型加入事件队列\n
        返回: 空
        '''       
        set_timer(事件类型,时间)

    类 时钟类:
        套路 __初始化__(自身):
            自身.clock = Clock()

        套路 设置帧率(自身,帧率=0):
            '''设置时钟的帧率,每秒给定的滴答数\n
            不会占用太多CPU,在每个平台上都不准确
            参数: <帧率>,每秒给定的滴答数\n
            返回: 计算自上一次调用以来经过的毫秒数
            '''       
            返回 自身.clock.tick(帧率)

        套路 设置精确帧率(自身,帧率=0):
            '''设置时钟的帧率,每秒给定的滴答数\n
            使用大量CPU以确保时间更准确\n
            参数: <帧率>,每秒给定的滴答数\n
            返回: 计算自上一次调用以来经过的毫秒数
            '''       
            返回 自身.clock.tick_busy_loop(帧率)

        套路 获取帧率时间(自身):
            '''获取在上一个滴答中使用的时间\n
            使用大量CPU以确保时间更准确\n
            参数: 空\n
            返回: 前两次调用 设置帧率() 之间传递的毫秒数
            '''       
            返回 自身.clock.get_time()

        套路 获取帧率实时(自身):
            '''获取在上一个滴答中使用的时间\n
            使用大量CPU以确保时间更准确\n
            参数: 空\n
            返回: 前两次调用 设置帧率() 之间传递的毫秒数,不包括设置帧率延迟限制帧速率时使用的任何时间
            '''       
            返回 自身.clock.get_rawtime()

        套路 获取帧率(自身):
            '''获取时钟帧率\n
            参数: 空\n
            返回: 每秒帧数
            '''       
            返回 自身.clock.get_fps()