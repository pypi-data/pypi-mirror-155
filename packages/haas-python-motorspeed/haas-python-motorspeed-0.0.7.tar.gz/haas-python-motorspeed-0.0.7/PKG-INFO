Metadata-Version: 2.1
Name: haas-python-motorspeed
Version: 0.0.7
Summary: This is motorspeed driver for HaaS Python. HaaS Python is forked from micropython.
Home-page: https://haas.iot.aliyun.com/?from=corp
Author: HaaS Python
Author-email: yinsuo.mys@alibaba-inc.com
License: Apache License, Version 2.0
Project-URL: Source Code, https://github.com/alibaba/AliOS-Things
Project-URL: Bug Tracker, https://github.com/alibaba/AliOS-Things/issues
Project-URL: Documentation, https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.81b460b1lzwYKw#/?from=corp
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: Implementation :: MicroPython
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE


## HaaS Python介绍
HaaS Python是阿里云IoT团队最新研发的一套低代码编程框架，兼容MicroPython编程规范，依托HaaS平台软硬件积木提供AI、支付、蓝牙配网、云连接、UI等物联网场景常用的能力，从而解决了物联网应用开发难的问题。有了Python轻应用框架，物联网编程不再局限于专业软件开发人员，一般的技术员也可以快速实现复杂的物联网需求。
更多HaaS Python介绍和开发资料见[HaaS Python官网](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.595660b1dZDX71#/?from=corp),[创意案例](https://haas.iot.aliyun.com/solution?from=crop), [硬件积木](https://haas.iot.aliyun.com/solution/hardware?from=corp)

HaaS Python is a set of low-code programming frameworks newly developed by Alibaba Cloud IoT team. It is compatible with MicroPython programming specifications. It relies on the hardware and software building blocks of the HaaS platform to provide capabilities commonly used in IoT scenarios such as AI, payment, Bluetooth network configuration, cloud connection, and UI. Solve the difficult problem of IoT application development. With the Python light application framework, IoT programming is no longer limited to professional software developers, and general technicians can quickly implement complex IoT requirements.
For more HaaS Python introduction and development materials, see [HaaS Python official website](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b16145223.0.0.595660b1dZDX71#/?from=corp), [Creative Case](https://haas.iot.aliyun.com/solution?from=crop), [Hardware Building Blocks](https://haas.iot.aliyun.com/solution/hardware?from=corp)

## 安装方法
* 在[HaaS Python官网](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b50127119.0.0.4e1260b1ebMIf1#/)下载开发板对应的固件，并完成固件烧录

Download the firmware corresponding to the development board at [HaaS Python website](https://haas.iot.aliyun.com/haasapi/index.html?spm=a2cpu.b50127119.0.0.4e1260b1ebMIf1#/) and complete the firmware burning

* 在开发板上运行以下命令完成安装和使用,如果您在使用过程中遇到问题，欢迎在[github上向我们提交issue](https://github.com/alibaba/AliOS-Things/issues)，我们的工程师会及时解答

Run the following commands on the development board to complete the installation and use. If you encounter problems during use, please submit an issue to us on [github](https://github.com/alibaba/AliOS-Things/issues), Our engineers will answer in time
```
import upip
upip.install("haas-python-motorspeed")
import haas-python-motorspeed
```
# 马达测速传感器

## 一、产品简介
&emsp;&emsp;
马达测速传感器与电机，码盘组成测速模块，有遮挡，输出高电平；无遮挡，输出低电平，有了高低电平，然后通过脉冲个数来确定电机的转数。马达测速传感器广泛用于电机转速检测，脉冲计数，位置限位。
<br>

<div align="center">
<img src=./../../docs/images/motorspeed.png  width=30%/>
</div>

引脚定义
* VCC：3.3V<br>
* GND：地<br>
* OUT：输出信号,有遮挡，输出高电平；无遮挡，输出低电平
<br>

## 二、技术参数
* 工作电压：3.3V-5V<br>
* 驱动能力：驱动能力强，超过 15mA<br>
* 输出形式：数字开关量输出（0和1）<br>
* 工作温度：-20°C~85°C<br>
* 比较器：宽电压LM393<br>
* 电路板尺寸：2.3cm*2cm<br>

## 三、软件接口

马达测速传感器 HaaS Python驱动：[下载地址](https://github.com/alibaba/AliOS-Things/tree/master/haas_lib_bundles/python/libraries/motorspeed)
<br>

### MOTORSPEED(gpioObj) - 创建马达测速传感器对象
<br>

* 函数原型

> motorspeedObj = MOTORSPEED(gpioObj,func)

* 参数说明

参数|类型|必选参数？|说明|
|:-:|:-:|:-:|:-|
|gpioObj|GPIO|是|调用此函数前需确保gpioObj对象已经处于open状态|
|func|回调函数|否|默认无回调函数，如果需要使用中断回调处理，则需要传入该参数|

* 返回值

> MOTORSPEED对象成功，返回MOTORSPEED对象；MOTORSPEED对象创建失败，抛出Exception

* 示例代码-无回调函数
```python
import motorspeed
from driver import GPIO

print("Testing motorspeed detector ...")
gpioDev = GPIO()
gpioDev.open("motorspeed")
motorspeedDev = motorspeed.MOTORSPEED(gpioDev)
```

* 输出
```python
Testing motorspeed detector ...
```
</br>

* 示例代码-有回调函数
```python
import motorspeed
from driver import GPIO

speed_cnts = 0

def speed_handler():
    global speed_cnts
    speed_cnts += 1
    print('cnts: %d'%speed_cnts)

print("Testing motorspeed detector ...")
gpioDev = GPIO()
gpioDev.open("motorspeed")
motorspeedDev = motorspeed.MOTORSPEED(gpioDev,speed_handler)
```

* 输出
```python
Testing motorspeed detector ...
cnts: 0
cnts: 1
cnts: 2
cnts: 3
cnts: 4

```
</br>

### objectDetection() - 检查马达测速传感器的状态
<br>

* 函数功能：

> 检查马达测速传感器的状态

* 函数原型：

> MOTORSPEED.objectDetection()

* 参数说明：
> 无

* 返回值：
> 成功返回MOTORSPEED检测状态，0 - 无障碍物 1 - 有障碍物；失败抛出Exception

* 示例：

```python
import motorspeed
from driver import GPIO

print("Testing motorspeed detector ...")
gpioDev = GPIO()
gpioDev.open("motorspeed")
motorspeedDev = motorspeed.MOTORSPEED(gpioDev)
print(motorspeedDev.objectDetection())
```

* 输出
```python
Testing motorspeed detector ...
0
```

</br>

## 四、接口案例

此使用实例在board.json中定义了名为MOTORSPEED的GPIO类型的对象。在Python脚本中获取传感器的输出状态并打印在日志中。

* 案例代码
```python
{
  "name": "board-name",
  "version": "1.0.0",
  "io": {
   "motorspeed": {
        "type": "GPIO",
        "port": 2,
        "dir": "irq",
        "pull": "pullup",
        "intMode": "falling"
    }
  },
}
```

```python
import motorspeed
from driver import GPIO
import utime

speed_cnts = 0
def speed_handler(data):
    global speed_cnts
    speed_cnts += 1
    print('cnts: %d'%speed_cnts)
print("Testing motorspeed detector ...")
gpioDev = GPIO()
gpioDev.open("motorspeed")
motorspeedDev = motorspeed.MOTORSPEED(gpioDev,speed_handler)
while 1:
    print(motorspeedDev.objectDetection())
    utime.sleep(1)
```

* 输出
```log
Testing motorspeed detector ...
0
0
0
1
cnts: 1
0
cnts: 2
cnts: 3
cnts: 4
cnts: 5
0
```

## 参考文献及购买链接
[1] [购买链接](https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-24362052664.33.455c1eedmwZki6&id=554539887611)
