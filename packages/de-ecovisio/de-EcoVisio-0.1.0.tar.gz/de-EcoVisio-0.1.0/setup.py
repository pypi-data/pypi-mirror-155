# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['deutschland',
 'deutschland.EcoVisio',
 'deutschland.EcoVisio.api',
 'deutschland.EcoVisio.apis',
 'deutschland.EcoVisio.model',
 'deutschland.EcoVisio.models']

package_data = \
{'': ['*']}

install_requires = \
['python-dateutil', 'urllib3>=1.25.3']

setup_kwargs = {
    'name': 'de-ecovisio',
    'version': '0.1.0',
    'description': 'Eco-Counter: Eco-Visio-API',
    'long_description': '# EcoVisio\nAPI zum [Eco-Visio-Dashboard](https://data.eco-counter.com/ParcPublic/?id=4586) von Eco-Counter. Eco-Counter ist ein Technologieunternehmen mit Hauptsitz in Lannion, in der Bretagne. Zum Unternehmen zählen Filialen in Montreal (Kanada) und in Köln. Das Untenehmen betreibt u.a. Fahrrad- und Fußgängerzähler in unterschiedlichen Ländern, die in zahlreichen deutschen Städten z.B. Angaben wie \\"Radfahrende heute\\" oder \\"Radfahrende dieses Jahr\\" ausweisen. Teilweise sind die Zähler auch vollständig unterirdisch verlegt worden (z.B. zahlreiche Fahrradzählstellen in Hessen, vgl. https://data.eco-counter.com/ParcPublic/?id=8080). \n\nGenerell findet man in Deutschland überwiegend Fahrradzähler. In Rostock gibt es daneben auch Fußgängerzähler (https://data.eco-counter.com/ParcPublic/?id=888), ebenso in Schwerin (https://data.eco-counter.com/ParcPublic/?id=6116), in Greifswald (https://data.eco-counter.com/ParcPublic/?id=6997) oder in Böblingen (https://data.eco-counter.com/ParcPublic/?id=6811). In Ludwigsburg gibt es sogar separat ausgewiesene Autozähler von Eco-Counter (https://data.eco-counter.com/ParcPublic/?id=6011). \n\nEco-Visio ist ein Analysetool zur Auswertung der Daten. Auf dem Dashboard können die Zahlen unterschiedlicher Zähler eingesehen und verglichen werden.\n\n\nThis Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:\n\n- API version: 1.0.0\n- Package version: 0.1.0\n- Build package: org.openapitools.codegen.languages.PythonClientCodegen\n\n## Requirements.\n\nPython >= 3.6\n\n## Installation & Usage\n### pip install\n\n```sh\npip install deutschland[EcoVisio]\n```\n\n### poetry install\n\n```sh\npoetry add deutschland -E EcoVisio\n```\n\n### Setuptools\n\nInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).\n\n```sh\npython setup.py install --user\n```\n(or `sudo python setup.py install` to install the package for all users)\n\n## Usage\n\nImport the package:\n```python\nfrom deutschland import EcoVisio\n```\n\n## Getting Started\n\nPlease follow the [installation procedure](#installation--usage) and then run the following:\n\n```python\n\nimport time\nfrom deutschland import EcoVisio\nfrom pprint import pprint\nfrom deutschland.EcoVisio.api import default_api\nfrom deutschland.EcoVisio.model.all_counter import AllCounter\n# Defining the host is optional and defaults to https://www.eco-visio.net/api/aladdin/1.0.0\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = EcoVisio.Configuration(\n    host = "https://www.eco-visio.net/api/aladdin/1.0.0"\n)\n\n\n\n# Enter a context with an instance of the API client\nwith EcoVisio.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = default_api.DefaultApi(api_client)\n    id_organisme = 4586 # int | Träger ID (default to 4586)\n    with_null = True # bool | Parameter ohne bekannten/dokumentierten Effekt. (optional)\n    end = "26/05/2022" # str | Spätestes interessierendes Datum (z.B. 26/05/2022). (optional)\n    begin = "01/01/2021" # str | Frühestes interessierendes Datum (z.B. 01/01/2021). (optional)\n    pratique = 1 # int | pratique i.S.v. interessierende Zählerart (z.B. 1=Fußgänger,2=Fahrräder, oder 12=Sternchen) (optional)\n\n    try:\n        # Zähler\n        api_response = api_instance.zaehler(id_organisme, with_null=with_null, end=end, begin=begin, pratique=pratique)\n        pprint(api_response)\n    except EcoVisio.ApiException as e:\n        print("Exception when calling DefaultApi->zaehler: %s\\n" % e)\n```\n\n## Documentation for API Endpoints\n\nAll URIs are relative to *https://www.eco-visio.net/api/aladdin/1.0.0*\n\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*DefaultApi* | [**zaehler**](docs/DefaultApi.md#zaehler) | **GET** /pbl/publicwebpageplus/{idOrganisme} | Zähler\n*DefaultApi* | [**zaehlerdaten**](docs/DefaultApi.md#zaehlerdaten) | **GET** /pbl/publicwebpageplus/data/1 | Zählerdaten\n\n\n## Documentation For Models\n\n - [AllCounter](docs/AllCounter.md)\n - [AllCounterInner](docs/AllCounterInner.md)\n - [AllCounterInnerPhotoInner](docs/AllCounterInnerPhotoInner.md)\n - [AllCounterInnerPratiqueInner](docs/AllCounterInnerPratiqueInner.md)\n - [Date](docs/Date.md)\n\n\n## Documentation For Authorization\n\n All endpoints do not require authorization.\n\n## Author\n\nkontakt@bund.dev\n\n\n## Notes for Large OpenAPI documents\nIf the OpenAPI document is large, imports in EcoVisio.apis and EcoVisio.models may fail with a\nRecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:\n\nSolution 1:\nUse specific imports for apis and models like:\n- `from deutschland.EcoVisio.api.default_api import DefaultApi`\n- `from deutschland.EcoVisio.model.pet import Pet`\n\nSolution 2:\nBefore importing the package, adjust the maximum recursion limit as shown below:\n```\nimport sys\nsys.setrecursionlimit(1500)\nfrom deutschland import EcoVisio\nfrom deutschland.EcoVisio.apis import *\nfrom deutschland.EcoVisio.models import *\n```\n\n',
    'author': 'BundesAPI',
    'author_email': 'kontakt@bund.dev',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/bundesAPI/eco-visio-api',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6',
}


setup(**setup_kwargs)
