test_layer_iter_values:
  -
    id: key-found
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      > )
    key: 'x'
    expected:
      - 1
    log:
      - found 'x': 1
  -
    id: key-not-found
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      > )
    key: 'y'
    expected:
      []
    log:
      - did not find 'y' in {'x': 1}
  -
    id: key-callable
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      > )
    key: itemgetter('x')
    expected:
      - 1
    log:
      -
        > called: operator.itemgetter('x')
        > returned: 1
  -
    id: values-deferred
    layer:
      > byoc.DictLayer(
      >         values=lambda: {'x': 1},
      > )
    key: 'x'
    expected:
      - 1
    log:
      - found 'x': 1
  -
    id: schema-found
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      >         schema=lambda x: {k: v+1 for k,v in x.items()},
      > )
    key: 'x'
    expected:
      - 2
    log:
      - found 'x': 2
  -
    id: schema-found
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      >         schema=lambda x: {k: v+1 for k,v in x.items()},
      > )
    key: 'y'
    expected:
      []
    log:
      - did not find 'y' in {'x': 2}
  -
    id: root-x
    layer:
      > byoc.DictLayer(
      >         values={'x': {'y': {'z': 1}}},
      >         root_key=('x', 'y'),
      > )
    key: 'x'
    expected:
      []
    log:
      - did not find 'x' in {'z': 1}
  -
    id: root-y
    layer:
      > byoc.DictLayer(
      >         values={'x': {'y': {'z': 1}}},
      >         root_key=('x', 'y'),
      > )
    key: 'y'
    expected:
      []
    log:
      - did not find 'y' in {'z': 1}
  -
    id: root-z
    layer:
      > byoc.DictLayer(
      >         values={'x': {'y': {'z': 1}}},
      >         root_key=('x', 'y'),
      > )
    key: 'z'
    expected:
      - 1
    log:
      - found 'z': 1
  -
    id: root-not-found
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      >         root_key='y',
      > )
    key: 'x'
    expected:
      []
    log:
      - did not find 'y' in {'x': 1}
  -
    id: schema-after-root-x
    layer:
      > byoc.DictLayer(
      >         values={'x': {'y': 1}},
      >         root_key='x',
      >         schema=lambda d: {'y': d['y'] + 1}
      >
      > )
    key: 'x'
    expected:
      []
    log:
      - did not find 'x' in {'y': 2}
  -
    id: schema-after-root-y
    layer:
      > byoc.DictLayer(
      >         values={'x': {'y': 1}},
      >         root_key='x',
      >         schema=lambda d: {'y': d['y'] + 1}
      >
      > )
    key: 'y'
    expected:
      - 2
    log:
      - found 'y': 2
  -
    id: location-found
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      >         location='loc',
      > )
    key: 'x'
    expected:
      - 1
    log:
      -
        > loc:
        > found 'x': 1
  -
    id: location-not-found
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      >         location='loc',
      > )
    key: 'y'
    expected:
      []
    log:
      -
        > loc:
        > did not find 'y' in {'x': 1}
  -
    id: location-root-not-found
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      >         root_key='y',
      >         location='loc',
      > )
    key: 'x'
    expected:
      []
    log:
      -
        > loc:
        > did not find 'y' in {'x': 1}
  -
    id: location-deferred
    layer:
      > byoc.DictLayer(
      >         values={'x': 1},
      >         location=lambda: 'loc',
      > )
    key: 'x'
    expected:
      - 1
    log:
      -
        > loc:
        > found 'x': 1
  -
    id: file-not-found
    layer:
      > byoc.FileNotFoundLayer('/path/to/file')
    key: 'x'
    expected:
      []
    log:
      -
        > file does not exist: /path/to/file
        > did not find 'x'

test_repr_dict_short:
  -
    dict: None
    expected: None
  -
    dict: {'a': 1}
    env:
      BYOC_VERBOSE: 1
    expected:
      > {'a': 1}
  -
    dict: {'a': 1}
    env:
      BYOC_DICT_KEY_LIMIT: 2
    expected:
      > {'a': …}
      > To see the whole dictionary, set the following environment variable: BYOC_VERBOSE=1
  -
    dict: {'a': 1, 'b': 2}
    env:
      BYOC_DICT_KEY_LIMIT: 2
    expected:
      > {'a': …, 'b': …}
      > To see the whole dictionary, set the following environment variable: BYOC_VERBOSE=1
  -
    dict: {'a': 1, 'b': 2, 'c': 3}
    env:
      BYOC_DICT_KEY_LIMIT: 2
    expected:
      > {'a': …, and 2 others}
      > To see the whole dictionary, set the following environment variable: BYOC_VERBOSE=1


