{"version":3,"file":"lib_index_js.017e1b272d1bc8be0fda.js","mappings":";;;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;ACzE+B;AAC+B;AACF;AACe;AACpE,0CAA0C,6DAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,CAAC,2DAAS,IAAI,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0DAAsB;AACxC,kBAAkB,2DAAuB;AACzC;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAmB,CAAC,4DAAS,IAAI;AACrD;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB,gDAAmB,eAAe,+BAA+B;AACjF,qDAAqD,gDAAmB,CAAC,2DAAQ,IAAI,8EAA8E,MAAM,gDAAmB;AAC5L,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;ACnC8C;AACH;AACa;AACxD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qDAAM;AACvC;AACA;AACA,YAAY,sEAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAgB;AACpC;AACA;AACA,oBAAoB,sEAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,yEAA0B,6FAA6F,yEAA0B;AACpM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wCAAwC,kBAAkB,iDAAiD;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnLoD;AACG;AACO;AACvD,mCAAmC,8DAAO;AACjD;AACA,YAAY,mEAAU;AACtB,CAAC;AACM,oCAAoC,8DAAO;AAClD;AACA,YAAY,uEAAa;AACzB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACV2C;AACW;AACJ;AACmB;AACP;AACG;AACnB;AACyB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B,eAAe,yEAAgB,EAAE,6DAAU,EAAE,gEAAW;AACxD;AACA;AACA,mCAAmC,mEAAc;AACjD;AACA,+BAA+B,wDAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,oCAAoC,+DAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,0BAA0B,2EAA2B;AACrD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B,mDAAQ;AACrC,SAAS;AACT;AACA;AACA,6BAA6B,mDAAQ;AACrC,SAAS;AACT;AACA;AACA,6BAA6B,qDAAU;AACvC,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,6BAA6B,qDAAU;AACvC,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;AClGtB,iEAAe,giBAAgiB;;;;;;;;;;;;;;ACA/iB,iEAAe,uWAAuW","sources":["webpack://jupyterlab-voice-control/./lib/commands.js","webpack://jupyterlab-voice-control/./lib/components/status.js","webpack://jupyterlab-voice-control/./lib/controller.js","webpack://jupyterlab-voice-control/./lib/icons.js","webpack://jupyterlab-voice-control/./lib/index.js","webpack://jupyterlab-voice-control/./style/icons/microphone-off.svg","webpack://jupyterlab-voice-control/./style/icons/microphone.svg"],"sourcesContent":["export function moveCursor(options) {\n    const focused = document.activeElement;\n    if (!focused) {\n        return 'Cannot move cursor: no element is focused';\n    }\n    if (typeof focused.value !== 'undefined') {\n        const input = focused;\n        if (options.to === 'start') {\n            input.setSelectionRange(0, 0);\n            input.focus();\n        }\n        if (options.to === 'end') {\n            const end = input.value.length;\n            input.setSelectionRange(end, end);\n            input.focus();\n        }\n    }\n}\nexport function typeText(options) {\n    if (typeof options.text === 'undefined') {\n        return 'No text provided';\n    }\n    const focused = document.activeElement;\n    if (!focused) {\n        return 'Cannot type: no element is focused';\n    }\n    if (typeof focused.value !== 'undefined') {\n        focused.value += options.text;\n    }\n    else {\n        for (const key of options.text) {\n            console.log(key.charCodeAt(0), key);\n            focused.dispatchEvent(new KeyboardEvent('keydown', {\n                key: key,\n                keyCode: key.charCodeAt(0),\n                code: key,\n                shiftKey: false,\n                ctrlKey: false,\n                metaKey: false,\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                which: key.charCodeAt(0)\n            }));\n        }\n    }\n}\nexport function deleteText(options) {\n    if (typeof options.what === 'undefined') {\n        return 'No \"what\" argument provided';\n    }\n    const focused = document.activeElement;\n    if (!focused) {\n        return 'Cannot delete: no element is focused';\n    }\n    if (typeof focused.value !== 'undefined') {\n        const value = focused.value;\n        const lastSpace = value.lastIndexOf(' ');\n        focused.value = value.substring(0, lastSpace);\n    }\n}\nexport function scrollBy(options) {\n    const focused = document.activeElement;\n    if (!focused) {\n        return 'Cannot scroll: no element is focused';\n    }\n    if (options.behavior == null) {\n        options.behavior = 'smooth';\n    }\n    focused.scrollBy({\n        top: ((options.topPercent || 0) / 100) * window.innerHeight,\n        left: ((options.leftPercent || 0) / 100) * window.innerWidth,\n        behavior: options.behavior\n    });\n}\n","import * as React from 'react';\nimport { ReactWidget, UseSignal } from '@jupyterlab/apputils';\nimport { GroupItem, TextItem } from '@jupyterlab/statusbar';\nimport { recognitionEnabledIcon, recognitionDisabledIcon } from '../icons';\nexport class VoiceControlStatusIndicator extends ReactWidget {\n    constructor(signal, trans, controller) {\n        super();\n        this.signal = signal;\n        this.trans = trans;\n        this.controller = controller;\n    }\n    render() {\n        return (React.createElement(UseSignal, { signal: this.signal }, (sender, status) => {\n            if (!status) {\n                status = {\n                    enabled: false\n                };\n            }\n            const icon = status.enabled\n                ? recognitionEnabledIcon\n                : recognitionDisabledIcon;\n            const text = this.trans.__('Last voice recognition result: %1 with confidence %2', status.lastResult, status.lastConfidence);\n            const shortText = this.trans.__('%1 (%2%)', status.lastResult, status.lastConfidence\n                ? Math.round(status.lastConfidence * 100)\n                : '?');\n            const controller = this.controller;\n            return (React.createElement(GroupItem, { spacing: 0, title: text, onClick: () => {\n                    controller.isEnabled\n                        ? controller.disable()\n                        : controller.enable();\n                } },\n                React.createElement(icon.react, { top: '2px', kind: 'statusBar' }),\n                status.error || status.lastResult ? (React.createElement(TextItem, { className: 'status-message', source: status.error ? status.error : shortText })) : (React.createElement(\"div\", null))));\n        }));\n    }\n}\n","import { StringExt } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport { showErrorMessage } from '@jupyterlab/apputils';\nfunction normalise(text) {\n    return text.toLowerCase().trim();\n}\nexport class VoiceController {\n    constructor(commandRegistry, trans, palette) {\n        this.commandRegistry = commandRegistry;\n        this.trans = trans;\n        this.commands = [];\n        this.counter = 0;\n        this._currentSuggestions = [];\n        this.statusChanged = new Signal(this);\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        if (!SpeechRecognition) {\n            showErrorMessage(trans.__('Speach recognition not supported'), trans.__('Your browser does not support speech recognition.'));\n            throw Error('Not supported');\n        }\n        this.recognition = new SpeechRecognition();\n        this.recognition.continuous = true;\n        this.recognition.interimResults = false;\n        this.recognition.maxAlternatives = 1;\n        this.confidenceThreshold = 0;\n        this._status = {\n            enabled: false\n        };\n        // TODO: interim results, speech synthesis for questions, edit distance,\n        // offering several options, synonyms, translations, docs\n        // TODO: undo run \"filebrowser:undo\" in notebook - need to update the prefered based on context!\n        // TODO: make everything into a command and create a phrase â†’ command map\n        this.jupyterCommands = new Map();\n        this.recognition.onresult = this.handleSpeechResult.bind(this);\n        this.recognition.onspeechend = event => {\n            console.log('speech end');\n            this.disable();\n        };\n        this.recognition.onerror = event => {\n            const title = 'Speech recognition not available';\n            switch (event.error) {\n                case 'audio-capture':\n                    showErrorMessage(title, 'Microphone not detected');\n                    break;\n                case 'not-allowed':\n                    showErrorMessage(title, 'Access to microphone was denied or blocked');\n                    break;\n                case 'no-speech':\n                    // showErrorMessage(title, 'No speech was detected');\n                    this._status.error = 'No speech was detected';\n                    break;\n            }\n        };\n        commandRegistry.commandChanged.connect(() => {\n            this.updateGrammar();\n        });\n        this.updateGrammar();\n    }\n    matchPhrase(phrase) {\n        var _a, _b;\n        // First try to match against our voice commands which get a higher priority\n        for (const command of this.commands) {\n            const match = phrase.match(new RegExp(command.phrase, 'i'));\n            if (match != null) {\n                if (!this.commandRegistry.hasCommand(command.command)) {\n                    this._status.error = this.trans.__('Matched %1 phrase but command %2 is not in the registry', command.phrase, command.command);\n                    return [];\n                }\n                const args = Object.assign({}, command.arguments);\n                if (match.groups) {\n                    Object.assign(args, match.groups);\n                }\n                this.commandRegistry.execute(command.command, args);\n                return [];\n            }\n        }\n        // If it did not succeed, match against all JupyterLab commands\n        const command = this.jupyterCommands.get(phrase);\n        if (command) {\n            this.commandRegistry.execute(command.id);\n            return [];\n        }\n        else {\n            let best = 999;\n            let bestCandidate = null;\n            for (const [candidateLabel, command] of this.jupyterCommands.entries()) {\n                const matchScore = Math.min(((_a = StringExt.matchSumOfDeltas(candidateLabel, phrase)) === null || _a === void 0 ? void 0 : _a.score) || Infinity, ((_b = StringExt.matchSumOfDeltas(normalise(command.caption), phrase)) === null || _b === void 0 ? void 0 : _b.score) || Infinity);\n                if (matchScore < best) {\n                    best = matchScore;\n                    bestCandidate = command;\n                }\n            }\n            if (bestCandidate) {\n                this._status.error = this.trans.__('Did you mean %1?', bestCandidate.label);\n                return [\n                    {\n                        id: bestCandidate.id,\n                        label: bestCandidate.label,\n                        score: best\n                    }\n                ];\n            }\n        }\n        return [];\n    }\n    handleSpeechResult(event) {\n        const result = event.results[this.counter][0];\n        const speech = normalise(result.transcript);\n        this._status.lastResult = speech;\n        this._status.lastConfidence = result.confidence;\n        this.counter += 1;\n        if (result.confidence < this.confidenceThreshold) {\n            this._status.error = 'Too low confidence. Speak up?';\n            this.statusChanged.emit(this._status);\n            console.log('Discarding the result due to too low confidence');\n            return;\n        }\n        this._status.error = undefined;\n        this._currentSuggestions = this.matchPhrase(speech);\n        this.statusChanged.emit(this._status);\n    }\n    acceptSuggestion(options) {\n        const option = options.option != null ? options.option - 1 : 0;\n        this.commandRegistry.execute(this._currentSuggestions[option].id);\n        this._currentSuggestions = [];\n    }\n    set language(value) {\n        this.recognition.lang = value;\n    }\n    updateGrammar() {\n        // const SpeechGrammarList = window.SpeechGrammarList || (window as any).webkitSpeechGrammarList;\n        this.jupyterCommands.clear();\n        // const commands =\n        this.commandRegistry\n            .listCommands()\n            .filter(commandID => this.commandRegistry.isVisible(commandID))\n            .map(commandID => {\n            try {\n                const label = this.commandRegistry.label(commandID);\n                const caption = this.commandRegistry.caption(commandID);\n                if (label) {\n                    this.jupyterCommands.set(normalise(label), {\n                        id: commandID,\n                        caption: caption,\n                        label: label\n                    });\n                }\n                return label;\n            }\n            catch (e) {\n                return null;\n            }\n        })\n            .filter(commandID => !!commandID);\n        // const grammar = '#JSGF V1.0; grammar commands; public <command> = ' + commands.join(' | ') + ' ;'\n        // const speechRecognitionList = new SpeechGrammarList();\n        // speechRecognitionList.addFromString(grammar, 1);\n        //this.recognition.grammars = speechRecognitionList;\n    }\n    get isEnabled() {\n        return this._status.enabled;\n    }\n    configure(settings) {\n        console.log('jupyterlab-voice-control settings loaded:', settings.composite);\n        // TODO\n        this.language = 'en-US';\n        this.confidenceThreshold = settings.composite.confidenceThreshold;\n        this.commands = settings.composite.commands;\n    }\n    enable() {\n        this._status.enabled = true;\n        this.recognition.start();\n        this.counter = 0;\n        this.statusChanged.emit(this._status);\n    }\n    disable() {\n        this._status.enabled = false;\n        this.recognition.stop();\n        this.statusChanged.emit(this._status);\n    }\n}\n","import { LabIcon } from '@jupyterlab/ui-components';\nimport microphone from '../style/icons/microphone.svg';\nimport microphoneOff from '../style/icons/microphone-off.svg';\nexport const recognitionEnabledIcon = new LabIcon({\n    name: 'voice:enabled',\n    svgstr: microphone\n});\nexport const recognitionDisabledIcon = new LabIcon({\n    name: 'voice:disabled',\n    svgstr: microphoneOff\n});\n","import { JSONExt } from '@lumino/coreutils';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { VoiceControlStatusIndicator } from './components/status';\nimport { VoiceController } from './controller';\nimport { scrollBy, typeText, moveCursor, deleteText } from './commands';\nconst PLUGIN_ID = 'jupyterlab-voice-control:plugin';\n/**\n * Initialization data for the jupyterlab-voice-control extension.\n */\nconst plugin = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [ICommandPalette],\n    optional: [ISettingRegistry, IStatusBar, ITranslator],\n    activate: (app, palette, settingRegistry, statusBar, translator) => {\n        console.log('JupyterLab extension jupyterlab-voice-control is activated!');\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab-voice-control');\n        const controller = new VoiceController(app.commands, trans, palette);\n        let canonical;\n        /**\n         * Populate the plugin's schema defaults.\n         */\n        const populate = (schema) => {\n            schema.properties.commands.items.properties.command.enum = app.commands.listCommands();\n        };\n        if (settingRegistry) {\n            settingRegistry\n                .load(plugin.id)\n                .then(controller.configure.bind(controller))\n                .catch(reason => {\n                console.error('Failed to load settings for jupyterlab-voice-control.', reason);\n            });\n            settingRegistry.transform(plugin.id, {\n                fetch: plugin => {\n                    // Only override the canonical schema the first time.\n                    if (!canonical) {\n                        canonical = JSONExt.deepCopy(plugin.schema);\n                        populate(canonical);\n                    }\n                    return {\n                        data: plugin.data,\n                        id: plugin.id,\n                        raw: plugin.raw,\n                        schema: canonical,\n                        version: plugin.version\n                    };\n                }\n            });\n        }\n        console.log(controller.statusChanged);\n        if (statusBar) {\n            statusBar.registerStatusItem(PLUGIN_ID, {\n                item: new VoiceControlStatusIndicator(controller.statusChanged, trans, controller),\n                rank: 900\n            });\n        }\n        app.commands.addCommand('vc:start-listening', {\n            label: trans.__('Enable voice control'),\n            execute: () => controller.enable(),\n            isVisible: () => !controller.isEnabled\n        });\n        app.commands.addCommand('vc:stop-listening', {\n            label: trans.__('Enable voice control'),\n            execute: () => controller.enable(),\n            isVisible: () => !controller.isEnabled\n        });\n        app.commands.addCommand('vc:scroll-by', {\n            label: trans.__('Scroll Focused Element By'),\n            execute: args => scrollBy(args)\n        });\n        app.commands.addCommand('vc:type-text', {\n            label: trans.__('Type Text Into Focused Element'),\n            execute: args => typeText(args)\n        });\n        app.commands.addCommand('vc:delete-text', {\n            label: trans.__('Delete Text From Focused Element'),\n            execute: args => deleteText(args)\n        });\n        app.commands.addCommand('vc:accept-suggestion', {\n            label: trans.__('Accept Voice Control Suggestion'),\n            execute: args => controller.acceptSuggestion(args)\n        });\n        app.commands.addCommand('vc:open-notebook', {\n            label: trans.__('Open Notebook By Name'),\n            execute: args => app.commands.execute('filebrowser:open-path', {\n                path: args.path + '.ipynb'\n            })\n        });\n        app.commands.addCommand('vc:move-cursor', {\n            label: trans.__('Move Cursor In Editor'),\n            execute: args => moveCursor(args)\n        });\n    }\n};\nexport default plugin;\n","export default \"<svg width=\\\"16\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <g class=\\\"jp-icon3 jp-icon-selectable\\\" fill=\\\"#4F4F4F\\\">\\n    <path d=\\\"M19,11C19,12.19 18.66,13.3 18.1,14.28L16.87,13.05C17.14,12.43 17.3,11.74 17.3,11H19M15,11.16L9,5.18V5A3,3 0 0,1 12,2A3,3 0 0,1 15,5V11L15,11.16M4.27,3L21,19.73L19.73,21L15.54,16.81C14.77,17.27 13.91,17.58 13,17.72V21H11V17.72C7.72,17.23 5,14.41 5,11H6.7C6.7,14 9.24,16.1 12,16.1C12.81,16.1 13.6,15.91 14.31,15.58L12.65,13.92L12,14A3,3 0 0,1 9,11V10.28L3,4.27L4.27,3Z\\\" />\\n  </g>\\n</svg>\";","export default \"<svg width=\\\"16\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <g class=\\\"jp-icon3 jp-icon-selectable\\\" fill=\\\"#4F4F4F\\\">\\n    <path d=\\\"M12,2A3,3 0 0,1 15,5V11A3,3 0 0,1 12,14A3,3 0 0,1 9,11V5A3,3 0 0,1 12,2M19,11C19,14.53 16.39,17.44 13,17.93V21H11V17.93C7.61,17.44 5,14.53 5,11H7A5,5 0 0,0 12,16A5,5 0 0,0 17,11H19Z\\\" />\\n  </g>\\n</svg>\";"],"names":[],"sourceRoot":""}