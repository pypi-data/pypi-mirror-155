env:
    global:
        - secure: "Zw+fTmL69CizALGgVPaQxW1vopeFZMkCRepylg1bFXoboMedpwK0tfKsmJsvZCN+sPe0YSX2MVUyig4EO7w3pPUzHqFyQoNHO3Gp276wKlXzU7BLLZfxUvKoyHT5EUUyE7vdJKxbVSOqTfPM64ZDAiNB5WykNo6Sct1Z0lR0+rA1o/ErWkI0Y8+YMODzm4FdL/SFObUqXffjpAnQS5JBKniBu7oLPV6vNF3y00DtyTqaXB8/PE5JRz+3J5tS9cmUVRzm7jjZlmzz8y7h4eevSgZQ56z8LmjL8++wfiEDYHFCVIqOQkKWLwZ/Ox8U+RQ8PnLarbtGbvCj60t3z8exPhKC3x9iL39Qp8kCBmILrGa/uePYUpbYNDmy2YNm7SR2lZyHjzNkvxDILPUM2RH3Cl66uTvpEBCqC5IZq60YF1FYa0LNkdk1EMMEKtoqfKg+VZm/95iS9fWE37Qkx03TV8J5wGbTAfwOwbPsKDuUbdPrTUYCSO1VtA5gTlaFy8WaSvOsk+DyrcZG1UZCGHXAK+PL+D4cA7JJ3m4nZ/h8KAgn7syg4cbnQ1ODQ2XmTPMenj/Zn15UgROeFHG+0E/4rKrbvypqZwyr0BgDRolikjPeDMDy8ZXYHXM4RkCRRg9xpP0S2ffT1Cu1L77zHx/fAeJXhLmweyI6iXkW6JhlxFg="

        - secure: "Ual0HSMUItgcm3Uco/bDW+GR3cn3GYbeG0Wpfd9J3NUnvu7X28+u9y0xC9SZwTvKWb+8Shr/pYFgouNB1TtCFfxq0Rps6OcdLm1y4ZEwJKUb6ulsHV86N3M8w9w+ylHwWaW7IbxU7xj1PhWd/wpT7kW+IBoBa2BkXfuZyNEpvlZ1YIadsx+qC8maxQ6TrbuQWt0vsDD0UrVeRaPv3ImwS5cxUJYZ8881Jf5RUb0YVYr0iD6io4qXPvgCZ5Kuj3buCjR+Qcx0NWE8bZXWOD0ggpSf1CQX2ZjxDdkhgFtJsnnrVq7f2+S4stjOZpVKIcMlXcUMQ5VRVyXTGF7rtZytJjNfKzA9julPM5kVJWh/NfC+JJZJ9kgqlgC0hr7418Ty902Pwi7QkoJ4RjBty3FbA4Hl4EkWUElj/KDdYYe0N1Vty8dvJqNDQNdJFk0bVWSMd9A/clkSP1nQEMvA1r8FwUECvrSZbjGdn4LtDQUXZGjrbbnLKu0WXag7z+LjCxUBx0BvxxkZX18/JVvrsKHE7fjjbgfa87OBMtcNdXgIKFXdpB2VI8MahjFG/B1Idj8N8Fcicyp8yuvwD2FEpT08M3KaJhvtvfn0+7WL8bSKSNQnbGKMPCwS9TrnHnTNvitXtB2EpGKnG2I/MXICV3uogEbKvPG4pFsdDLchHGOMGb0="

        - secure: "YFu4Xw+jtLHmIwlYozZjhcrCe3TUSfG9lXlotEA9NSv69jbp9R7KOHPDWyDOVvX2z8Y1b6P2DAINTKVZ3TUpCEM7ogWZpvvl5mcrpzW7Uk7vQTYq6aDDwsekNVxfKl6baQas/CDv5DEq3HbGDZUX7Wuho0a77lnfjLPEMj+6R8LmyljiSOsD8WBD3f/LvjJWy0St9JhCIUpKPUV4d5Jv9UObwOLt7AEGwqYdnF3FoSN2DxjDgQ8TTWDfi7aH/3OmuSwIXG2g7rfr+U8Fx7TWwKUtmqF0W16YiWRkcm9n8HefKXa7WBJ+oO9MynpHWXDcgLuPfu9rENagpdlsvvyJfsZRJs1xjg24EM8zrQl8IB7KRmT5ehFYM90OlirKvnoJ2ywquz1IsCKLk8/ShcWfm3kfuNkKz+I+he/pCwhQOqVBTh9I/JWFN/1V9RDzD5S05sU4G/tPN8kdfNd7qw+dInJPz75tpTgWV38yQwFRQ1tWM0KV/buLNiSt0etLl8C0nwXHQuJY8nMj2gTCiD3gcP3YQerUvVem8ZEQL5qosqPj/nRbwqYzTz4qSLAeCLk7AbZUg9vXKlFMKswIiZNjJRQfLPmgoWkAGa4+haG82YdCuSB7CFYf7NZ67O6vil2GXB/v1ovEr2rGOsz97k4s2ijyDV1UKH1aMihdsH/2oXo="

        - "PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'"
        - TEST_DEPENDS="numpy==1.11.1"
        - BDIST_PARAMS=""
        - CONFIG_PATH="multibuild_config.sh"
        - USE_CCACHE=1
        - PLAT=x86_64
        - UNICODE_WIDTH=32
        - MB_PYTHON_VERSION=3.7

# Host Python is only used in staging
language: generic
services: docker
# https://docs.travis-ci.com/user/reference/xenial
dist: xenial

# Save some time, we and setup check them out on demand instead
# https://docs.travis-ci.com/user/customizing-the-build/#Git-Clone-Depth
git:
    submodules: false

# https://docs.travis-ci.com/user/caching
cache:
  directories:
    # `cache: ccache: true` has no effect if `language:` is not `c` or `cpp`
    - $HOME/.ccache
    - $HOME/.cache/pip
    - $HOME/download
    - $HOME/.pip-cache
    - $HOME/gpg_install_prefix

# Add more cache stages (s2 etc) and corresponding OSX jobs like s1
# if brew builds start to take longer than one Travis time limit
stages:
  - s1
  - final

matrix:
  fast_finish: true
  include:

    - os: osx
      osx_image: xcode8.3
      stage: s1
      workspaces:
        create:
          name: brew_cache
          paths:
            # https://stackoverflow.com/questions/39930171/cache-brew-builds-with-travis-ci
            - $HOME/Library/Caches/Homebrew
            - /usr/local/Homebrew/
            # used in OSX custom build script dealing with local bottle caching
            - $HOME/local_bottle_metadata
      #workspaces share within the same build, cache shares between builds
      cache:
        directories:
          # `cache: ccache: true` has no effect if `language:` is not `c` or `cpp`
          - $HOME/.ccache
          # https://stackoverflow.com/questions/39930171/cache-brew-builds-with-travis-ci
          - $HOME/Library/Caches/Homebrew
          - /usr/local/Homebrew/
          # used in OSX custom build script dealing with local bottle caching
          - $HOME/local_bottle_metadata

    # default builds for MacOS
    # further jobs in the list will use the same stage until the next assignment
    - stage: final
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=2.7
      workspaces:
        use: brew_cache
    - os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.5
      workspaces:
        use: brew_cache
    - os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.6
      workspaces:
        use: brew_cache
    - os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.7
      workspaces:
        use: brew_cache
    - os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.8
      workspaces:
        use: brew_cache
      
    # builds for Linux
    - os: linux
      # the following jobs will use the same stage name by default
      stage: s1
      env:
        - MB_PYTHON_VERSION=2.7
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=2.7
    #    - UNICODE_WIDTH=16
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=2.7
    #    - PLAT=i686
    #    - UNICODE_WIDTH=16
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.4
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.4
    #    - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - PLAT=i686

# The first line is printed in the folding header in Travis output
before_install: |
    # Check out and prepare the source
    set -e
    set -x

    # Hack, why don't we have pip here?
    #git clone https://github.com/matthew-brett/multibuild.git 
    #source multibuild/common_utils.sh
    
    source dev/factory_utils.sh

    if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then 
        echo "do nothing"
        #brew update
        #brew install opencv
        #osx_staging_helper
    elif [[ "$TRAVIS_OS_NAME" = "linux" ]]; then 
        if [[ "$(which python)" = "" ]]; then
            alias python='python3'
            alias pip='pip3'
        fi
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python get-pip.py --user
        python -m pip install ubelt --user
        setup_staging_helper
    fi

    #REPO_DIR=${_STAGED_REPO}
    #source multibuild/common_utils.sh
    #source multibuild/travis_steps.sh
    #
    source dev/stage_multibuild.sh

    if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then 
        osx_staging_helper_clean_brew_cache
    fi
    
    # Not interested in travis internal scripts' output
    set +x

install: |
    #set +e
    echo "REPO_DIR = $REPO_DIR"
    echo "PLAT = $PLAT"

    # Effectively calls (build_bdist_wheel) -> (build_wheel_cmd "bdist_wheel_cmd" $@), 
    # which is in multibuild/common_utils.sh ->
    # This calls pre_build and build_wheel_cmd, which both live in multibuild_config.sh
    set -x
    build_wheel $REPO_DIR $PLAT
    set +x

    #source run_multibuild.sh
    #set -x
    #echo "--- BEGIN EXEC BUILD WHEEL ---"
    #if [ -n "$IS_OSX" ]; then
    #    cd "${_STAGED_REPO}"
    #fi
    #build_wheel $REPO_DIR $PLAT
    #mkdir -p $_SOURCE_REPO/dist
    #mkdir -p $_SOURCE_REPO/wheelhouse
    #cp ${_STAGED_REPO}/dist/*.whl $_SOURCE_REPO/dist
    #cp ${_STAGED_REPO}/dist/*.whl $_SOURCE_REPO/wheelhouse
    echo "--- END EXEC BUILD WHEEL ---"
    

script: |
    # Install and run tests
    set -x
    echo "--- BEGIN INSTALL RUN ---"
    install_run $PLAT && rc=$? || rc=$?
    echo "--- END INSTALL RUN ---"
    set +x

    #otherwise, Travis logic terminates prematurely
    #https://travis-ci.community/t/shell-session-update-command-not-found-in-build-log-causes-build-to-fail-if-trap-err-is-set/817
    trap ERR

    test "$rc" -eq 0

before_cache: |
    # Cleanup dirs to be cached
    set -e; set -x
    if [ -n "$IS_OSX" ]; then

        # When Taps is cached, this dir causes "Error: file exists" on `brew update`
        if [ -e "$(brew --repository)/Library/Taps/homebrew/homebrew-cask/homebrew-cask" ]; then
            rm -rf "$(brew --repository)/Library/Taps/homebrew/homebrew-cask/homebrew-cask"
        fi

        brew_cache_cleanup

    fi
    set +x; set +e

after_success: 
    - echo "AN_UNSECURE_VAR = $AN_UNSECURE_VAR"
    - echo "SOMEVAR = $SOMEVAR"
    - echo "TEST_DEPENDS = $TEST_DEPENDS"
    - echo "TWINE_USERNAME = $TWINE_USERNAME"
    - echo "TRAVIS_TAG = ${TRAVIS_TAG}"
    - echo "TRAVIS_BRANCH = ${TRAVIS_BRANCH}"
    - | 
      __heredoc__='''
      python -c "import yaml; yaml.safe_load(open('.travis.yml'))"

      ''' # '
    - |
        TARGET_BRANCH="release"
        TARGET_BRANCH="dev/wheels"
        if [ "$TRAVIS_BRANCH" == "$TARGET_BRANCH" ]; then
            set +x
            if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
              pip install pyopenssl ndg-httpsclient pyasn1 -U --user
              pip install requests[security] --user
              pip install twine --user
              pip install six -U --user
            fi

            if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
              pip install twine
              pip install --upgrade pyOpenSSL
            fi

            echo "TRAVIS_BUILD_DIR $TRAVIS_BUILD_DIR"
            twine upload --verbose -u "${TWINE_USERNAME}" -p "${TWINE_PASSWORD}" --skip-existing ${TRAVIS_BUILD_DIR}/wheelhouse/pyhesaff*
            #twine upload -u "${TWINE_USERNAME}" -p "${TWINE_PASSWORD}" --skip-existing wheelhouse/pyhesaff*
        else
            echo "Tag not set, deployment skipped."
        fi
