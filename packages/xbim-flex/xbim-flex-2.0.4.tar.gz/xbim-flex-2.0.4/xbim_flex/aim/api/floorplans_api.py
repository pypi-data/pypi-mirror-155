"""
    XBIM Flex API v2

    This is the XBIM Flex Swagger service where you can explore the REST API for the platform.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: info@xbim.net
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from xbim_flex.aim.api_client import ApiClient, Endpoint as _Endpoint
from xbim_flex.aim.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from xbim_flex.aim.model.floorplans_get_floor_plan_request import FloorplansGetFloorPlanRequest


class FloorplansApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.floorplans_get_floor_plan_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/aim/2.0/{tenantId}/floorplans/level/{assetModelId}/{entityId}",
                'operation_id': 'floorplans_get_floor_plan',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant_id',
                    'asset_model_id',
                    'entity_id',
                    'region',
                    'floorplans_get_floor_plan_request',
                ],
                'required': [
                    'tenant_id',
                    'asset_model_id',
                    'entity_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'tenant_id':
                        (str,),
                    'asset_model_id':
                        (int,),
                    'entity_id':
                        (int,),
                    'region':
                        (str,),
                    'floorplans_get_floor_plan_request':
                        (FloorplansGetFloorPlanRequest,),
                },
                'attribute_map': {
                    'tenant_id': 'tenantId',
                    'asset_model_id': 'assetModelId',
                    'entity_id': 'entityId',
                    'region': 'region',
                },
                'location_map': {
                    'tenant_id': 'path',
                    'asset_model_id': 'path',
                    'entity_id': 'path',
                    'region': 'path',
                    'floorplans_get_floor_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/svg+xml'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.floorplans_get_space_floor_plan_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/aim/2.0/{tenantId}/floorplans/space/{assetModelId}/{entityId}",
                'operation_id': 'floorplans_get_space_floor_plan',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant_id',
                    'asset_model_id',
                    'entity_id',
                    'region',
                    'floorplans_get_floor_plan_request',
                ],
                'required': [
                    'tenant_id',
                    'asset_model_id',
                    'entity_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'tenant_id':
                        (str,),
                    'asset_model_id':
                        (int,),
                    'entity_id':
                        (int,),
                    'region':
                        (str,),
                    'floorplans_get_floor_plan_request':
                        (FloorplansGetFloorPlanRequest,),
                },
                'attribute_map': {
                    'tenant_id': 'tenantId',
                    'asset_model_id': 'assetModelId',
                    'entity_id': 'entityId',
                    'region': 'region',
                },
                'location_map': {
                    'tenant_id': 'path',
                    'asset_model_id': 'path',
                    'entity_id': 'path',
                    'region': 'path',
                    'floorplans_get_floor_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/svg+xml'
                ],
                'content_type': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )

    def floorplans_get_floor_plan(
        self,
        tenant_id,
        asset_model_id,
        entity_id,
        region="UK",
        **kwargs
    ):
        """Get Floor plan  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Get Floor plan.<br/>Gets floor plan as SVG image. Element of SVG have encoded identity allowing to implement custom interactions  where more data can be retrieved from Flex API.<br/>Return Type: <b>string</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.floorplans_get_floor_plan(tenant_id, asset_model_id, entity_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)
            asset_model_id (int):
            entity_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            floorplans_get_floor_plan_request (FloorplansGetFloorPlanRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant_id'] = \
            tenant_id
        kwargs['asset_model_id'] = \
            asset_model_id
        kwargs['entity_id'] = \
            entity_id
        kwargs['region'] = \
            region
        return self.floorplans_get_floor_plan_endpoint.call_with_http_info(**kwargs)

    def floorplans_get_space_floor_plan(
        self,
        tenant_id,
        asset_model_id,
        entity_id,
        region="UK",
        **kwargs
    ):
        """Get Room plan  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Get Room plan.<br/>Gets space floor plan as SVG image. Element of SVG have encoded identity allowing to implement custom interactions  where more data can be retrieved from Flex API.<br/>Return Type: <b>string</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.floorplans_get_space_floor_plan(tenant_id, asset_model_id, entity_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)
            asset_model_id (int):
            entity_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            floorplans_get_floor_plan_request (FloorplansGetFloorPlanRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant_id'] = \
            tenant_id
        kwargs['asset_model_id'] = \
            asset_model_id
        kwargs['entity_id'] = \
            entity_id
        kwargs['region'] = \
            region
        return self.floorplans_get_space_floor_plan_endpoint.call_with_http_info(**kwargs)

