"""
    Xbim Flex Identity API 2.0

    Global management and user services for xbim Flex Tenants  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: info@xbim.net
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from xbim_flex.identity.api_client import ApiClient, Endpoint as _Endpoint
from xbim_flex.identity.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from xbim_flex.identity.model.o_data_user_list import ODataUserList
from xbim_flex.identity.model.user import User
from xbim_flex.identity.model.user_create import UserCreate


class UsersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.id20_users_get_endpoint = _Endpoint(
            settings={
                'response_type': (ODataUserList,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Users",
                'operation_id': 'id20_users_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'expand',
                    'filter',
                    'select',
                    'orderby',
                    'top',
                    'skip',
                    'count',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'expand':
                        (str,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                    'orderby':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'count':
                        (bool,),
                },
                'attribute_map': {
                    'expand': '$expand',
                    'filter': '$filter',
                    'select': '$select',
                    'orderby': '$orderby',
                    'top': '$top',
                    'skip': '$skip',
                    'count': '$count',
                },
                'location_map': {
                    'expand': 'query',
                    'filter': 'query',
                    'select': 'query',
                    'orderby': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'count': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id20_users_get_by_external_id_external_idexternal_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Users/GetByExternalId(externalId='{externalId}')",
                'operation_id': 'id20_users_get_by_external_id_external_idexternal_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_id',
                    'expand',
                    'select',
                ],
                'required': [
                    'external_id',
                ],
                'nullable': [
                    'external_id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_id':
                        (str, none_type,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'external_id': 'externalId',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'external_id': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id20_users_post_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Users",
                'operation_id': 'id20_users_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_create',
                    'expand',
                    'select',
                ],
                'required': [
                    'user_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_create':
                        (UserCreate,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'user_create': 'body',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.id20_users_put_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Users",
                'operation_id': 'id20_users_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_create',
                    'expand',
                    'select',
                ],
                'required': [
                    'user_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_create':
                        (UserCreate,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'user_create': 'body',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.id20_users_user_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Users({userId})",
                'operation_id': 'id20_users_user_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'expand',
                    'select',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'userId',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'user_id': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def id20_users_get(
        self,
        **kwargs
    ):
        """List Users  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>List Users.<br/>Return Type: <b>ODataUserList</b><br/>For more information about OData responses <a href='https://www.odata.org/getting-started/understand-odata-in-6-steps/'>link</a>.<br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_users_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 5.. [optional]
            filter (str): Restricts the set of items returned. The maximum number of expressions is 1000. The allowed functions are: allfunctions.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            orderby (str): Specifies the order in which items are returned. The maximum number of expressions is 5.. [optional]
            top (int): Limits the number of items returned from a collection. The maximum value is 1000.. [optional]
            skip (int): Excludes the specified number of items of the queried collection from the result.. [optional]
            count (bool): Indicates whether the total count of items within a collection are returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ODataUserList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.id20_users_get_endpoint.call_with_http_info(**kwargs)

    def id20_users_get_by_external_id_external_idexternal_id_get(
        self,
        external_id,
        **kwargs
    ):
        """Lookup user  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Lookup user.<br/>Gets the specified User by their external key.<br/>Return Type: <b>User</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_users_get_by_external_id_external_idexternal_id_get(external_id, async_req=True)
        >>> result = thread.get()

        Args:
            external_id (str, none_type): Optional external login ID. This can be used as an alternative key by master users

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 5.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['external_id'] = \
            external_id
        return self.id20_users_get_by_external_id_external_idexternal_id_get_endpoint.call_with_http_info(**kwargs)

    def id20_users_post(
        self,
        user_create,
        **kwargs
    ):
        """Create User  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Create User.<br/>Creates a new user.<br/>Return Type: <b>User</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_users_post(user_create, async_req=True)
        >>> result = thread.get()

        Args:
            user_create (UserCreate): 

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_create'] = \
            user_create
        return self.id20_users_post_endpoint.call_with_http_info(**kwargs)

    def id20_users_put(
        self,
        user_create,
        **kwargs
    ):
        """Update User  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Update User.<br/>Gets or creates the user based on the external identity. Only usable by master users.   User. ExternalIdentity is required for this call..<br/>Return Type: <b>User</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_users_put(user_create, async_req=True)
        >>> result = thread.get()

        Args:
            user_create (UserCreate): User to get or create based on the User.ExternalIdentity

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_create'] = \
            user_create
        return self.id20_users_put_endpoint.call_with_http_info(**kwargs)

    def id20_users_user_id_get(
        self,
        user_id,
        **kwargs
    ):
        """Show User  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Show User.<br/>Gets the specified User by their key.<br/>Return Type: <b>User</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_users_user_id_get(user_id, async_req=True)
        >>> result = thread.get()

        Args:
            user_id (str): The key.

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 5.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_id'] = \
            user_id
        return self.id20_users_user_id_get_endpoint.call_with_http_info(**kwargs)

