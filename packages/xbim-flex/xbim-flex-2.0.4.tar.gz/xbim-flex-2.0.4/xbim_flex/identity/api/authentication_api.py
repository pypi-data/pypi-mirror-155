"""
    Xbim Flex Identity API 2.0

    Global management and user services for xbim Flex Tenants  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: info@xbim.net
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from xbim_flex.identity.api_client import ApiClient, Endpoint as _Endpoint
from xbim_flex.identity.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from xbim_flex.identity.model.token_err_response import TokenErrResponse
from xbim_flex.identity.model.token_response import TokenResponse


class AuthenticationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_authorization_token_endpoint = _Endpoint(
            settings={
                'response_type': (TokenResponse,),
                'auth': [],
                'endpoint_path': "/id/2.0/tokens",
                'operation_id': 'get_authorization_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'client_secret',
                    'grant_type',
                    'scope',
                    'user_id',
                    'idp_id',
                ],
                'required': [
                    'client_id',
                    'client_secret',
                    'grant_type',
                    'scope',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'client_secret':
                        (str,),
                    'grant_type':
                        (str,),
                    'scope':
                        (str,),
                    'user_id':
                        (str,),
                    'idp_id':
                        (str,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'client_secret': 'client_secret',
                    'grant_type': 'grant_type',
                    'scope': 'scope',
                    'user_id': 'user_id',
                    'idp_id': 'idp_id',
                },
                'location_map': {
                    'client_id': 'form',
                    'client_secret': 'form',
                    'grant_type': 'form',
                    'scope': 'form',
                    'user_id': 'form',
                    'idp_id': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )

    def get_authorization_token(
        self,
        client_id,
        client_secret,
        scope,
        grant_type="master",
        **kwargs
    ):
        """Get token  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Get token.<br/>Gets an access token using a non-interactive flow. Only available for clients with secrets and owning Master. When no user ID is supplied, master owner user is logged in. Client can only sign in a user created in the same Master..<br/>Return Type: <b>TokenResponse</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_authorization_token(client_id, client_secret, scope, grant_type="master", async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str): Client ID
            client_secret (str): Client secret (password)
            scope (str): Required API scopes
            grant_type (str): Grant type must be 'master'. defaults to "master", must be one of ["master"]

        Keyword Args:
            user_id (str): Xbim Flex user ID. [optional]
            idp_id (str): External identity provider user ID. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TokenResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['client_secret'] = \
            client_secret
        kwargs['grant_type'] = \
            grant_type
        kwargs['scope'] = \
            scope
        return self.get_authorization_token_endpoint.call_with_http_info(**kwargs)

