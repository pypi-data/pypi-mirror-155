"""
    Xbim Flex Identity API 2.0

    Global management and user services for xbim Flex Tenants  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: info@xbim.net
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from xbim_flex.identity.api_client import ApiClient, Endpoint as _Endpoint
from xbim_flex.identity.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from xbim_flex.identity.model.o_data_tenant_user_list import ODataTenantUserList
from xbim_flex.identity.model.team_member_create import TeamMemberCreate
from xbim_flex.identity.model.team_member_edit import TeamMemberEdit
from xbim_flex.identity.model.tenant_user import TenantUser


class MembersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.id20_tenants_tenant_id_members_get_endpoint = _Endpoint(
            settings={
                'response_type': (ODataTenantUserList,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Tenants({tenantId})/Members",
                'operation_id': 'id20_tenants_tenant_id_members_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant_id',
                    'expand',
                    'filter',
                    'select',
                    'orderby',
                    'top',
                    'skip',
                    'count',
                ],
                'required': [
                    'tenant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tenant_id':
                        (str,),
                    'expand':
                        (str,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                    'orderby':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'count':
                        (bool,),
                },
                'attribute_map': {
                    'tenant_id': 'tenantId',
                    'expand': '$expand',
                    'filter': '$filter',
                    'select': '$select',
                    'orderby': '$orderby',
                    'top': '$top',
                    'skip': '$skip',
                    'count': '$count',
                },
                'location_map': {
                    'tenant_id': 'path',
                    'expand': 'query',
                    'filter': 'query',
                    'select': 'query',
                    'orderby': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'count': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id20_tenants_tenant_id_members_post_endpoint = _Endpoint(
            settings={
                'response_type': (TenantUser,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Tenants({tenantId})/Members",
                'operation_id': 'id20_tenants_tenant_id_members_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant_id',
                    'expand',
                    'select',
                    'team_member_create',
                ],
                'required': [
                    'tenant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tenant_id':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                    'team_member_create':
                        (TeamMemberCreate,),
                },
                'attribute_map': {
                    'tenant_id': 'tenantId',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'tenant_id': 'path',
                    'expand': 'query',
                    'select': 'query',
                    'team_member_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.id20_tenants_tenant_id_members_user_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Tenants({tenantId})/Members({userId})",
                'operation_id': 'id20_tenants_tenant_id_members_user_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'tenant_id',
                ],
                'required': [
                    'user_id',
                    'tenant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'tenant_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'userId',
                    'tenant_id': 'tenantId',
                },
                'location_map': {
                    'user_id': 'path',
                    'tenant_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id20_tenants_tenant_id_members_user_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (TenantUser,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Tenants({tenantId})/Members({userId})",
                'operation_id': 'id20_tenants_tenant_id_members_user_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'tenant_id',
                    'expand',
                    'select',
                ],
                'required': [
                    'user_id',
                    'tenant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'tenant_id':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'userId',
                    'tenant_id': 'tenantId',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'user_id': 'path',
                    'tenant_id': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id20_tenants_tenant_id_members_user_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (TenantUser,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/id/2.0/Tenants({tenantId})/Members({userId})",
                'operation_id': 'id20_tenants_tenant_id_members_user_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'tenant_id',
                    'expand',
                    'select',
                    'team_member_edit',
                ],
                'required': [
                    'user_id',
                    'tenant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'tenant_id':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                    'team_member_edit':
                        (TeamMemberEdit,),
                },
                'attribute_map': {
                    'user_id': 'userId',
                    'tenant_id': 'tenantId',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'user_id': 'path',
                    'tenant_id': 'path',
                    'expand': 'query',
                    'select': 'query',
                    'team_member_edit': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def id20_tenants_tenant_id_members_get(
        self,
        tenant_id,
        **kwargs
    ):
        """List members  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>List members.<br/>Queries support: $filter, $orderby, $select, $expand(including nested filters, selects and expands), $top, $skip.<br/>Return Type: <b>ODataTenantUserList</b><br/>For more information about OData responses <a href='https://www.odata.org/getting-started/understand-odata-in-6-steps/'>link</a>.<br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_tenants_tenant_id_members_get(tenant_id, async_req=True)
        >>> result = thread.get()

        Args:
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 5.. [optional]
            filter (str): Restricts the set of items returned. The maximum number of expressions is 1000. The allowed functions are: allfunctions.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            orderby (str): Specifies the order in which items are returned. The maximum number of expressions is 5.. [optional]
            top (int): Limits the number of items returned from a collection. The maximum value is 1000.. [optional]
            skip (int): Excludes the specified number of items of the queried collection from the result.. [optional]
            count (bool): Indicates whether the total count of items within a collection are returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ODataTenantUserList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant_id'] = \
            tenant_id
        return self.id20_tenants_tenant_id_members_get_endpoint.call_with_http_info(**kwargs)

    def id20_tenants_tenant_id_members_post(
        self,
        tenant_id,
        **kwargs
    ):
        """Create Member  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Create Member.<br/>Creates a new Team member adding an existing user to the tenant  The ability to add users to a limited by tenant role.<br/>Return Type: <b>TenantUser</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_tenants_tenant_id_members_post(tenant_id, async_req=True)
        >>> result = thread.get()

        Args:
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            team_member_create (TeamMemberCreate): . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TenantUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant_id'] = \
            tenant_id
        return self.id20_tenants_tenant_id_members_post_endpoint.call_with_http_info(**kwargs)

    def id20_tenants_tenant_id_members_user_id_delete(
        self,
        user_id,
        tenant_id,
        **kwargs
    ):
        """Revoke member  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Revoke member.<br/>Revokes a user from this Tenant. Requires the Administrator Tenant Role.<br/>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_tenants_tenant_id_members_user_id_delete(user_id, tenant_id, async_req=True)
        >>> result = thread.get()

        Args:
            user_id (str): The UserId to revoke
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_id'] = \
            user_id
        kwargs['tenant_id'] = \
            tenant_id
        return self.id20_tenants_tenant_id_members_user_id_delete_endpoint.call_with_http_info(**kwargs)

    def id20_tenants_tenant_id_members_user_id_get(
        self,
        user_id,
        tenant_id,
        **kwargs
    ):
        """Show member  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Show member.<br/>Gets the specified Tenant Member by their userId.<br/>Return Type: <b>TenantUser</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_tenants_tenant_id_members_user_id_get(user_id, tenant_id, async_req=True)
        >>> result = thread.get()

        Args:
            user_id (str): The user id
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TenantUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_id'] = \
            user_id
        kwargs['tenant_id'] = \
            tenant_id
        return self.id20_tenants_tenant_id_members_user_id_get_endpoint.call_with_http_info(**kwargs)

    def id20_tenants_tenant_id_members_user_id_patch(
        self,
        user_id,
        tenant_id,
        **kwargs
    ):
        """Update Member  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Update Member.<br/>Amend an existing team member's team details  Editing users requires Admin rights on the tenant.<br/>Return Type: <b>TenantUser</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id20_tenants_tenant_id_members_user_id_patch(user_id, tenant_id, async_req=True)
        >>> result = thread.get()

        Args:
            user_id (str): The User ID to patch
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            team_member_edit (TeamMemberEdit): The partial Team Member record. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TenantUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_id'] = \
            user_id
        kwargs['tenant_id'] = \
            tenant_id
        return self.id20_tenants_tenant_id_members_user_id_patch_endpoint.call_with_http_info(**kwargs)

