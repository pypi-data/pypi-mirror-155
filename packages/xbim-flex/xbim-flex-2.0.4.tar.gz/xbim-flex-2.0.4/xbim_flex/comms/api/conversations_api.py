"""
    Flex Comms API 2.0

    Communication centralised around construction data  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: info@xbim.net
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from xbim_flex.comms.api_client import ApiClient, Endpoint as _Endpoint
from xbim_flex.comms.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from xbim_flex.comms.model.aggregate_list_value import AggregateListValue
from xbim_flex.comms.model.blob import Blob
from xbim_flex.comms.model.boolean_value import BooleanValue
from xbim_flex.comms.model.conversation import Conversation
from xbim_flex.comms.model.conversation_create import ConversationCreate
from xbim_flex.comms.model.conversation_list import ConversationList
from xbim_flex.comms.model.conversation_tenant import ConversationTenant
from xbim_flex.comms.model.conversation_update import ConversationUpdate
from xbim_flex.comms.model.exception_message import ExceptionMessage
from xbim_flex.comms.model.int32_value import Int32Value
from xbim_flex.comms.model.message import Message
from xbim_flex.comms.model.message_create import MessageCreate
from xbim_flex.comms.model.message_list import MessageList
from xbim_flex.comms.model.message_part import MessagePart
from xbim_flex.comms.model.message_update import MessageUpdate
from xbim_flex.comms.model.participant_with_role import ParticipantWithRole
from xbim_flex.comms.model.participant_with_role_create import ParticipantWithRoleCreate
from xbim_flex.comms.model.participant_with_role_list import ParticipantWithRoleList
from xbim_flex.comms.model.participant_with_role_update import ParticipantWithRoleUpdate


class ConversationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.aggregate_data_endpoint = _Endpoint(
            settings={
                'response_type': (AggregateListValue,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations/Aggregate()",
                'operation_id': 'aggregate_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'expand',
                    'filter',
                    'select',
                    'orderby',
                    'count',
                    'field',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                    'field',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                    ('field',): {

                        "CONVERSATIONDATECREATED": "ConversationDateCreated",
                        "MESSAGEDATECREATED": "MessageDateCreated",
                        "STATE": "State",
                        "BUILDINGNAME": "BuildingName",
                        "OWNER": "Owner"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                    'orderby':
                        (str,),
                    'count':
                        (bool,),
                    'field':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'expand': '$expand',
                    'filter': '$filter',
                    'select': '$select',
                    'orderby': '$orderby',
                    'count': '$count',
                    'field': 'field',
                },
                'location_map': {
                    'region': 'path',
                    'expand': 'query',
                    'filter': 'query',
                    'select': 'query',
                    'orderby': 'query',
                    'count': 'query',
                    'field': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.clone_conversation_endpoint = _Endpoint(
            settings={
                'response_type': (Int32Value,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations/{key}/Clone",
                'operation_id': 'clone_conversation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'key',
                    'region',
                ],
                'required': [
                    'key',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'key':
                        (int,),
                    'region':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    'region': 'region',
                },
                'location_map': {
                    'key': 'path',
                    'region': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_conversation_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations/{key}",
                'operation_id': 'delete_conversation',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'key',
                    'region',
                ],
                'required': [
                    'key',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'key':
                        (int,),
                    'region':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    'region': 'region',
                },
                'location_map': {
                    'key': 'path',
                    'region': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_file_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Files({fileId})",
                'operation_id': 'delete_file',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'file_id',
                    'region',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'file_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'file_id':
                        (int,),
                    'region':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'file_id': 'fileId',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'file_id': 'path',
                    'region': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})",
                'operation_id': 'delete_message',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_message_part_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Delete",
                'operation_id': 'delete_message_part',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'index',
                    'ref',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'index':
                        (int,),
                    'ref':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'index': 'index',
                    'ref': 'ref',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'index': 'query',
                    'ref': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_participant_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Participants({id})",
                'operation_id': 'delete_participant',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conversations_endpoint = _Endpoint(
            settings={
                'response_type': (ConversationList,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations",
                'operation_id': 'get_conversations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'expand',
                    'filter',
                    'select',
                    'orderby',
                    'top',
                    'skip',
                    'count',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                    'orderby':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'count':
                        (bool,),
                },
                'attribute_map': {
                    'region': 'region',
                    'expand': '$expand',
                    'filter': '$filter',
                    'select': '$select',
                    'orderby': '$orderby',
                    'top': '$top',
                    'skip': '$skip',
                    'count': '$count',
                },
                'location_map': {
                    'region': 'path',
                    'expand': 'query',
                    'filter': 'query',
                    'select': 'query',
                    'orderby': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'count': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conversations_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (Conversation,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations/{key}",
                'operation_id': 'get_conversations_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'key',
                    'region',
                    'expand',
                    'select',
                ],
                'required': [
                    'key',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'key':
                        (int,),
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    'region': 'region',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'key': 'path',
                    'region': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_demo_conversation_endpoint = _Endpoint(
            settings={
                'response_type': (ConversationTenant,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations/Demo",
                'operation_id': 'get_demo_conversation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'original',
                    'as_owner',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'original':
                        (int,),
                    'as_owner':
                        (bool,),
                },
                'attribute_map': {
                    'region': 'region',
                    'original': 'original',
                    'as_owner': 'asOwner',
                },
                'location_map': {
                    'region': 'path',
                    'original': 'query',
                    'as_owner': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_file_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Files({fileId})",
                'operation_id': 'get_file',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'file_id',
                    'region',
                    'size',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'file_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                    'size',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                    ('size',): {

                        "FULL": "Full",
                        "MEDIUM": "Medium",
                        "SMALL": "Small"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'file_id':
                        (int,),
                    'region':
                        (str,),
                    'size':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'file_id': 'fileId',
                    'region': 'region',
                    'size': 'size',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'file_id': 'path',
                    'region': 'path',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png',
                    'image/jpg'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_files_endpoint = _Endpoint(
            settings={
                'response_type': ([Blob],),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Files",
                'operation_id': 'get_files',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'expand',
                    'filter',
                    'select',
                    'orderby',
                    'top',
                    'skip',
                    'count',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                    'orderby':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'count':
                        (bool,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'expand': '$expand',
                    'filter': '$filter',
                    'select': '$select',
                    'orderby': '$orderby',
                    'top': '$top',
                    'skip': '$skip',
                    'count': '$count',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'expand': 'query',
                    'filter': 'query',
                    'select': 'query',
                    'orderby': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'count': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_message_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})",
                'operation_id': 'get_message_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'expand',
                    'select',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_messages_endpoint = _Endpoint(
            settings={
                'response_type': (MessageList,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages",
                'operation_id': 'get_messages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'region',
                    'expand',
                    'filter',
                    'select',
                    'orderby',
                    'top',
                    'skip',
                    'count',
                ],
                'required': [
                    'conversation_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                    'orderby':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'count':
                        (bool,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'region': 'region',
                    'expand': '$expand',
                    'filter': '$filter',
                    'select': '$select',
                    'orderby': '$orderby',
                    'top': '$top',
                    'skip': '$skip',
                    'count': '$count',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'region': 'path',
                    'expand': 'query',
                    'filter': 'query',
                    'select': 'query',
                    'orderby': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'count': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_participiants_endpoint = _Endpoint(
            settings={
                'response_type': (ParticipantWithRoleList,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Participants",
                'operation_id': 'get_participiants',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'region',
                    'expand',
                    'filter',
                    'select',
                    'orderby',
                    'top',
                    'skip',
                    'count',
                ],
                'required': [
                    'conversation_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                    'orderby':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'count':
                        (bool,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'region': 'region',
                    'expand': '$expand',
                    'filter': '$filter',
                    'select': '$select',
                    'orderby': '$orderby',
                    'top': '$top',
                    'skip': '$skip',
                    'count': '$count',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'region': 'path',
                    'expand': 'query',
                    'filter': 'query',
                    'select': 'query',
                    'orderby': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'count': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.import_bcf_file_endpoint = _Endpoint(
            settings={
                'response_type': (ConversationList,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations/ImportBcf",
                'operation_id': 'import_bcf_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'file',
                    'tenant_id',
                    'asset_id',
                    'model_id',
                    'file_name',
                ],
                'required': [
                    'region',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'file':
                        (file_type,),
                    'tenant_id':
                        (str,),
                    'asset_id':
                        (int,),
                    'model_id':
                        (int,),
                    'file_name':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'file': 'file',
                    'tenant_id': 'tenantId',
                    'asset_id': 'assetId',
                    'model_id': 'modelId',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'region': 'path',
                    'file': 'form',
                    'tenant_id': 'query',
                    'asset_id': 'query',
                    'model_id': 'query',
                    'file_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.insert_message_part_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Insert",
                'operation_id': 'insert_message_part',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'index',
                    'part',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'index':
                        (int,),
                    'part':
                        (MessagePart,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'index': 'index',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'index': 'query',
                    'part': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.mode_message_part_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Move",
                'operation_id': 'mode_message_part',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'previous_index',
                    'current_index',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'previous_index':
                        (int,),
                    'current_index':
                        (int,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'previous_index': 'previousIndex',
                    'current_index': 'currentIndex',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'previous_index': 'query',
                    'current_index': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.patch_conversation_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations/{key}",
                'operation_id': 'patch_conversation',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'key',
                    'region',
                    'conversation',
                ],
                'required': [
                    'key',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'key':
                        (int,),
                    'region':
                        (str,),
                    'conversation':
                        (ConversationUpdate,),
                },
                'attribute_map': {
                    'key': 'key',
                    'region': 'region',
                },
                'location_map': {
                    'key': 'path',
                    'region': 'path',
                    'conversation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.patch_message_endpoint = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})",
                'operation_id': 'patch_message',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'message',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'message':
                        (MessageUpdate,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'message': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.patch_participant_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Participants({id})",
                'operation_id': 'patch_participant',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'participant',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'participant':
                        (ParticipantWithRoleUpdate,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'participant': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_conversation_endpoint = _Endpoint(
            settings={
                'response_type': (Conversation,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations",
                'operation_id': 'post_conversation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'conversation',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'conversation':
                        (ConversationCreate,),
                },
                'attribute_map': {
                    'region': 'region',
                },
                'location_map': {
                    'region': 'path',
                    'conversation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_file_endpoint = _Endpoint(
            settings={
                'response_type': (Blob,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Files",
                'operation_id': 'post_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'file',
                    'part_index',
                    'ref',
                    'file_name',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'file':
                        (file_type,),
                    'part_index':
                        (int,),
                    'ref':
                        (str,),
                    'file_name':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'file': 'file',
                    'part_index': 'partIndex',
                    'ref': 'ref',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'file': 'form',
                    'part_index': 'query',
                    'ref': 'query',
                    'file_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.post_message_endpoint = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages",
                'operation_id': 'post_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'region',
                    'message',
                ],
                'required': [
                    'conversation_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'region':
                        (str,),
                    'message':
                        (MessageCreate,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'region': 'path',
                    'message': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_participant_endpoint = _Endpoint(
            settings={
                'response_type': (ParticipantWithRole,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Participants",
                'operation_id': 'post_participant',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'region',
                    'participant',
                ],
                'required': [
                    'conversation_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'region':
                        (str,),
                    'participant':
                        (ParticipantWithRoleCreate,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'region': 'path',
                    'participant': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.put_message_part_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Set",
                'operation_id': 'put_message_part',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'index',
                    'ref',
                    'part',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'index':
                        (int,),
                    'ref':
                        (str,),
                    'part':
                        (MessagePart,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'index': 'index',
                    'ref': 'ref',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'index': 'query',
                    'ref': 'query',
                    'part': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.put_participants_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Participants",
                'operation_id': 'put_participants',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'region',
                    'participants',
                ],
                'required': [
                    'conversation_id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                    'participants',
                ]
            },
            root_map={
                'validations': {
                    ('participants',): {

                    },
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'region':
                        (str,),
                    'participants':
                        ([ParticipantWithRoleCreate],),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'region': 'path',
                    'participants': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_clone_conversation_endpoint = _Endpoint(
            settings={
                'response_type': (BooleanValue,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations/{key}/SendClone",
                'operation_id': 'send_clone_conversation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'key',
                    'region',
                    'email',
                ],
                'required': [
                    'key',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'key':
                        (int,),
                    'region':
                        (str,),
                    'email':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    'region': 'region',
                    'email': 'email',
                },
                'location_map': {
                    'key': 'path',
                    'region': 'path',
                    'email': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.send_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Send",
                'operation_id': 'send_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_message_state_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/SetState",
                'operation_id': 'set_message_state',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'state',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                    'state',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                    ('state',): {

                        "NOTREAD": "NotRead",
                        "READ": "Read",
                        "DISMISSED": "Dismissed"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'state':
                        (str,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'state': 'state',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'state': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.swap_message_parts_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': "/{region}/comms/2.0/Conversations({conversationId})/Messages({id})/Swap",
                'operation_id': 'swap_message_parts',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation_id',
                    'id',
                    'region',
                    'index_a',
                    'index_b',
                ],
                'required': [
                    'conversation_id',
                    'id',
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope",
                        "SANDBOX": "Sandbox"
                    },
                },
                'openapi_types': {
                    'conversation_id':
                        (int,),
                    'id':
                        (int,),
                    'region':
                        (str,),
                    'index_a':
                        (int,),
                    'index_b':
                        (int,),
                },
                'attribute_map': {
                    'conversation_id': 'conversationId',
                    'id': 'id',
                    'region': 'region',
                    'index_a': 'indexA',
                    'index_b': 'indexB',
                },
                'location_map': {
                    'conversation_id': 'path',
                    'id': 'path',
                    'region': 'path',
                    'index_a': 'query',
                    'index_b': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def aggregate_data(
        self,
        region="UK",
        **kwargs
    ):
        """Aggregates conversation data efficiently for reporting purposes  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Aggregates conversation data efficiently for reporting purposes.<br/>Return Type: <b>AggregateListValue</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.aggregate_data(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            filter (str): [optional]
            select (str): [optional]
            orderby (str): [optional]
            count (bool): [optional]
            field (str): The field to aggregate on. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AggregateListValue
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.aggregate_data_endpoint.call_with_http_info(**kwargs)

    def clone_conversation(
        self,
        key,
        region="UK",
        **kwargs
    ):
        """Get Conversations clone conversation  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>Int32Value</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_conversation(key, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            key (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Int32Value
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['key'] = \
            key
        kwargs['region'] = \
            region
        return self.clone_conversation_endpoint.call_with_http_info(**kwargs)

    def delete_conversation(
        self,
        key,
        region="UK",
        **kwargs
    ):
        """Delete Conversations conversation  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_conversation(key, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            key (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['key'] = \
            key
        kwargs['region'] = \
            region
        return self.delete_conversation_endpoint.call_with_http_info(**kwargs)

    def delete_file(
        self,
        conversation_id,
        id,
        file_id,
        region="UK",
        **kwargs
    ):
        """Delete Conversations file  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_file(conversation_id, id, file_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            file_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['file_id'] = \
            file_id
        kwargs['region'] = \
            region
        return self.delete_file_endpoint.call_with_http_info(**kwargs)

    def delete_message(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Delete Conversations message  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_message(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.delete_message_endpoint.call_with_http_info(**kwargs)

    def delete_message_part(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Delete Conversations message part  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_message_part(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            index (int): [optional]
            ref (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.delete_message_part_endpoint.call_with_http_info(**kwargs)

    def delete_participant(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Delete Conversations participant  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_participant(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.delete_participant_endpoint.call_with_http_info(**kwargs)

    def get_conversations(
        self,
        region="UK",
        **kwargs
    ):
        """Get Conversations   # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>ConversationList</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conversations(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            filter (str): [optional]
            select (str): [optional]
            orderby (str): [optional]
            top (int): [optional]
            skip (int): [optional]
            count (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConversationList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.get_conversations_endpoint.call_with_http_info(**kwargs)

    def get_conversations_by_id(
        self,
        key,
        region="UK",
        **kwargs
    ):
        """Get Conversations by id  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>Conversation</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conversations_by_id(key, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            key (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            select (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Conversation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['key'] = \
            key
        kwargs['region'] = \
            region
        return self.get_conversations_by_id_endpoint.call_with_http_info(**kwargs)

    def get_demo_conversation(
        self,
        region="UK",
        **kwargs
    ):
        """Get Conversations demo conversation  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>ConversationTenant</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_demo_conversation(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            original (int): [optional]
            as_owner (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConversationTenant
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.get_demo_conversation_endpoint.call_with_http_info(**kwargs)

    def get_file(
        self,
        conversation_id,
        id,
        file_id,
        region="UK",
        **kwargs
    ):
        """Get Conversations file  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>string</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_file(conversation_id, id, file_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            file_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            size (str): [optional] if omitted the server will use the default value of "0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['file_id'] = \
            file_id
        kwargs['region'] = \
            region
        return self.get_file_endpoint.call_with_http_info(**kwargs)

    def get_files(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Get Conversations files  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>Blob</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_files(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            filter (str): [optional]
            select (str): [optional]
            orderby (str): [optional]
            top (int): [optional]
            skip (int): [optional]
            count (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Blob]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.get_files_endpoint.call_with_http_info(**kwargs)

    def get_message_by_id(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Get Conversations message by id  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>Message</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_message_by_id(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            select (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Message
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.get_message_by_id_endpoint.call_with_http_info(**kwargs)

    def get_messages(
        self,
        conversation_id,
        region="UK",
        **kwargs
    ):
        """Get Conversations messages  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>MessageList</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_messages(conversation_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            filter (str): [optional]
            select (str): [optional]
            orderby (str): [optional]
            top (int): [optional]
            skip (int): [optional]
            count (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            MessageList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['region'] = \
            region
        return self.get_messages_endpoint.call_with_http_info(**kwargs)

    def get_participiants(
        self,
        conversation_id,
        region="UK",
        **kwargs
    ):
        """Get Conversations participiants  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>ParticipantWithRoleList</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_participiants(conversation_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            filter (str): [optional]
            select (str): [optional]
            orderby (str): [optional]
            top (int): [optional]
            skip (int): [optional]
            count (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ParticipantWithRoleList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['region'] = \
            region
        return self.get_participiants_endpoint.call_with_http_info(**kwargs)

    def import_bcf_file(
        self,
        file,
        region="UK",
        **kwargs
    ):
        """Imports a BCF File's Topics and Markup as one or more Flex conversations  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Imports a BCF File's Topics and Markup as one or more Flex conversations.<br/>Return Type: <b>ConversationList</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_bcf_file(file, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            file (file_type): An arbitrary file which will get associated to the message.
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            tenant_id (str): Either the tenant identifier string or GUID. [optional]
            asset_id (int): An optional AssetId to help identify the asset hosting the referenced model. [optional]
            model_id (int): An optional ModelId identifying the model to link the BCF to. [optional]
            file_name (str): The name of the file. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConversationList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        kwargs['file'] = \
            file
        return self.import_bcf_file_endpoint.call_with_http_info(**kwargs)

    def insert_message_part(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Post Conversations insert message part  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_message_part(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            index (int): [optional]
            part (MessagePart): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.insert_message_part_endpoint.call_with_http_info(**kwargs)

    def mode_message_part(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Post Conversations mode message part  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mode_message_part(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            previous_index (int): [optional]
            current_index (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.mode_message_part_endpoint.call_with_http_info(**kwargs)

    def patch_conversation(
        self,
        key,
        region="UK",
        **kwargs
    ):
        """Patch Conversations conversation  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_conversation(key, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            key (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            conversation (ConversationUpdate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['key'] = \
            key
        kwargs['region'] = \
            region
        return self.patch_conversation_endpoint.call_with_http_info(**kwargs)

    def patch_message(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Patch Conversations message  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>Message</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_message(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            message (MessageUpdate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Message
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.patch_message_endpoint.call_with_http_info(**kwargs)

    def patch_participant(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Patch Conversations participant  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_participant(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            participant (ParticipantWithRoleUpdate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.patch_participant_endpoint.call_with_http_info(**kwargs)

    def post_conversation(
        self,
        region="UK",
        **kwargs
    ):
        """Post Conversations conversation  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>Conversation</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_conversation(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            conversation (ConversationCreate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Conversation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.post_conversation_endpoint.call_with_http_info(**kwargs)

    def post_file(
        self,
        conversation_id,
        id,
        file,
        region="UK",
        **kwargs
    ):
        """Post Conversations file  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>Blob</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_file(conversation_id, id, file, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            file (file_type): An arbitrary file which will get associated to the message.
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            part_index (int): [optional]
            ref (str): [optional]
            file_name (str): The name of the file. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Blob
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        kwargs['file'] = \
            file
        return self.post_file_endpoint.call_with_http_info(**kwargs)

    def post_message(
        self,
        conversation_id,
        region="UK",
        **kwargs
    ):
        """Post Conversations message  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>Message</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_message(conversation_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            message (MessageCreate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Message
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['region'] = \
            region
        return self.post_message_endpoint.call_with_http_info(**kwargs)

    def post_participant(
        self,
        conversation_id,
        region="UK",
        **kwargs
    ):
        """Post Conversations participant  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>ParticipantWithRole</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_participant(conversation_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            participant (ParticipantWithRoleCreate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ParticipantWithRole
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['region'] = \
            region
        return self.post_participant_endpoint.call_with_http_info(**kwargs)

    def put_message_part(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Put Conversations message part  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_message_part(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            index (int): [optional]
            ref (str): [optional]
            part (MessagePart): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.put_message_part_endpoint.call_with_http_info(**kwargs)

    def put_participants(
        self,
        conversation_id,
        region="UK",
        **kwargs
    ):
        """Put Conversations participants  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_participants(conversation_id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            participants ([ParticipantWithRoleCreate]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['region'] = \
            region
        return self.put_participants_endpoint.call_with_http_info(**kwargs)

    def send_clone_conversation(
        self,
        key,
        region="UK",
        **kwargs
    ):
        """Get Conversations send clone conversation  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b>BooleanValue</b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_clone_conversation(key, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            key (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            email (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BooleanValue
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['key'] = \
            key
        kwargs['region'] = \
            region
        return self.send_clone_conversation_endpoint.call_with_http_info(**kwargs)

    def send_message(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Post Conversations send message  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.send_message_endpoint.call_with_http_info(**kwargs)

    def set_message_state(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Put Conversations set message state  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_message_state(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            state (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.set_message_state_endpoint.call_with_http_info(**kwargs)

    def swap_message_parts(
        self,
        conversation_id,
        id,
        region="UK",
        **kwargs
    ):
        """Post Conversations swap message parts  # noqa: E501

        <span style='font-size: 17px;'>Summary:</span>Return Type: <b></b><br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.swap_message_parts(conversation_id, id, region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            conversation_id (int):
            id (int):
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            index_a (int): [optional]
            index_b (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conversation_id'] = \
            conversation_id
        kwargs['id'] = \
            id
        kwargs['region'] = \
            region
        return self.swap_message_parts_endpoint.call_with_http_info(**kwargs)

